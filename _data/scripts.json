{
  "userProject": [
    {
      "ProjectId": 100,
      "ProjectName": "Start BicepDownloadArtifacts, GetBicep, latest or prerelease versions",
      "Title": "Start BicepDownloadArtifacts, GetBicep",
      "Description": "Download Build Artifacts from GitHub, used for Bicep artifacts",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2021-03-11T21:41:23.703",
      "IsPublished": true,
      "PublishedDate": "2021-03-11T21:41:23.703",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Install-Module override to ALWAYS store modules in Program Files\\WindowsPowerShell",
      "TagList": "Azure,Bicep,GitHub,Artifacts,GH",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": "N/A",
      "RatingsCount": "N/A",
      "AverageRating7Days": "N/A",
      "RatingsCount7Days": "N/A",
      "ModifiedDate": "2021-11-21T21:41:23.703",
      "ProjectType": "GenericProject",
      "ScriptFile": "Start-BicepDownloadArtifacts.ps1"
    },
    {
      "ProjectId": 100,
      "ProjectName": "Install-Module override to ALWAYS store modules in Program Files\\WindowsPowerShell",
      "Title": "Use Install-Module to easily Install and Uninstall Modules without fuss in PowerShell or WindowsPowerShell",
      "Description": "Consolidate your Modules in a single directory",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2021-03-11T21:41:23.703",
      "IsPublished": true,
      "PublishedDate": "2021-03-11T21:41:23.703",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Install-Module override to ALWAYS store modules in Program Files\\WindowsPowerShell",
      "TagList": "PowerShellGet,Install-Module,PackageManagement",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": "N/A",
      "RatingsCount": "N/A",
      "AverageRating7Days": "N/A",
      "RatingsCount7Days": "N/A",
      "ModifiedDate": "2021-03-11T21:41:23.703",
      "ProjectType": "GenericProject",
      "ScriptFile": "Install-Module.ps1"
    },
    {
      "ProjectId": 9339,
      "ProjectName": "d0670079-6158-4dc5-a9da-b261c70e4b7d",
      "Title": "A script to monitor servers, Ping Test, with email notification",
      "Description": "The Script runs against a list of Servers and notifies the user if the servers are down.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2010-08-02T19:48:26.677",
      "IsPublished": true,
      "PublishedDate": "2010-08-02T19:49:16.283",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "d0670079-6158-4dc5-a9da-b261c70e4b7d",
      "TagList": "Notification,Monitoring,Ping Test,Test-Online,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.190476190476191,
      "RatingsCount": 21,
      "AverageRating7Days": 3.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2018-10-12T21:41:23.703",
      "ProjectType": "GenericProject",
      "ScriptFile": "[215904] Start-MonitorOnline.ps1"
    },
    {
      "ProjectId": 9346,
      "ProjectName": "06ea3537-08b7-41eb-9248-0f776cf28017",
      "Title": "Server Uptime Report, with Email notification (old)",
      "Description": "This script reports the server/workstation uptime and emails the results in an easy to read table. This is an old version, small mods in the new version, not really much difference.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2010-08-04T15:49:07.577",
      "IsPublished": true,
      "PublishedDate": "2010-08-04T15:49:34.277",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "06ea3537-08b7-41eb-9248-0f776cf28017",
      "TagList": "Email notification,Uptime,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-01-15T21:31:57.117",
      "ProjectType": "GenericProject",
      "ScriptFile": "[74669] Get-UptimeDays.ps1"
    },
    {
      "ProjectId": 12078,
      "ProjectName": "2ff11fd5-67f6-44e4-8816-28edb984d63a",
      "Title": "Saving Credentials for using within Scripts (Updated Nov 2012)",
      "Description": "This script saves and calls the credentials for use later on. \r\n\r\nThis is useful when performing queries against several domains in your environment.\r\n\r\nThe most common usage for these would be in WMI queries or other PowerShell cmdlets that support the -Credential parameter.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-01-13T19:11:54.367",
      "IsPublished": false,
      "PublishedDate": "2011-01-13T19:11:55.993",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2012-12-15T16:17:51.507",
      "InitialProjectName": "2ff11fd5-67f6-44e4-8816-28edb984d63a",
      "TagList": "-credential,Get-Credential,password,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-11-28T16:31:13.237",
      "ProjectType": "GenericProject",
      "ScriptFile": "[71382] Receive-Credential.ps1"
    },
    {
      "ProjectId": 12080,
      "ProjectName": "74884d85-c0b5-446a-be04-3d411a6dce2f",
      "Title": "Determine Volume/Disk information - Size and Free Space (updated July 2014)",
      "Description": "This script uses WMI to determine the volume information. I mainly uploaded i since some of my other scripts call this script for info.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-01-13T20:01:56.953",
      "IsPublished": true,
      "PublishedDate": "2011-01-13T20:01:59.42",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "74884d85-c0b5-446a-be04-3d411a6dce2f",
      "TagList": "WMI,disk space,disk usage,Volume Space,Win32_Volume,Volume,Get-VolumeWin32,Get-DiskSpace,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.8,
      "RatingsCount": 5,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-07-20T10:52:56.96",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120400] Get-VolumeWin32.ps1"
    },
    {
      "ProjectId": 12089,
      "ProjectName": "2d537e5c-b5d4-42ca-a23e-2cbce636f58d",
      "Title": "Server Reboot Monitor (Report Online/Offline Status) + Email (Updated Jul  2014)",
      "Description": "Provide a list of hosts to monitor in a file, the script reads the file every cycle so you can change/edit the list of monitored servers without touching the script, that runs in a loop.\r\n\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-01-14T13:49:56.417",
      "IsPublished": true,
      "PublishedDate": "2011-01-14T13:49:58.98",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "2d537e5c-b5d4-42ca-a23e-2cbce636f58d",
      "TagList": "Monitoring,Ping Test,Server down,test-connection,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.363636363636363,
      "RatingsCount": 11,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2014-07-22T11:42:46.043",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120512] Start-Monitor.ps1"
    },
    {
      "ProjectId": 12114,
      "ProjectName": "5ed5c22d-32bf-4d6b-85a0-4f1d47086616",
      "Title": "This script sets the members of Local Security Groups (updated 2013)",
      "Description": "DescriptionScript updates theÂ Local membership of a specified group ( with a user account rather than a group, adding the group would be a best practice , then managing the members of that group in ActiveDirectory)Defaults to the local Administrator Group, however you can set def",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-01-29T09:38:38.247",
      "IsPublished": true,
      "PublishedDate": "2011-01-29T09:39:01.087",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "5ed5c22d-32bf-4d6b-85a0-4f1d47086616",
      "TagList": "Group Membership,Local Security,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-11-26T17:14:49.22",
      "ProjectType": "GenericProject",
      "ScriptFile": "[103559] Set-LocalGroup.ps1"
    },
    {
      "ProjectId": 12125,
      "ProjectName": "ed4a0cb7-603c-488d-afeb-194b7a60f42f",
      "Title": "This script gets the members of Local Security Groups (Updated Feb 2013)",
      "Description": "I default this script to get local admins, since I use this for server builds and mainly add other groups to that group so they can administer the server, this script works with the Set-LocalGroups script I have uploaded.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-02-07T17:51:39.553",
      "IsPublished": true,
      "PublishedDate": "2011-02-07T17:51:40.35",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "ed4a0cb7-603c-488d-afeb-194b7a60f42f",
      "TagList": "Group Membership,Local Security,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-05-27T08:18:02.983",
      "ProjectType": "GenericProject",
      "ScriptFile": "[75998] Get-LocalGroup.ps1"
    },
    {
      "ProjectId": 12139,
      "ProjectName": "83f9132f-e508-4ee8-941f-45c2b602bfea",
      "Title": "Leveraging Account Lockout tools, find source with PowerShell (updated Jul 2014)",
      "Description": "Leveraging account Lockout tools with PowerShell, searching for lockout sources in an Active Directory domain.\r\n\r\nAutomatically search the Domain Controllers Security Event logs for account lockout sources.\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-02-15T19:54:15.893",
      "IsPublished": true,
      "PublishedDate": "2011-02-15T19:54:16.363",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "83f9132f-e508-4ee8-941f-45c2b602bfea",
      "TagList": "Account Lockout,Bad Authentication,Bad Passwords,Lockout Source,User Accounts,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.333333333333333,
      "RatingsCount": 3,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-07-19T20:14:00.807",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120381] Get-AccountLockout.ps1"
    },
    {
      "ProjectId": 12260,
      "ProjectName": "44e9fef7-a04b-40b3-bb05-97659e56e27e",
      "Title": "Resolve IP address from Hostname (Updated May 2013)",
      "Description": "Description: Return the IP address fromÂ a Hostname.\r\n\r\nUse the ipv6 or ipv4 only switches to return either.\r\n\r\nBeware using localhost will only return loopback addresses.\r\n\r\nHaving to write 200 characters for the minimum description length for these is simply a waste of my time..",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-01T09:30:04.963",
      "IsPublished": true,
      "PublishedDate": "2011-03-01T09:30:33.16",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "44e9fef7-a04b-40b3-bb05-97659e56e27e",
      "TagList": "IP Address,DNS,Hostname,IPV4,IPV6,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 3.888888888888889,
      "RatingsCount": 9,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-05-09T15:11:58.483",
      "ProjectType": "GenericProject",
      "ScriptFile": "[81933] Get-IPAddress.ps1"
    },
    {
      "ProjectId": 12272,
      "ProjectName": "c74b4a23-e4ec-4829-b38e-54252b40fdec",
      "Title": "Deploy VM's to ESX / VSphere using PowerCLI (Updated Oct 2012)",
      "Description": "This is deployment script for building VM's from a template and customization spec. Tested on ESX 3.5 and VSphere 4.1.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-10T21:31:16.947",
      "IsPublished": true,
      "PublishedDate": "2011-03-10T21:31:41.453",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "c74b4a23-e4ec-4829-b38e-54252b40fdec",
      "TagList": "Virtualization,Deployment,ESX,PowerCLI,VSphere,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 3.5,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-09-05T14:22:02.94",
      "ProjectType": "GenericProject",
      "ScriptFile": "[63392] Start-VMDeploy.ps1"
    },
    {
      "ProjectId": 12276,
      "ProjectName": "26539b66-13a7-44f6-9adb-886c54fc141f",
      "Title": "Determine OS Architecture (32 bit or 64 bit) * Updated",
      "Description": "This script returns an object stating if the Operating System is running as 32 bit or 64 bit.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-12T08:48:19.38",
      "IsPublished": true,
      "PublishedDate": "2011-03-12T08:48:44.987",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "26539b66-13a7-44f6-9adb-886c54fc141f",
      "TagList": "Architecture,32 bit,32bit,64 bit,64bit,Operating System,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.0,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-04-11T15:29:16.55",
      "ProjectType": "GenericProject",
      "ScriptFile": "[79725] Get-OSArchitecture.ps1"
    },
    {
      "ProjectId": 12277,
      "ProjectName": "6b9ec914-9647-4a52-b3d2-15b122bc6df7",
      "Title": "Check for crash dump files on computer (updated July 2014)",
      "Description": "This script searches for crash dump files in the default locations.\r\nIt also checks to see if an alternate locations has been configured for the crash dump, which is available in Server 2008+, where the crash dump can be configured for an alternate drive than the system.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-12T10:43:19.657",
      "IsPublished": true,
      "PublishedDate": "2011-03-12T10:43:20.127",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "6b9ec914-9647-4a52-b3d2-15b122bc6df7",
      "TagList": "minidump,Crash Dump Files,DedicatedCrashDump,DMP,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-07-24T22:43:24.277",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120690] Get-CrashDumpFile.ps1"
    },
    {
      "ProjectId": 12313,
      "ProjectName": "59e314fc-3d4b-42bc-9769-fd60c20070a5",
      "Title": "This command invokes PSExec",
      "Description": "Psexec is one of my favourite tools.\r\n\r\nThis simply launches it from Powershell.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-25T12:07:34.577",
      "IsPublished": true,
      "PublishedDate": "2011-03-25T12:07:59.403",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "59e314fc-3d4b-42bc-9769-fd60c20070a5",
      "TagList": "Psexec,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-03-24T19:08:33.77",
      "ProjectType": "GenericProject",
      "ScriptFile": "[78911] Invoke-PSEXEC.ps1"
    },
    {
      "ProjectId": 12322,
      "ProjectName": "bd0c8d87-466f-4488-92a2-0f726cb6f4cd",
      "Title": "Send a HTML email report in a formatted table - Send-HtmlEmail",
      "Description": "This will take any Object from the PowerShell interface, convert the object (table) into HTML and then send it by email.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-03-28T09:52:42.183",
      "IsPublished": true,
      "PublishedDate": "2011-03-28T18:05:02.757",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "bd0c8d87-466f-4488-92a2-0f726cb6f4cd",
      "TagList": "SMTP,Notification,CSS,Email,HTML Email,PowerShell Reporting,Send-MailMessage,splatting,table,Formatted Email,ConvertTo-Html,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.8,
      "RatingsCount": 5,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-06-05T07:47:53.423",
      "ProjectType": "GenericProject",
      "ScriptFile": "[46904] Send-HTMLEmail.ps1"
    },
    {
      "ProjectId": 12331,
      "ProjectName": "f7204f78-e73b-468c-8d8f-ceeaaae65aee",
      "Title": "Pad a text list to make all items the same length",
      "Description": "You can pad right or pad left.\r\n\r\nThanks to @JeffHicks for the code.\r\n\r\nhttp://jdhitsolutions.com/blog/2011/04/friday-fun-powershell-pep-talk/",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-04-02T16:16:29.823",
      "IsPublished": true,
      "PublishedDate": "2011-04-02T16:16:54.697",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "f7204f78-e73b-468c-8d8f-ceeaaae65aee",
      "TagList": "padright,padleft,Text padding",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2011-04-02T16:45:11.607",
      "ProjectType": "GenericProject",
      "ScriptFile": ""
    },
    {
      "ProjectId": 12425,
      "ProjectName": "2789c120-48cc-489b-8d61-c1602e954b24",
      "Title": "A Function to test-connection for a list of Computers, in a flexible format.",
      "Description": "This script uses Test-Connection to filter computers that are online.\r\n\r\nOnly online computers are returned.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-04-28T21:34:50.283",
      "IsPublished": true,
      "PublishedDate": "2011-04-28T21:34:50.953",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "2789c120-48cc-489b-8d61-c1602e954b24",
      "TagList": "Online,Ping,test-connection,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.0,
      "RatingsCount": 5,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-01-04T17:39:27.35",
      "ProjectType": "GenericProject",
      "ScriptFile": "[47774] Test-Online.ps1"
    },
    {
      "ProjectId": 12439,
      "ProjectName": "d46b1f3b-36a4-4a56-951b-e37815a2df0c",
      "Title": "Find the logged on users on a remote system/s",
      "Description": "DescriptionThis script should be useful for Helpdesk or other IT Admins to query remote machines to see who is logged on.This could also be useful for Remote Desktop Services or Citrix AdminsÂ * Note this scripts also returns non system accounts that are running services.Â Use like",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-05-04T09:43:35.18",
      "IsPublished": true,
      "PublishedDate": "2011-05-04T09:43:37.4",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "d46b1f3b-36a4-4a56-951b-e37815a2df0c",
      "TagList": "Current User,Logged on,User sessions,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.76,
      "RatingsCount": 25,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2014-11-14T13:15:07.023",
      "ProjectType": "GenericProject",
      "ScriptFile": "[129685] Get-LoggedOnUser.ps1"
    },
    {
      "ProjectId": 12465,
      "ProjectName": "49207d61-721d-4522-879b-2634d2d02cc6",
      "Title": "Build an RDCMan (Remote Desktop Connection Manager) Config File",
      "Description": "This script will import computernames into an RDCMan (Remote Desktop Connection Manager) template file.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-05-13T21:29:23.653",
      "IsPublished": true,
      "PublishedDate": "2011-05-13T21:51:45.747",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "49207d61-721d-4522-879b-2634d2d02cc6",
      "TagList": "XML,Import,RDC config,RDCMan,Remote Desktop Client,Remote Desktop Connection Manager,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 3.25,
      "RatingsCount": 4,
      "AverageRating7Days": 3.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2017-03-29T14:41:13.11",
      "ProjectType": "GenericProject",
      "ScriptFile": "[75222] Add-RDCManConfig.ps1"
    },
    {
      "ProjectId": 12495,
      "ProjectName": "f6550a1d-6ca7-4cc4-b066-a0ea5761866d",
      "Title": "Build an RDCMan (Remote Desktop Connection Manager) Config File Version 2.0",
      "Description": "This script will import computernames into an RDCMan (Remote Desktop Connection Manager) template file.\r\n\r\nYou can also create new groups and specify the groups to add the computers to.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-05-21T16:29:27.747",
      "IsPublished": true,
      "PublishedDate": "2011-05-21T16:33:57.027",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "f6550a1d-6ca7-4cc4-b066-a0ea5761866d",
      "TagList": "XML,Import,RDC config,RDCMan,Remote Desktop Client,Remote Desktop Connection Manager,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.2,
      "RatingsCount": 5,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2017-03-29T14:41:41.55",
      "ProjectType": "GenericProject",
      "ScriptFile": "[75221] Add-RDCManConfigv2.ps1"
    },
    {
      "ProjectId": 12565,
      "ProjectName": "9ea8cd6e-0371-47ec-8e07-cdb9f683e08b",
      "Title": "Get counter information from local or remote systems",
      "Description": "This script demonstrates the ability to collect statistics using the Get-Counter cmdlet.\r\n\r\nMore easily select the specific counters you actually need.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-06-11T19:32:08.73",
      "IsPublished": true,
      "PublishedDate": "2011-06-11T19:32:09.607",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "9ea8cd6e-0371-47ec-8e07-cdb9f683e08b",
      "TagList": "Get-Count,Counter,Performance Monitoring",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2011-06-11T19:41:17.827",
      "ProjectType": "GenericProject",
      "ScriptFile": ""
    },
    {
      "ProjectId": 12832,
      "ProjectName": "Find-and-Report-on-cc49120e",
      "Title": "Find and Report on Directory Quotas, leveraging the DirQuota Command",
      "Description": "This script leverages powershell remoting to retrieve the Quota Listings from remote systems.It also leverages the Quest Active Directory cmdlets to retrieve computer accounts that are members of a security group.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-08-17T16:59:55.737",
      "IsPublished": true,
      "PublishedDate": "2011-08-17T16:59:57.143",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2011-09-06T21:53:57.077",
      "InitialProjectName": "Find-and-Report-on-cc49120e",
      "TagList": "Powershell,Remoting,dirquota,Quotas,File System Quota,Quota Report,Community",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2011-09-11T15:22:24.48",
      "ProjectType": "GenericProject",
      "ScriptFile": "[41455] Start-QuotaReport.ps1"
    },
    {
      "ProjectId": 12848,
      "ProjectName": "Find-User-Logon-Information-5806f3b4",
      "Title": "Find User Logon Information that is not replicated between Domain Controllers",
      "Description": "check each domain controller in the domain to find specific user information that is not replicated between DC's. The script checks each DC for the latest record. The script calls another script to find the names of each domain controller.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-08-20T13:24:08.893",
      "IsPublished": true,
      "PublishedDate": "2012-05-02T03:55:36.05",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-User-Logon-Information-5806f3b4",
      "TagList": "Domain Controllers,lastLogon,User Accounts,BadPasswordTime,LastLogoff,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-04-16T15:52:51.377",
      "ProjectType": "GenericProject",
      "ScriptFile": "[79946] Get-UserLogonInformation.ps1"
    },
    {
      "ProjectId": 12917,
      "ProjectName": "Update-Sysinternals-8386bed2",
      "Title": "Update-Sysinternals - Download Sysinternals tools (Updated Sept 2017)",
      "Description": "This script downloads the SysInternals Suite.It is based on downloading the whole suite of tools in the zip package.I recommend to check for updates regularly.* I updated this script to use Invoke-WebRequest and Expand-Archive. (it used to map a psdrive and use 7Zip).",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-08-27T12:09:46.41",
      "IsPublished": true,
      "PublishedDate": "2011-08-27T12:10:14.223",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Update-Sysinternals-8386bed2",
      "TagList": "sysinternals,procmon,procexp,download sysinternals,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.5,
      "RatingsCount": 10,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2017-09-12T15:01:59.197",
      "ProjectType": "GenericProject",
      "ScriptFile": "[179291] Update-Sysinternals.ps1"
    },
    {
      "ProjectId": 12975,
      "ProjectName": "Search-VMware-Logs-for-7528a274",
      "Title": "Search VMware Logs for Errors or other Information Get-VMwareLogs",
      "Description": "This script will parse VMware logs for particular search strings.An example in this code is for Memory Controller Errors (where the term MCE is used).You run this on a scheduled task and it will scan the logs and email any matching events.I recommend scanning everyÂ 15 mins, then ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-09-01T18:25:50.203",
      "IsPublished": true,
      "PublishedDate": "2011-09-01T18:25:51.717",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Search-VMware-Logs-for-7528a274",
      "TagList": "VMware,VMware Logs,ESX Logs,vSphere Logs,vmkernel Logs,Messages Logs,Community,PowerShell",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2011-09-01T18:25:50.513",
      "ProjectType": "GenericProject",
      "ScriptFile": "[42109] Get-VMwareLogs.ps1"
    },
    {
      "ProjectId": 13956,
      "ProjectName": "Find-HBA-and-WWPN-53121140",
      "Title": "Find HBA and WWN Information on Windows using WMI (Updated June 2015)",
      "Description": "Find the WWN Information in order to Map storage etc. I recommend combining this script with Send-HtmlEmail function.\r\nSend-HTMLEmail -InputObject (Get-HBAWin -ComputerName 10.185.63.253,10.185.63.254) -Subject \"HBA Info\"\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2011-11-15T12:01:22.23",
      "IsPublished": true,
      "PublishedDate": "2011-11-15T12:02:40.22",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2011-11-15T12:04:41.863",
      "InitialProjectName": "Find-HBA-and-WWPN-53121140",
      "TagList": "WWN,HBA,MSFC_FCAdapterHBAAttributes,Storage Adapters,Fibre Channel,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.777777777777778,
      "RatingsCount": 27,
      "AverageRating7Days": 4.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2015-06-25T08:49:48.147",
      "ProjectType": "GenericProject",
      "ScriptFile": "[133699] Get-HBAWin.ps1"
    },
    {
      "ProjectId": 16685,
      "ProjectName": "Edit-advanced-functions (Updated 2021/04)",
      "Title": "Edit advanced functions (cmdlets) or script from within a Module to run in ISE",
      "Description": "If you write your own scripts and save them as a module, this function easily opens the cmdlet/function for quick editing. Not having to search the file system to open scripts means that you can more efficiently update and manage modifications to your code. Will run in the ISE...",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-05-02T08:13:45.81",
      "IsPublished": true,
      "PublishedDate": "2012-05-02T08:13:46.543",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Edit-advanced-functions-73076926",
      "TagList": "PowerShell ISE,scripting,Editing advanced functions,psedit,Update scripts,cmdlets,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2021-04-01T14:59:10.707",
      "ProjectType": "GenericProject",
      "ScriptFile": "[57064] Edit-Cmdlet.ps1"
    },
    {
      "ProjectId": 16825,
      "ProjectName": "Showing-console-color-6c9e4813",
      "Title": "Showing console color combinations for foreground and background",
      "Description": "This script goes through all the enumerations of the type [System.ConsoleColor] and displays them on the screen.\r\nÂ The combination of both foreground and background colors are displayed.\r\nÂ * You may want to change the function name from Show-Colour to Show-Color depending on your",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-05-18T14:00:36.14",
      "IsPublished": true,
      "PublishedDate": "2012-05-18T14:12:58.92",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Showing-console-color-6c9e4813",
      "TagList": "enumerate,fun,ConsoleColor,System.ConsoleColor,Enum,emumerate colors,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-05-18T14:33:33.187",
      "ProjectType": "GenericProject",
      "ScriptFile": "[57615] Show-Colour.ps1"
    },
    {
      "ProjectId": 18144,
      "ProjectName": "Add-a-script-Function-to-a-089f28be",
      "Title": "Add a (script) Function to a personal Module",
      "Description": "This function easily adds a Function that you have written to a pesonal Module.This is for PowerShellÂ Advanced Functions.This function is designed to run from the ISE.The currently open ISE tab will be saved.The Function Name will be used as the name of the FileÂ (That will be dot",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-08-05T14:40:14.017",
      "IsPublished": true,
      "PublishedDate": "2012-08-05T14:40:14.97",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Add-a-script-Function-to-a-089f28be",
      "TagList": "Module,PowerShell Modules,Advanced Functions,PowerShell Function,Script Functions,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-08-05T17:37:21.56",
      "ProjectType": "GenericProject",
      "ScriptFile": "[63044] Add-FunctionToModule.ps1"
    },
    {
      "ProjectId": 18285,
      "ProjectName": "Find-the-number-of-open-2ed8aa35",
      "Title": "Find the number of open connections to Shares on local or remote systems",
      "Description": "Most likely you have looked in the Computer Management to find the number of connections to any particular share on a remote system.In the compmgmt.msc GUI it looks like this:Â If you wanted to query a whole list of servers opening up the GUI can take time, so why not use PowerShe",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-08-15T16:52:51.093",
      "IsPublished": true,
      "PublishedDate": "2012-08-15T16:52:52.063",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-the-number-of-open-2ed8aa35",
      "TagList": "shares,Win32_ConnectionShare,Share Connections,File Share,Number of open connections to Shares,Community,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-08-15T21:23:21.627",
      "ProjectType": "GenericProject",
      "ScriptFile": "[64766] Get-ShareConnection.ps1"
    },
    {
      "ProjectId": 18286,
      "ProjectName": "Get-Share-Information-5cc71b2c",
      "Title": "Get Share Information similar to Win32_Share and adds the current connections",
      "Description": "This queries Win32_Share and provides the results.However it also checks the number of active connections on each share and returns the number as well.For just the basic connection information you can use the simple form of this script:http://gallery.technet.microsoft.com/scriptc",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-08-15T21:19:56.123",
      "IsPublished": true,
      "PublishedDate": "2012-08-15T21:19:57.077",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-Share-Information-5cc71b2c",
      "TagList": "Win32_Share,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-08-15T21:25:47.41",
      "ProjectType": "GenericProject",
      "ScriptFile": "[64774] Get-ShareInfo.ps1"
    },
    {
      "ProjectId": 18616,
      "ProjectName": "Report-on-the-Event-Logs-a94f27a0",
      "Title": "Report on the Event Logs for MaxConcurrentAPI NTLM Semaphore Warnings",
      "Description": "New event log entries that track NTLM authentication delays and failures in Windows Server 2008 R2 are available.http://support.microsoft.com/kb/2654097Â Consider the following scenario:\r\nYou have one or more forests that have multiple domains. There are combinations of users and ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-09-06T17:53:04.643",
      "IsPublished": true,
      "PublishedDate": "2012-09-06T17:53:05.627",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2012-09-07T08:39:11.61",
      "InitialProjectName": "Report-on-the-Event-Logs-a94f27a0",
      "TagList": "NTLM,Semaphore Timeouts,Authentication Delays,NetLogon,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-09-07T09:05:26.437",
      "ProjectType": "GenericProject",
      "ScriptFile": "[65811] Get-MAXConcurrentAPIReport.ps1"
    },
    {
      "ProjectId": 18627,
      "ProjectName": "Update-a-local-File-326e0623",
      "Title": "Update (single level) local File Repository with the latest Files from a Server",
      "Description": "This script will check a Source Directory for the latest Version of Files in the Directory,it will then copy any files to a Destination Directory whereÂ the files are New OR Updated. This was designed to get the latest project files from a single level directory. It does not recur",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-09-07T11:01:28.987",
      "IsPublished": true,
      "PublishedDate": "2012-09-07T11:01:30.063",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Update-a-local-File-326e0623",
      "TagList": "backup files,directory synchronization,Copy File Repository,Sync from a file server,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-09-09T12:43:11.633",
      "ProjectType": "GenericProject",
      "ScriptFile": "[65841] Update-FileRepository.ps1"
    },
    {
      "ProjectId": 18723,
      "ProjectName": "Get-VMware-Host-Information-d2aa08ee",
      "Title": "Get VMware Host Information Summary Report",
      "Description": "Use PowerCLI to get a quick summary of your VMware Host Information.Â You will need to have the Send-HTMLEmail script loaded as well since this is called during the execution.Â download that here: http://gallery.technet.microsoft.com/scriptcenter/bd0c8d87-466f-4488-92a2-0f726cb6f4c",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-09-14T21:56:25.293",
      "IsPublished": true,
      "PublishedDate": "2012-09-14T21:56:26.153",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-VMware-Host-Information-d2aa08ee",
      "TagList": "VMware,VMware host report,Host Summary,Audit basic host configurations,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-09-14T21:56:25.497",
      "ProjectType": "GenericProject",
      "ScriptFile": "[66227] Get-VMHostInfoSummary.ps1"
    },
    {
      "ProjectId": 18884,
      "ProjectName": "Show-Desktop-0541c1e6",
      "Title": "Show-Desktop",
      "Description": " Run Show-Desktop to minimize all windows. Run Show-Desktop to show the desktop. Run programatically to jump to the desktop. .............................................................. .............................................................. .............................",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-09-27T18:24:50.593",
      "IsPublished": true,
      "PublishedDate": "2012-09-27T18:24:52.247",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Show-Desktop-0541c1e6",
      "TagList": "Show-Desktop,ToggleDesktop,Minimize,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.5,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-09-27T18:25:39.293",
      "ProjectType": "GenericProject",
      "ScriptFile": "[67319] Show-Desktop.ps1"
    },
    {
      "ProjectId": 18927,
      "ProjectName": "Keep-Alive-Simulates-a-key-9b05f980",
      "Title": "Keep Alive. Simulates a key press on the keyboard at a specfied interval",
      "Description": "This function can be used to simulate a key press on the keyboard. \r\n\r\nIt would be useful for two main purposes:\r\n\r\n1) while you are giving a presentation from your computer.\r\n2) while you are downloading something that is long running and you are in a secure location.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-10-01T08:11:59.103",
      "IsPublished": true,
      "PublishedDate": "2012-10-01T08:12:00.29",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Keep-Alive-Simulates-a-key-9b05f980",
      "TagList": "Keep Alive,KeepAlive,Homers Drinking Bird,Keyboard press,Key press,Automate keystroke,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.4,
      "RatingsCount": 25,
      "AverageRating7Days": 4.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2016-02-29T15:22:23.073",
      "ProjectType": "GenericProject",
      "ScriptFile": "[67438] Start-KeepAlive.ps1"
    },
    {
      "ProjectId": 18996,
      "ProjectName": "Auditing-Directory-Service-53574749",
      "Title": "Auditing Directory Service Access - AD DS change auditing - Monitoring Event Log",
      "Description": "Implementing ADÂ DS change auditing\r\n\r\nIn Windows ServerÂ 2008, you implement the new auditing feature by using the following controls:\r\n\r\nGlobal audit policy \r\n\r\nSystem access control list (SACL) \r\nOnce you have this setup, you need some tools to monitor and capture the event logs",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-10-05T21:03:22.75",
      "IsPublished": true,
      "PublishedDate": "2012-10-05T21:03:49.273",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Auditing-Directory-Service-53574749",
      "TagList": "SACL,Access Audit,kb921469,AD DS Auditing,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 3,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-10-06T15:58:33.927",
      "ProjectType": "GenericProject",
      "ScriptFile": "[67649] Get-ADAuditAccess.ps1"
    },
    {
      "ProjectId": 19005,
      "ProjectName": "Set-the-PowerShell-Console-bd8b2ad1",
      "Title": "Set the PowerShell Console Host Window to the Maximum Size",
      "Description": "This script adjusts the PowerShell Console Host Window to the Maximum Size.If you change the Font in the Window then re-run this funtion to resize the Window accordingly.If you move this to a second screen rerun the function to resize accordingly.I have seen an error with some fo",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-10-06T12:35:38.213",
      "IsPublished": true,
      "PublishedDate": "2012-10-06T12:35:38.98",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Set-the-PowerShell-Console-bd8b2ad1",
      "TagList": "Resize Window,Maximize Window Size,Maximize Console Host Window Size,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-10-06T20:15:22.227",
      "ProjectType": "GenericProject",
      "ScriptFile": "[67677] Set-MaxWindowSize.ps1"
    },
    {
      "ProjectId": 19437,
      "ProjectName": "Find-System-Hardware-b68938c8",
      "Title": "Find System Hardware Information Summary",
      "Description": "This Script uses WMI to collect a range of computer related information. It uses features that are only compatible with powerShell Version 3.0 Use like: Get-SystemInfo Or Get-SystemInfo -ComputerName Server123,Server124 -LogDir C:\\mylogs -Credential (Get-Credential)              ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-11-08T00:54:47.127",
      "IsPublished": true,
      "PublishedDate": "2012-11-08T01:01:00.27",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-System-Hardware-b68938c8",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.166666666666667,
      "RatingsCount": 6,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-11-10T19:41:18.747",
      "ProjectType": "GenericProject",
      "ScriptFile": "[70317] Get-SystemInfo.ps1"
    },
    {
      "ProjectId": 19872,
      "ProjectName": "List-Domain-Controllers-in-2bec62a5",
      "Title": "List Domain Controllers in the Current Domain or Forest",
      "Description": "This script uses [system.directoryservices.activedirectory.Forest] and [system.directoryservices.activedirectory.domain] to search the forest or domainÂ to reportÂ domain controller names.The default is to return domain controllers from the current Domain.You can also specify a sea",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-12-07T08:21:31.38",
      "IsPublished": true,
      "PublishedDate": "2012-12-07T08:21:32.427",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "List-Domain-Controllers-in-2bec62a5",
      "TagList": "Active Directory,Domain Controller,forest,system.directoryservices.activedirectory.Forest,system.directoryservices.activedirectory.Domain,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.666666666666667,
      "RatingsCount": 6,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2014-07-19T11:39:11.67",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120359] Get-DomainController.ps1"
    },
    {
      "ProjectId": 19881,
      "ProjectName": "Find-the-alias-parameter-7c282bdd",
      "Title": "Find the alias parameter names on cmdlets: Get-CmdletParameterAlias",
      "Description": "Many parameters on cmdlets are hidden.These are the alias parameters that can be used as shortcuts for the full parameter names.These are especially useful for working in the console.#----------------------------------------PS PS:\\> Get-CmdletParameterAlias -Cmdlet Get-ChildItemC",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-12-08T18:16:29.36",
      "IsPublished": true,
      "PublishedDate": "2012-12-08T18:16:30.703",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-the-alias-parameter-7c282bdd",
      "TagList": "alias parameters,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-05-02T20:22:03.57",
      "ProjectType": "GenericProject",
      "ScriptFile": "[72241] Get-CmdletParameterAlias.ps1"
    },
    {
      "ProjectId": 19962,
      "ProjectName": "Saving-Credentials-As-8ea44827",
      "Title": "Saving Credentials (As Secure a String) for using within Scripts",
      "Description": "This script saves and calls the credentials for use later on. This is useful when performing queries against several domains in your environment.The most common usage for these would be in WMI queries or other PowerShell cmdlets that support the -Credential parameter.E.g. Run thi",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2012-12-15T16:16:02.92",
      "IsPublished": true,
      "PublishedDate": "2012-12-15T16:17:28.16",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Saving-Credentials-As-8ea44827",
      "TagList": "credentials,Passwords,secure string,Save Credentials,System.Management.Automation.PsCredential,ConvertFrom-SecureString,ConvertTo-SecureString,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2012-12-15T16:17:18.467",
      "ProjectType": "GenericProject",
      "ScriptFile": "[72654] Receive-Credential.ps1"
    },
    {
      "ProjectId": 20334,
      "ProjectName": "Retrieve-the-LastUseTime-dbd2999b",
      "Title": "Retrieve the LastUseTime of the user profiles on system/s",
      "Description": "This script will retrieve the LastUseTime of the user profile.This information can be useful to determine logon statistics and general use patterns on systems.The information is collected via WMI ( Win32_UserProfile )Â and this class only works on Vista Sp1 and Server 2008 and lat",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-01-08T09:21:32.133",
      "IsPublished": true,
      "PublishedDate": "2013-01-08T09:30:15.623",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Retrieve-the-LastUseTime-dbd2999b",
      "TagList": "lastLogon,Win32_UserProfile,User Profile Information,Community,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-03-09T11:04:57.64",
      "ProjectType": "GenericProject",
      "ScriptFile": "[74311] Get-UserLastLogin.ps1"
    },
    {
      "ProjectId": 20425,
      "ProjectName": "Get-Uptime-Report-on-the-f3ad4315",
      "Title": "Get-Uptime Report - The time since reboot",
      "Description": "Report on the time since systems were rebooted using WMIReport to screen as -TextReport as PSObject is summary format or report as PSObject, useful for exporting to CSV.Usage:Get-Uptime -ComputerName localhost -Text\"localhost\" | Get-Uptime -TextGet-Uptime -ComputerName localhost ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-01-15T21:19:11.15",
      "IsPublished": true,
      "PublishedDate": "2013-01-15T21:19:37.493",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-Uptime-Report-on-the-f3ad4315",
      "TagList": "Uptime,Server Uptime,Get-Uptime,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.5,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-01-15T21:23:35.28",
      "ProjectType": "GenericProject",
      "ScriptFile": "[74668] Get-Uptime.ps1"
    },
    {
      "ProjectId": 20698,
      "ProjectName": "Find-the-logged-on-users-1161bd92",
      "Title": "Find the logged on users on a remote system/s version 2",
      "Description": "This script should be useful for Helpdesk or other IT Admins to query remote machines to see who is logged on\r\n\r\nThis script will let you know who is running any Explorer.exe process on local/remote systems\r\n\r\nThis could also be useful for Remote Desktop Services or Ctx Admins",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-02-05T10:56:03.23",
      "IsPublished": true,
      "PublishedDate": "2013-02-05T10:56:04.34",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-the-logged-on-users-1161bd92",
      "TagList": "Current User,explorer,User sessions,Logged on User,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-06-10T14:21:58.14",
      "ProjectType": "GenericProject",
      "ScriptFile": "[75584] Get-LoggedOnUser.ps1"
    },
    {
      "ProjectId": 20751,
      "ProjectName": "Copy-Files-Script-To-allow-45e0046b",
      "Title": "Copy Files Script - To allow for default Robocopy options to be saved.",
      "Description": "There are a lot of options when using Robycopy.This script helps to save your personal best options, so that you don't have to remember them each time you call Robocopy.The thing thatÂ i like about Robycopy is that you can restart a failed copy if there is an interruption & you ca",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-02-09T22:49:45.313",
      "IsPublished": true,
      "PublishedDate": "2013-02-09T22:50:09.26",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Copy-Files-Script-To-allow-45e0046b",
      "TagList": "copy,copy files,Robycopy,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2013-10-04T08:16:40.49",
      "ProjectType": "GenericProject",
      "ScriptFile": "[75874] Start-MyRoboCopy.ps1"
    },
    {
      "ProjectId": 20904,
      "ProjectName": "Get-Enum-Value-Find-af496033",
      "Title": "Get Enum Value. Find Enumeration Values for a given Type (updated Dec 2013)",
      "Description": "This script will display the enumeration values for a given Type\r\nE.g.\r\nGet-EnumValue -type System.Management.Automation.ActionPreferenceName\r\nGet-EnumValue -type System.ServiceProcess.ServiceControllerStatus\r\nGet-EnumValue -type Microsoft.PowerShell.ExecutionPolicy",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-02-20T08:29:57.85",
      "IsPublished": true,
      "PublishedDate": "2013-02-20T08:29:58.647",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-Enum-Value-Find-af496033",
      "TagList": "Enumeration,Enum,Data Types,Enum GetNames,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.5,
      "RatingsCount": 2,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-12-03T21:10:36.597",
      "ProjectType": "GenericProject",
      "ScriptFile": "[103999] Get-EnumValue.ps1"
    },
    {
      "ProjectId": 21412,
      "ProjectName": "WMI-Explorer-Search-WMI-cd87e309",
      "Title": "WMI Explorer Search WMI NameSpaces",
      "Description": "This script allows users to search for Classes in all of the available Namespaces on a specified Computer/s.The Script will easily recurse through the available NameSpaces and pull out classes that match the filter.There are parameters to also search for classes with particular M",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-03-24T18:41:53.763",
      "IsPublished": true,
      "PublishedDate": "2013-03-24T18:41:54.53",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "WMI-Explorer-Search-WMI-cd87e309",
      "TagList": "Get-WMIObject,WMI Explorer,GWMI,Windows Management Instrumentation,-List,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-03-24T18:41:53.937",
      "ProjectType": "GenericProject",
      "ScriptFile": "[78903] Search-WMINameSpace.ps1"
    },
    {
      "ProjectId": 21413,
      "ProjectName": "Set-Custom-Permissions-on-69af151c",
      "Title": "Set Custom Permissions on AD Containers (updated May 2014)",
      "Description": "* This script was updated in May 2014 to work against Organizational Units or Containers.i.e. this can nowÂ be used to change the permission on the default Computers Container.This script leverages the ActiveDirectory Module to setup Specific custom delegated Permissions on an Act",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-03-24T18:51:16.367",
      "IsPublished": true,
      "PublishedDate": "2013-03-24T18:51:16.96",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2014-05-04T16:30:31.39",
      "InitialProjectName": "Set-Custom-Permissions-on-69af151c",
      "TagList": "Delegated OU Permissions,Create Computer Accounts,Remove Computer Accounts,System.DirectoryServices.ActiveDirectoryAccessRule,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 3.5,
      "RatingsCount": 2,
      "AverageRating7Days": 2.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2014-05-04T17:03:26.95",
      "ProjectType": "GenericProject",
      "ScriptFile": "[113995] Set-CustomADOUPermissions.ps1"
    },
    {
      "ProjectId": 21889,
      "ProjectName": "Generate-a-Proxy-Function-ab16b44e",
      "Title": "Generate a Proxy Function and Open in the ISE",
      "Description": "Generating a Proxy function is relatively simple.\r\n\r\nThis script makes the whole process even easier.\r\n\r\nThe file can be generated in a TMP directory and then opened up for editing in the ISE.\r\n\r\nProxy functions are useful to create custom functionality\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-04-27T13:56:04.813",
      "IsPublished": true,
      "PublishedDate": "2013-04-27T13:56:05.547",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Generate-a-Proxy-Function-ab16b44e",
      "TagList": "Proxy Function,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-04-27T13:56:04.983",
      "ProjectType": "GenericProject",
      "ScriptFile": "[81345] Publish-ProxyFunction.ps1"
    },
    {
      "ProjectId": 24429,
      "ProjectName": "EnableDisable-DFS-17f3f73b",
      "Title": "Enable/Disable DFS Replication AutoRecovery",
      "Description": "If you use DFSR for replication of files in your domain, then you maybe aware that the default settings for Autorecovery are now optionally changed if you install a patch on Server 2008 R2 OR on 2012 by default.One of the previous reasons to migrate from FRS to DFSR was that DFSR",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-08-18T20:40:18.377",
      "IsPublished": false,
      "PublishedDate": "2013-08-18T20:40:19.483",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2013-08-18T20:42:38.983",
      "InitialProjectName": "EnableDisable-DFS-17f3f73b",
      "TagList": "DFSR,StopReplicationOnAutoRecovery,2663685,kb2663685,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-08-18T20:43:00.87",
      "ProjectType": "GenericProject",
      "ScriptFile": "[94634] Set-DFSRAutoRecovery.ps1"
    },
    {
      "ProjectId": 25286,
      "ProjectName": "Perform-a-Measure-Command-de314de6",
      "Title": "Perform a Measure-Command analysis N Iterations",
      "Description": "\r\n\r\n\r\n\r\n\r\nÂ \r\n\r\n#Requires -Version 3 (since I usedÂ [pscustomobject])Â \r\n\r\n\r\n\r\nThis script will allow you to use Measure-Command over a certain amount of iterations.\r\nEach time you run Measure-Command you get a different result based on the system/network/environment resources.\r\nThi",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-10-11T10:24:09.19",
      "IsPublished": true,
      "PublishedDate": "2013-10-11T10:24:44.35",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Perform-a-Measure-Command-de314de6",
      "TagList": "Performance,Measure-Command,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-11-04T08:32:09.023",
      "ProjectType": "GenericProject",
      "ScriptFile": "[97778] Measure-MyCommand.ps1"
    },
    {
      "ProjectId": 25833,
      "ProjectName": "Retrieve-a-Password-from-a-a3cd7d68",
      "Title": "Retrieve a Password from a SecureString, Credential or String",
      "Description": "Â This script will Retrieve a password from a Credential object, SecureString object or from a String that has been created using the Convertfrom-SecureString Cmdlet.\r\n\r\nThis script uses parametersets and data types to determine how the script will evaluate the parameters.******\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-11-01T10:02:01.69",
      "IsPublished": true,
      "PublishedDate": "2013-11-01T10:02:36.493",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Retrieve-a-Password-from-a-a3cd7d68",
      "TagList": "securestring,convertto-securestring,PSCredential,GetNetworkCredential,ParameterSetName,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-11-01T11:35:19.707",
      "ProjectType": "GenericProject",
      "ScriptFile": "[100579] Get-Password.ps1"
    },
    {
      "ProjectId": 26262,
      "ProjectName": "Compare-two-lists-directly-0a326603",
      "Title": "Compare two lists directly in the Windows PowerShell ISE",
      "Description": "\r\n\r\nÂ \r\nIÂ often want to compare two lists.Such as if I have list A and list B, I know to know the differences and similaritiesThis script allows me to do the comparison, by simply pasting the two lists into the ISE in a blank and even unsaved script.Such as just paste the followin",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2013-12-03T20:54:51.707",
      "IsPublished": true,
      "PublishedDate": "2013-12-03T20:55:26.953",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Compare-two-lists-directly-0a326603",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2013-12-03T20:54:52.127",
      "ProjectType": "GenericProject",
      "ScriptFile": "[103996] Compare-ISEList.ps1"
    },
    {
      "ProjectId": 27469,
      "ProjectName": "Deploy-Hyper-V-Virtual-567b2736",
      "Title": "Deploy Hyper-V Virtual Machine (VM)",
      "Description": " <#\r\n.Synopsis\r\n   Build a new VM running on a Hyper-V Server\r\n.DESCRIPTION\r\n   Build a new VM running on a Hyper-V Server, insert boot disk to deploy from MDT\r\n.EXAMPLE\r\n    PS PS:\\> New-VMBuild -VM DSCWeb\r\n\r\n    Name   State   CPUUsage(%) MemoryAssigned(M) Uptime   Status      ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-02-28T13:18:56.7",
      "IsPublished": true,
      "PublishedDate": "2014-02-28T13:48:11.07",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Deploy-Hyper-V-Virtual-567b2736",
      "TagList": "VM,Virtual Machine,Deploy,Deploy VM,Build Hyper-V VM,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-03-05T17:56:47.993",
      "ProjectType": "GenericProject",
      "ScriptFile": "[110122] New-VMBuild.ps1"
    },
    {
      "ProjectId": 27938,
      "ProjectName": "Restart-Computer-with-707ae728",
      "Title": "Restart-Computer with BitLocker Drive Encryption",
      "Description": "Â <#Â Â .SynopsisReboot a machine with BitLocker enabled, Disable Bitlocker first.DESCRIPTIONAllow you to reboot machine remotely with Bitlocker enabled, since this function disables it prior to rebooting.Bitlocker will be enabled after the reboot, however you will not be required t",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-04-01T22:27:58.77",
      "IsPublished": true,
      "PublishedDate": "2014-04-01T22:48:43.88",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Restart-Computer-with-707ae728",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-04-01T22:48:40.303",
      "ProjectType": "GenericProject",
      "ScriptFile": "[111557] Restart-ComputerWithBitLocker.ps1"
    },
    {
      "ProjectId": 29949,
      "ProjectName": "Find-the-Bad-Password-c207d807",
      "Title": "Find the Bad Password Information on Individual Domain Controllers",
      "Description": "Search all Domain Controllers for the Bad Password Times, this setting is not replicated between DC's.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-07-19T10:25:41.763",
      "IsPublished": true,
      "PublishedDate": "2014-07-19T13:11:53.33",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-the-Bad-Password-c207d807",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 1.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2014-09-05T08:50:22.497",
      "ProjectType": "GenericProject",
      "ScriptFile": "[120356] Get-BadPasswordInfo.ps1"
    },
    {
      "ProjectId": 30172,
      "ProjectName": "Discover-your-WAN-IP-2d7b70e1",
      "Title": "Discover your WAN IP Address from BING",
      "Description": "This script uses BING to determine your WAN IP Address * I recently updated the link to use https, however https works as well.BING also has some API's however by just doing a standard web search there are no prerequisite keysÂ  required and also no limit on the queries that you c",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-08-01T18:49:43.89",
      "IsPublished": false,
      "PublishedDate": "2014-08-01T18:50:00.033",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2019-11-26T20:34:00.53",
      "InitialProjectName": "Discover-your-WAN-IP-2d7b70e1",
      "TagList": "Public IP Address,Wide Area Network IP Address,WAN IP,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-11-26T20:34:00.53",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148961] Get-WANIPAddress.ps1"
    },
    {
      "ProjectId": 30219,
      "ProjectName": "Start-RDP-MSTSC-in-a-74367a0d",
      "Title": "Start RDP (MSTSC) in a scaled window (Updated March 2016)",
      "Description": "Start-RDP Creates a scaled RDP window in the exact dimension as the PowerShell window.I nearly always use this when my PowerShell window is full size, you may prefer to runs this from the ISE, since that is easier to scale.Notice how the windows below both match.N.B. credit goes ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-08-05T16:22:28.783",
      "IsPublished": true,
      "PublishedDate": "2014-08-05T16:25:50.197",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Start-RDP-MSTSC-in-a-74367a0d",
      "TagList": "RDP,mstsc,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-04-12T09:45:49.763",
      "ProjectType": "GenericProject",
      "ScriptFile": "[149472] Start-Rdp.ps1"
    },
    {
      "ProjectId": 30523,
      "ProjectName": "Update-Azure-2-VPN-Remote-765c12f2",
      "Title": "Update Azure Site 2 Site VPN Remote IP Address",
      "Description": "Update Azure Site 2 Site VPN Remote IP AddressThis Script will Download the current Virtual Network Configuration from Azure.(You must first have connected to your Azure Subscription).Then it will look up your current Gateway IP Address and detect if there has been any change com",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2014-08-23T20:20:40.857",
      "IsPublished": true,
      "PublishedDate": "2014-08-23T20:24:39.037",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Update-Azure-2-VPN-Remote-765c12f2",
      "TagList": "Azure,Microsoft Azure,azure s2s,Site to Site VPN,Virtual Network,Azure Service Manager,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2017-02-27T08:42:14.697",
      "ProjectType": "GenericProject",
      "ScriptFile": "[124425] Update-AzureS2SVPNEndpoint.ps1"
    },
    {
      "ProjectId": 311872,
      "ProjectName": "Deploy-a-new-Virtual-f42812ac",
      "Title": "Deploy a new Virtual Machine (VM) in Hyper-V",
      "Description": "This script deploys a new Virtual Machine into Hyper-V, with support for Virtual Machine manager.I have 3 Hyper-V hosts and I use MDT to deploy the Operating System along with PXE boot and WDS.I use custom powershell functions to setup the reservation in WDS, configure the machin",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-09T10:52:46.78",
      "IsPublished": true,
      "PublishedDate": "2016-02-09T12:16:51.743",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Deploy-a-new-Virtual-f42812ac",
      "TagList": "Hyper-V,Deployment,Operating System Deployment,WDS,MDT,Virtual Machine Manager,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-09T13:07:55.963",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148350] New-VMBuild.ps1"
    },
    {
      "ProjectId": 311873,
      "ProjectName": "Deploy-a-new-Virtual-8b524c26",
      "Title": "Deploy a new Virtual Machine (VM) in Azure (Service Manager)",
      "Description": "This script uses the Azure Service Management API to deploy a Virtual Machine.This script presumes that you have the Azure module installed.This script presumes that you are connected to your subscription and have set your storage account.This script presumes that you have alread",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-09T10:57:28.74",
      "IsPublished": true,
      "PublishedDate": "2016-02-09T12:17:18.307",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Deploy-a-new-Virtual-8b524c26",
      "TagList": "Microsoft Azure Virtual Machines,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-09T11:17:25.18",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148351] New-VMBuildAzure.ps1"
    },
    {
      "ProjectId": 311874,
      "ProjectName": "Deploy-a-new-Virtual-75cd3230",
      "Title": "Deploy a new Virtual Machine (VM) in Azure (Resource Manager) (updated 08/2017)",
      "Description": "Simple and Easy way to deploy Azure VM's using Resource Manager APIScript has now been updated to include Managed DisksÂ Â \r\nThis isÂ a demo script for deploying Azure Virtual Machines using the Resource Manager (RM)Â API.There areÂ other ways (Link below to AzureRM template deploymen",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-09T11:09:23.853",
      "IsPublished": true,
      "PublishedDate": "2016-02-09T12:13:24.333",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Deploy-a-new-Virtual-75cd3230",
      "TagList": "VM,IaaS,Virtual Machines,Microsoft Azure Virtual Machines,Azure IaaS,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2017-08-30T10:00:35.697",
      "ProjectType": "GenericProject",
      "ScriptFile": "[178627] New-VMBuildAzureRM2.ps1"
    },
    {
      "ProjectId": 311876,
      "ProjectName": "Create-a-new-MDT-1db3e2c0",
      "Title": "Create a new MDT Reservation in MDT Database",
      "Description": "ThisÂ New-MDTReservationÂ script/function allows for zero or light touch deployments with MDT and MDT DatabaseYou will need to configure a few things in MDT first for this to work, however this is part of an Automated Build process.MDT allows you to set up the computername, the ass",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-09T12:28:49.587",
      "IsPublished": true,
      "PublishedDate": "2016-02-09T12:28:50.397",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Create-a-new-MDT-1db3e2c0",
      "TagList": "Deployment,Operating System Deployment,MDT,MDT Database,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-10T08:54:07.67",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148354] New-MDTReservation.ps1"
    },
    {
      "ProjectId": 311877,
      "ProjectName": "Create-a-new-WDS-6109944f",
      "Title": "Create a new WDS reservation on the WDS server for PXE",
      "Description": "This script is used during automated computer deployment.This works with WDS to allow a machine to boot from PXE.I upload the Boot image that is output from MDT to the WDS server to accomplish this task.This then allows for a Mac Address to be set on the WDS server so that it can",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-09T12:53:49.38",
      "IsPublished": true,
      "PublishedDate": "2016-02-09T12:53:49.957",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Create-a-new-WDS-6109944f",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-10T08:53:25.56",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148355] Set-WDSPXEReservation.ps1"
    },
    {
      "ProjectId": 312058,
      "ProjectName": "Get-a-Formatted-list-from-b40e8272",
      "Title": "Get a Formatted list from a To or CC field.",
      "Description": "Do you ever need to get a list of names and emails from a list that someone sent you in the to or CC field.In Outlook they always have the similar format.This script strips out the unwanted parts and gives you a nice table to copy and paste and also just grab the email addresses.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-22T17:25:50.297",
      "IsPublished": true,
      "PublishedDate": "2016-02-22T17:25:51.093",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-a-Formatted-list-from-b40e8272",
      "TagList": "Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-22T17:25:50.563",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148833] Get-EmailContact.ps1"
    },
    {
      "ProjectId": 312107,
      "ProjectName": "Deploy-or-Rebuild-Hyper-V-78c73732",
      "Title": "Deploy or Rebuild Hyper-V Virtual Switches and Ethernet",
      "Description": "I use this script to rebuild my Hyper-V Lab Network (vSwitches) after a rebuild or upgrade.Since I find that most of the time upgrading versions of Windows 10 it caused problems a significant amount of the time for Hyper-V Networks.I used to use RRAS for my lab setups, however no",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-02-25T08:52:17.57",
      "IsPublished": true,
      "PublishedDate": "2016-02-25T08:52:18.57",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Deploy-or-Rebuild-Hyper-V-78c73732",
      "TagList": "lab,Virtual Networks,NAT,RRAS,Hyper-V Virtual Ethernet Adapters,Hyper-V v-Switch,NetNat,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-02-25T08:55:07.373",
      "ProjectType": "GenericProject",
      "ScriptFile": "[148938] Set-VMSwitchNetwork.ps1"
    },
    {
      "ProjectId": 312232,
      "ProjectName": "Update-Azure-S2S-vpn-7127f27b",
      "Title": "Update Azure S2S vpn secret RRAS",
      "Description": "This script will find the Site to Site VPN secret and then update it in RRAS.If you subscription expires or you use up too much credit then you need to recreate the Gateway and VPN, so you also need to update the secret.This script might also be useful along side the Update-Azure",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-03-04T20:40:37.277",
      "IsPublished": true,
      "PublishedDate": "2016-03-04T20:40:38.23",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Update-Azure-S2S-vpn-7127f27b",
      "TagList": "RRAS,azure virtual network,Site to Site VPN,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2016-03-04T20:41:18.547",
      "ProjectType": "GenericProject",
      "ScriptFile": "[149253] Update-AzureS2SVPNSecret.ps1"
    },
    {
      "ProjectId": 314966,
      "ProjectName": "Get-WSMANSession-list-6f447d56",
      "Title": "Get-WSMANSession list WSMAN session (updated 2017/03)",
      "Description": "List out the WSMAN sessions on a local or remote machine.\r\n\r\nThis script write a file to temp in order to setup the format file for the output format.\r\n\r\n* Updated to work against PowerShell v2.0",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-10-07T12:07:00.773",
      "IsPublished": true,
      "PublishedDate": "2016-10-07T12:07:01.927",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Get-WSMANSession-list-6f447d56",
      "TagList": "WSMan,PowerShell Remoting,pssessions,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2017-03-22T09:45:56.31",
      "ProjectType": "GenericProject",
      "ScriptFile": "[171281] Get-WSMANSession.ps1"
    },
    {
      "ProjectId": 316072,
      "ProjectName": "Query-the-Local-Security-357c5b65",
      "Title": "Query the Local Security Rights",
      "Description": "This script queries the local security rights using PowerShell.\r\n*Privilege names are **case-sensitive**.* Valid privileges are documented on Microsoft's website:\r\n[Privilege Constants]Â Â Â Â Â Â  Â ( \r\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/bb530716.aspx )\r\n[Account R",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2016-10-17T14:51:16.297",
      "IsPublished": true,
      "PublishedDate": "2016-10-17T14:51:17.533",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Query-the-Local-Security-357c5b65",
      "TagList": "LocalRights,Privilege Constants,Account Rights Constants,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 2,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2016-10-17T19:41:56.49",
      "ProjectType": "GenericProject",
      "ScriptFile": "[162158] Get-LocalRight.ps1"
    },
    {
      "ProjectId": 318777,
      "ProjectName": "Build-an-RDCMan-Remote-406ad27d",
      "Title": "Build an RDCMan (Remote Desktop Connection Manager) from Azure ResourceGroup VMs",
      "Description": "This is an update on the earlier version of this script.This will find all VM's in Azure in a particular Resource Group that have Public IP's and add them to an RDCMan file.This groups the VM's based on the availability set they are in.Usage:Add-RDCManConfigAzure -ResourceGroupNa",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-03-29T13:21:37.5",
      "IsPublished": true,
      "PublishedDate": "2017-03-29T13:21:38.077",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Build-an-RDCMan-Remote-406ad27d",
      "TagList": "Azure,RDCMan,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2017-03-29T14:42:28.817",
      "ProjectType": "GenericProject",
      "ScriptFile": "[171613] Add-RDCManConfigAzure.ps1"
    },
    {
      "ProjectId": 319780,
      "ProjectName": "Correct-permissions-on-2fa46daa",
      "Title": "Correct permissions on Crypto\\RSA\\MachineKeys for Cluster Join",
      "Description": "See documentation and information below:\r\n\r\nÂ If you cannot join a secondary node to a Cluster, a common reason is the permissions on the MachineKeys directory used for RSA.You can use this script to correct the permissions- This uses the NTFSSecurity Module to apply the settings.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-06-08T10:25:56.22",
      "IsPublished": false,
      "PublishedDate": "2017-06-08T10:27:35.923",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2018-11-02T17:00:33.51",
      "InitialProjectName": "Correct-permissions-on-2fa46daa",
      "TagList": "Clusters,Crypto,failover clustering,RSA,MachineKeys,SQL Always On,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-11-02T17:00:33.51",
      "ProjectType": "GenericProject",
      "ScriptFile": "[179158] Set-MachineKeysClusterJoin.ps1"
    },
    {
      "ProjectId": 320217,
      "ProjectName": "Test-if-a-domain-user-67e84796",
      "Title": "Test if a domain user Credential / Password is correct",
      "Description": "This is a script to test if a Password is correct.Often this is useful for service accounts or if you are just not sure if you are typing in your password correctly.Why can't I log in? At least confirm it's not related to having a bad password.The script will return True if the p",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-07-07T10:53:41.703",
      "IsPublished": true,
      "PublishedDate": "2017-07-07T10:56:39.927",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Test-if-a-domain-user-67e84796",
      "TagList": "Credential,password,PrincipalContext,AccountManagement,DirectoryServices.AccountManagement,AccountManagement.PrincipalContext,ValidateCredentials,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-09-06T14:39:54.783",
      "ProjectType": "GenericProject",
      "ScriptFile": "[175377] Test-UserCredential.ps1"
    },
    {
      "ProjectId": 321273,
      "ProjectName": "Delete-Azure-RM-Virtual-fc09d944",
      "Title": "Delete Azure RM Virtual Machine-NIC-Disks (Updated June 2019)",
      "Description": "This script will delete an Azure Resource manager Virtual Machine.\r\nIt will also delete the associated Network Interface Card (NIC).\r\nIt will also remote both STANDARD and MANAGED Disks.\r\nIncluding both the OS Disk and the DATA Disks.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-08-29T16:55:31.833",
      "IsPublished": true,
      "PublishedDate": "2017-08-29T16:56:34.87",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Delete-Azure-RM-Virtual-fc09d944",
      "TagList": "VM,Virtual Machine,Azure Virtual Machines,Azure Managed Disks,Delete VM,Delete NIC,Delete Disks,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-06-20T17:13:00.513",
      "ProjectType": "GenericProject",
      "ScriptFile": "[222483] Remove-AzureRMVMInstanceResource.ps1"
    },
    {
      "ProjectId": 323473,
      "ProjectName": "Parallel-Delete-Azure-RM-84dadec9",
      "Title": "Parallel Delete Azure RM Virtual Machine-NIC-Disks (Updated Sept 2019)",
      "Description": "Parallel Delete Virtual Machines in Azure\r\n\r\nThis script will delete an Azure Resource manager Virtual Machine.\r\nIt will also delete the associated Network Interface Card (NIC).\r\nIt will also remote both STANDARD and MANAGED Disks.\r\nIncluding both the OS Disk and the DATA Disks\r\n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-11-24T08:29:05.623",
      "IsPublished": true,
      "PublishedDate": "2017-11-24T08:30:09.03",
      "LastActivationEmailDate": null,
      "UnpublishedDate": "2018-11-26T18:40:34.027",
      "InitialProjectName": "Parallel-Delete-Azure-RM-84dadec9",
      "TagList": "VM,Virtual Machine,Parallel,Azure Resource Manager,Azure Virtual Machines,Azure Managed Disks,Delete VM,Delete NIC,Delete Disks,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 5.0,
      "RatingsCount": 1,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2019-09-19T22:00:16.773",
      "ProjectType": "GenericProject",
      "ScriptFile": "[224890] Remove-AzureRMVMInstanceParallel.ps1"
    },
    {
      "ProjectId": 323903,
      "ProjectName": "Parallel-Delete-Azure-RM-11f76767",
      "Title": "Parallel Delete Azure RM Virtual Machine Extensions (updated April 2018)",
      "Description": "Parallel Delete Virtual Machines Extensions.Extensions are used widely in Azure for things such as:- Antimalware- DependencyAgent- Script Extension- DSC Extension- OMS / Monitoring Extension- VM Diagnostics Extension- Backup ExtensionIf there is an error on the extension or you n",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2017-12-12T09:29:19.743",
      "IsPublished": true,
      "PublishedDate": "2017-12-12T09:29:20.477",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Parallel-Delete-Azure-RM-11f76767",
      "TagList": "VM Extension,Azure VM Extensions,Script Extension,DSC Extension,Remove-AzureRmVMExtension,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-04-07T15:13:04.427",
      "ProjectType": "GenericProject",
      "ScriptFile": "[197884] Remove-AzureRMVMExtensionParallel.ps1"
    },
    {
      "ProjectId": 329156,
      "ProjectName": "Find-Azure-RM-Virtual-8ee175d5",
      "Title": "Find Azure RM Virtual Machine Sizes in your region/location",
      "Description": "This function offers an easy way to view VM Sizes.This is helpful to filter based on the number of Cores that you are looking for.Keep in mind that certain VM types are specified here based on the type of workload you have: https://docs.microsoft.com/en-us/azure/virtual-machines/",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-01-19T16:17:53.933",
      "IsPublished": true,
      "PublishedDate": "2018-01-19T16:17:54.59",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-Azure-RM-Virtual-8ee175d5",
      "TagList": "Azure Virtual Machine Sizes,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-01-19T16:17:54.59",
      "ProjectType": "GenericProject",
      "ScriptFile": "[186282] Find-AzureRMVMSize.ps1"
    },
    {
      "ProjectId": 329178,
      "ProjectName": "Find-Azure-RM-VMImage-1e07901a",
      "Title": "Find Azure RM VMImage Publishers, Offers and Skus.",
      "Description": "When you deploy a Virtual Machine Image, you need to know the \r\nSize of the Virtual Machine, this script can help to get the Sizes in your region:https://gallery.technet.microsoft.com/scriptcenter/Find-Azure-RM-Virtual-8ee175d5?redir=0You also need to know the following informati",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-01-19T17:07:58.873",
      "IsPublished": true,
      "PublishedDate": "2018-01-19T17:07:59.717",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-Azure-RM-VMImage-1e07901a",
      "TagList": "Azure Virtual Machines,Offer,Skus,Publishers,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-01-19T17:22:43.627",
      "ProjectType": "GenericProject",
      "ScriptFile": "[186283] Find-AzureRMPublisherImageOffer.ps1"
    },
    {
      "ProjectId": 329189,
      "ProjectName": "Find-the-latest-Azure-RM-e1deeb39",
      "Title": "Find the latest Azure RM API Version for a resource provider type",
      "Description": "When working with the Azure Resource Manager API, it is useful to know the API versions.Often if you want to implement a new feature, you need to know the API version to call.Resource Group Templates are one particular place where you will often use the API Version referencee.g.Â ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-01-19T20:36:39.43",
      "IsPublished": true,
      "PublishedDate": "2018-01-19T20:36:40.053",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Find-the-latest-Azure-RM-e1deeb39",
      "TagList": "Azure Resource Manager,API version,Community,JavaScript,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-01-19T21:03:27.17",
      "ProjectType": "GenericProject",
      "ScriptFile": "[186294] Find-AzureRMAPIVersion.ps1"
    },
    {
      "ProjectId": 351467,
      "ProjectName": "Export-Azure-Resource-092b9c2a",
      "Title": "Export Azure Resource Manager (ARM) Role Based Access Control (RBAC) Assignments",
      "Description": "This script allows you to export the current Azure Resource Manager (ARM) Role Based Access Control (RBAC) Permissions.It will loop through all subscriptions that you have access to and export the permissions.It will create an individual CSV file on the desktop per subscription.T",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-01-30T10:10:26.403",
      "IsPublished": true,
      "PublishedDate": "2018-01-30T10:10:27.293",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Export-Azure-Resource-092b9c2a",
      "TagList": "Azure,RBAC,Owner,Subscription,Azure Resource Manager,RoleAssignment,Contributor,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-05-07T16:25:03.76",
      "ProjectType": "GenericProject",
      "ScriptFile": "[199430] Export-AzureRMRoleAssignment.ps1"
    },
    {
      "ProjectId": 359316,
      "ProjectName": "Azure-EA-Billing-Summary-345622f3",
      "Title": "Azure EA Billing Summary by Resource Group",
      "Description": "Azure EA Billing Summary by Resource GroupNB: this is suitable for Enterprise customers onlyThe Script provides a way to select a Billing Period from your Azure EA Subscriptions.The Billing Period Defaults to a one month period.You can then query the Azure EA Billing API for the ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-02-13T21:10:10.67",
      "IsPublished": true,
      "PublishedDate": "2018-02-13T21:18:13.563",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Azure-EA-Billing-Summary-345622f3",
      "TagList": "Azure billing,Billing Per Resource Group,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.0,
      "RatingsCount": 1,
      "AverageRating7Days": 4.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2018-02-22T12:22:00.097",
      "ProjectType": "GenericProject",
      "ScriptFile": "[189607] Get-AzureBillingMonthlySummary.ps1"
    },
    {
      "ProjectId": 370344,
      "ProjectName": "DSC-Resource-Module-to-7bacebdb",
      "Title": "DSC Resource Module to create Storage Pools (Updated May 2018)",
      "Description": "This is a DSC Resource Module to Create Storage Pools in Azure.This module can create Virtual Disks, Volumes/MountPoints and Storage Pools, however it does not remove or update configurations.I.e. it is useful for provisioning, however will not enable you to change configurations",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-03-09T12:31:39.19",
      "IsPublished": true,
      "PublishedDate": "2018-03-09T12:31:39.72",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "DSC-Resource-Module-to-7bacebdb",
      "TagList": "Volume,Azure Virtual Machines,Storage Pools,Virtual Disk,Community,PowerShell,PSModule",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-05-29T13:59:51.28",
      "ProjectType": "GenericProject",
      "ScriptFile": ""
    },
    {
      "ProjectId": 413183,
      "ProjectName": "Trace-the-AzureRM-Virtual-3d7ff949",
      "Title": "Trace the AzureRM Virtual Machine DSC Extension remotely",
      "Description": "This function is useful to trace the Azure DSC extension, especially in push mode.# Show all statuses, including Meta PushesTrace-AzureRMDSCExtension -ResourceGroup AZE2-ADF-RG-D06 -VMName AZE2-ADF-D6-vmAD02Â  -StatusView 3# Just show the DSC for the main configurationTrace-AzureR",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-04-01T23:34:14.117",
      "IsPublished": true,
      "PublishedDate": "2018-04-01T23:34:14.88",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Trace-the-AzureRM-Virtual-3d7ff949",
      "TagList": "Virtual Machines,DSC,Desired State Configuration,DSC Extension Azure,Community,PowerShell,Bash/shell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 4.5,
      "RatingsCount": 2,
      "AverageRating7Days": 5.0,
      "RatingsCount7Days": 1,
      "ModifiedDate": "2018-04-07T14:05:24.67",
      "ProjectType": "GenericProject",
      "ScriptFile": "[197881] Trace-AzureRMDSCExtension.ps1"
    },
    {
      "ProjectId": 415437,
      "ProjectName": "Azure-Resource-Group-6ee2c700",
      "Title": "Azure Resource Group Deployment Function ARMDeploy (updated June 2018)",
      "Description": "Deploy ARM Templates in a custom way, to streamline deployments \r\nThis is a customization of the deployment scripts available on the Quickstart or within Visual Studio Resource group Deployment Solution.\r\nARMDeploy -DP D1       \r\nOnly files that have been modified are re-uploaded",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-04-18T22:34:11.263",
      "IsPublished": true,
      "PublishedDate": "2018-04-18T22:34:13.797",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Azure-Resource-Group-6ee2c700",
      "TagList": "ARM,Resource Group Deployments,New-AzureRmResourceGroupDeployment,Azure Template Deployments,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-05-24T22:56:03.72",
      "ProjectType": "GenericProject",
      "ScriptFile": "[201947] Start-AzureRMDeploy.ps1"
    },
    {
      "ProjectId": 418642,
      "ProjectName": "Stop-Azure-Resource-Group-867ad678",
      "Title": "Stop Azure Resource Group Deployment Function",
      "Description": "This script stops an RG deployment . . Â It is the stop script that goes along with this:Â https://gallery.technet.microsoft.com/scriptcenter/Azure-Resource-Group-6ee2c700Â \r\nStop-AzureRMDeploy -DP D1\r\n\r\nThis will provide an out-gridview pop up to select the deployments that you wan",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2018-06-24T13:20:21.937",
      "IsPublished": true,
      "PublishedDate": "2018-06-24T13:20:23.81",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Stop-Azure-Resource-Group-867ad678",
      "TagList": "ARM,Resource Group Deployments,Azure Template Deployments,Stop-AzureRmResourceGroupDeployment,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2018-06-24T13:21:21.687",
      "ProjectType": "GenericProject",
      "ScriptFile": "[201948] Stop-AzureRMDeploy.ps1"
    },
    {
      "ProjectId": 479905,
      "ProjectName": "Easily-swap-between-your-8d59f794",
      "Title": "Easily swap between your Azure subscriptions (updated 2019 Sept)",
      "Description": "Do you manage more than a single Azure subscription and want an easy way to swap between them ?This function is short and easy to use for anyone.Step 1# install the azure module (one time)Â install-module az -forceÂ # run this one timeÂ Enable-AzContextAutosavelogin-azaccountÂ Â # run",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2019-02-21T00:36:20.95",
      "IsPublished": true,
      "PublishedDate": "2019-02-21T00:36:22.543",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Easily-swap-between-your-8d59f794",
      "TagList": "Azure,Subscriptions,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-09-19T21:09:40.94",
      "ProjectType": "GenericProject",
      "ScriptFile": "[224889] azl.ps1"
    },
    {
      "ProjectId": "100",
      "ProjectName": "Sync-Build-Files-to-Azure-BLOB",
      "Title": "Sync (Component Build) Files to Azure File Share (updated Feb 2021)",
      "Description": "This script does the following:1) Connects to an Azure Storage Account, using a Service Principal or User account that is currently logged in2) Using a local Directory it will look at that directory, then will check the Files and Directories in a specified component build directory to the Blob Container",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2021-04-03T21:59:15.85",
      "IsPublished": true,
      "PublishedDate": "2021-04-03T21:59:15.85",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Sync-Build-Files-to-Azure-BLOB",
      "TagList": "azure storage,Azure Blob Container,Sync Files,Sync Build Files,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2021-04-03T21:59:15.85",
      "ProjectType": "GenericProject",
      "ScriptFile": "Sync-AzureBlobBuildComponent.ps1"
    },
    {
      "ProjectId": 480113,
      "ProjectName": "Sync-Build-Files-to-Azure-Files",
      "Title": "Sync (Component Build) Files to Azure File Share (updated Feb 2021)",
      "Description": "This script does the following:1) Connects to an Azure Storage Account, using a Service Principal or User account that is currently logged in2) Using a local Directory it will look at that directory, then will check the Files and Directories in a specified component build directo",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2019-03-16T22:14:10.707",
      "IsPublished": true,
      "PublishedDate": "2019-03-16T22:21:29.803",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Sync-Build-Files-to-Azure-5ae03950",
      "TagList": "azure storage,Azure File Share,Sync Files,Sync Build Files,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2021-02-16T21:59:15.85",
      "ProjectType": "GenericProject",
      "ScriptFile": "[224281] Sync-AzureFileShareBuildComponent.ps1"
    },
    {
      "ProjectId": 480650,
      "ProjectName": "Azure-Subscription-and-RG-e11378f8",
      "Title": "Azure Subscription and RG Deployment Function AzDeploy",
      "Description": "\r\nThis script does Resource Group or Subscription deployments.\r\n\r\nEnable-AzureRmAlias\r\n<# \r\n.Synopsis \r\nDeploy ARM Templates in a custom way, to streamline deployments \r\n\r\n.DESCRIPTION \r\nThis is a customization of the deployment scripts available on the Quickstart or within Visua",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2019-05-24T22:55:18.95",
      "IsPublished": true,
      "PublishedDate": "2019-05-24T22:57:40.613",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Azure-Subscription-and-RG-e11378f8",
      "TagList": "ARM,Resource Group Deployments,Azure Template Deployments,Subscription Deployments,New-AzResourceGroupDeployment,New-AzDeployment,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-05-24T23:43:06.393",
      "ProjectType": "GenericProject",
      "ScriptFile": "[222074] Start-AzDeploy.ps1"
    },
    {
      "ProjectId": 481417,
      "ProjectName": "Sync-Azure-Keyvault-f6efc502",
      "Title": "Sync Azure Keyvault Secrets and Certificates between vaults",
      "Description": "If you have a keyvault in your primary region and a secondary region, you may have a reason to sync up Keyvaults.Possibly you need to sync a keyault from a primary Vault to a secondary Vault for Dev or Testing.This script synchronizes secrets/keys based on the last modified time.",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2019-10-07T23:14:26.843",
      "IsPublished": true,
      "PublishedDate": "2019-10-07T23:14:27.297",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Sync-Azure-Keyvault-f6efc502",
      "TagList": "Azure Keyvault,keyvault,Azure Key Vault,Key Vault,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2019-10-07T23:14:27.297",
      "ProjectType": "GenericProject",
      "ScriptFile": "[225194] Start-AzureKVSync.ps1"
    },
    {
      "ProjectId": 481736,
      "ProjectName": "Sample-of-using-REST-to-e327b094",
      "Title": "Sample of using REST to connect to Azure storage Blob with user assigned MSI",
      "Description": "https://docs.microsoft.com/en-us/rest/api/storageservices/\r\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\r\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/get-blob#request-headers\r\n\r\nUser User Assigned Managed Service Identity (MSI) for Azure Blob..",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2020-02-08T19:04:47.04",
      "IsPublished": true,
      "PublishedDate": "2020-02-08T19:04:53.887",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Sample-of-using-REST-to-e327b094",
      "TagList": "Azure Blob Storage,REST API,Azure MSI,Managed Service Identity,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2020-02-09T00:40:19.263",
      "ProjectType": "GenericProject",
      "ScriptFile": "[226208] bearer_token_access_blob_using_MSI.ps1"
    },
    {
      "ProjectId": 481809,
      "ProjectName": "Trigger-Azure-Policy-c31b2b08",
      "Title": "Trigger Azure Policy Evaluation in PowerShell",
      "Description": "Trigger Azure Policy Evaluation in PowerShell\r\n\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/rest/api/policy-insights/policystates/triggersubscriptionevaluation\r\n\r\nPolicy States - Trigger Subscription Evaluation (Azure Policy Insights)\r\nTriggers a policy evaluation scan for all the reso",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2020-03-10T20:51:28.88",
      "IsPublished": true,
      "PublishedDate": "2020-03-10T20:51:43.403",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Trigger-Azure-Policy-c31b2b08",
      "TagList": "Azure Policy,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2020-03-16T02:53:17.47",
      "ProjectType": "GenericProject",
      "ScriptFile": "[226537] Start-AzurePolicyEvaluation.ps1"
    },
    {
      "ProjectId": 481820,
      "ProjectName": "Setup-Azure-DevOps-Agent-dfa6f49a",
      "Title": "Setup Azure DevOps Agent Pools and Agent on Windows Server",
      "Description": "This is sample code modified from DSC configuration to use used as a imperative script.There are samples of:1) Authenticating to Azure DevOps from PowerShell with a PAT token2) Calling the api to test if the pool exists.3) Creating the pool if it doesn't exist.4) Downloading the ",
      "FileReleaseEnabled": true,
      "DiscussionsEnabled": true,
      "WorkItemTrackingEnabled": true,
      "SourceCodeBrowsingEnabled": false,
      "CreatedDate": "2020-03-14T05:29:49.96",
      "IsPublished": true,
      "PublishedDate": "2020-03-14T05:31:02.933",
      "LastActivationEmailDate": null,
      "UnpublishedDate": null,
      "InitialProjectName": "Setup-Azure-DevOps-Agent-dfa6f49a",
      "TagList": "AzureDevOps,Agent Pool,DevOps Agent,DeploymentGroups,Community,PowerShell,PSScript",
      "AffiliateName": "CodePlex",
      "PrimaryLanguage": 1033,
      "IsLocked": false,
      "AverageRating": 0.0,
      "RatingsCount": 0,
      "AverageRating7Days": 0.0,
      "RatingsCount7Days": 0,
      "ModifiedDate": "2020-03-14T20:06:42.587",
      "ProjectType": "GenericProject",
      "ScriptFile": "[226535] setDevOpsAgentPool.ps1"
    }
  ],
  "request": [],
  "adminActionLog": [],
  "userActivity": [
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-and-Report-on-cc49120e",
      "ActivityDate": "2011-08-17T16:59:56.423",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-User-Logon-Information-5806f3b4",
      "ActivityDate": "2011-08-20T13:24:33.237",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Update-Sysinternals-8386bed2",
      "ActivityDate": "2011-08-27T12:10:13.38",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Search-VMware-Logs-for-7528a274",
      "ActivityDate": "2011-09-01T18:25:50.733",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-HBA-and-WWPN-53121140",
      "ActivityDate": "2011-11-15T12:01:22.573",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Edit-advanced-functions-73076926",
      "ActivityDate": "2012-05-02T08:13:45.967",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Showing-console-color-6c9e4813",
      "ActivityDate": "2012-05-18T14:00:36.437",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Add-a-script-Function-to-a-089f28be",
      "ActivityDate": "2012-08-05T14:40:14.343",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-the-number-of-open-2ed8aa35",
      "ActivityDate": "2012-08-15T16:52:51.377",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-Share-Information-5cc71b2c",
      "ActivityDate": "2012-08-15T21:19:56.433",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Report-on-the-Event-Logs-a94f27a0",
      "ActivityDate": "2012-09-06T17:53:04.987",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Update-a-local-File-326e0623",
      "ActivityDate": "2012-09-07T11:01:29.44",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-VMware-Host-Information-d2aa08ee",
      "ActivityDate": "2012-09-14T21:56:25.607",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Show-Desktop-0541c1e6",
      "ActivityDate": "2012-09-27T18:24:51.373",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Keep-Alive-Simulates-a-key-9b05f980",
      "ActivityDate": "2012-10-01T08:11:59.57",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Auditing-Directory-Service-53574749",
      "ActivityDate": "2012-10-05T21:03:46.85",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Set-the-PowerShell-Console-bd8b2ad1",
      "ActivityDate": "2012-10-06T12:35:38.403",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-System-Hardware-b68938c8",
      "ActivityDate": "2012-11-08T00:54:47.737",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: List-Domain-Controllers-in-2bec62a5",
      "ActivityDate": "2012-12-07T08:21:31.77",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-the-alias-parameter-7c282bdd",
      "ActivityDate": "2012-12-08T18:16:29.907",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Saving-Credentials-As-8ea44827",
      "ActivityDate": "2012-12-15T16:16:03.59",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Retrieve-the-LastUseTime-dbd2999b",
      "ActivityDate": "2013-01-08T09:21:32.447",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-Uptime-Report-on-the-f3ad4315",
      "ActivityDate": "2013-01-15T21:19:36.76",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-the-logged-on-users-1161bd92",
      "ActivityDate": "2013-02-05T10:56:03.7",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Copy-Files-Script-To-allow-45e0046b",
      "ActivityDate": "2013-02-09T22:50:08.637",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-Enum-Value-Find-af496033",
      "ActivityDate": "2013-02-20T08:29:58.227",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: WMI-Explorer-Search-WMI-cd87e309",
      "ActivityDate": "2013-03-24T18:41:54.137",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Set-Custom-Permissions-on-69af151c",
      "ActivityDate": "2013-03-24T18:51:16.633",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Generate-a-Proxy-Function-ab16b44e",
      "ActivityDate": "2013-04-27T13:56:05.187",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: EnableDisable-DFS-17f3f73b",
      "ActivityDate": "2013-08-18T20:40:19.11",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Perform-a-Measure-Command-de314de6",
      "ActivityDate": "2013-10-11T10:24:43.853",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Retrieve-a-Password-from-a-a3cd7d68",
      "ActivityDate": "2013-11-01T10:02:02.267",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Compare-two-lists-directly-0a326603",
      "ActivityDate": "2013-12-03T20:54:52.393",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Deploy-Hyper-V-Virtual-567b2736",
      "ActivityDate": "2014-02-28T13:18:57.293",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Restart-Computer-with-707ae728",
      "ActivityDate": "2014-04-01T22:27:59.207",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-the-Bad-Password-c207d807",
      "ActivityDate": "2014-07-19T10:26:36.693",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Discover-your-WAN-IP-2d7b70e1",
      "ActivityDate": "2014-08-01T18:49:44.793",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Start-RDP-MSTSC-in-a-74367a0d",
      "ActivityDate": "2014-08-05T16:22:29.267",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Update-Azure-2-VPN-Remote-765c12f2",
      "ActivityDate": "2014-08-23T20:20:41.137",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Deploy-a-new-Virtual-f42812ac",
      "ActivityDate": "2016-02-09T10:52:47.513",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Deploy-a-new-Virtual-8b524c26",
      "ActivityDate": "2016-02-09T10:57:29.1",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Deploy-a-new-Virtual-75cd3230",
      "ActivityDate": "2016-02-09T11:09:24.573",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Create-a-new-MDT-1db3e2c0",
      "ActivityDate": "2016-02-09T12:28:49.977",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Create-a-new-WDS-6109944f",
      "ActivityDate": "2016-02-09T12:53:49.643",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-a-Formatted-list-from-b40e8272",
      "ActivityDate": "2016-02-22T17:25:50.75",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Deploy-or-Rebuild-Hyper-V-78c73732",
      "ActivityDate": "2016-02-25T08:52:17.963",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Update-Azure-S2S-vpn-7127f27b",
      "ActivityDate": "2016-03-04T20:40:37.84",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Get-WSMANSession-list-6f447d56",
      "ActivityDate": "2016-10-07T12:07:01.46",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Query-the-Local-Security-357c5b65",
      "ActivityDate": "2016-10-17T14:51:16.923",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Build-an-RDCMan-Remote-406ad27d",
      "ActivityDate": "2017-03-29T13:21:37.78",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Correct-permissions-on-2fa46daa",
      "ActivityDate": "2017-06-08T10:25:56.687",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Test-if-a-domain-user-67e84796",
      "ActivityDate": "2017-07-07T10:53:42.203",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Delete-Azure-RM-Virtual-fc09d944",
      "ActivityDate": "2017-08-29T16:55:32.21",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Parallel-Delete-Azure-RM-84dadec9",
      "ActivityDate": "2017-11-24T08:29:06.03",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Parallel-Delete-Azure-RM-11f76767",
      "ActivityDate": "2017-12-12T09:29:20.053",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-Azure-RM-Virtual-8ee175d5",
      "ActivityDate": "2018-01-19T16:17:54.123",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-Azure-RM-VMImage-1e07901a",
      "ActivityDate": "2018-01-19T17:07:59.217",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Find-the-latest-Azure-RM-e1deeb39",
      "ActivityDate": "2018-01-19T20:36:39.663",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Export-Azure-Resource-092b9c2a",
      "ActivityDate": "2018-01-30T10:10:26.653",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Azure-EA-Billing-Summary-345622f3",
      "ActivityDate": "2018-02-13T21:10:10.92",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: DSC-Resource-Module-to-7bacebdb",
      "ActivityDate": "2018-03-09T12:31:39.393",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Trace-the-AzureRM-Virtual-3d7ff949",
      "ActivityDate": "2018-04-01T23:34:14.507",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Azure-Resource-Group-6ee2c700",
      "ActivityDate": "2018-04-18T22:34:13.373",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Stop-Azure-Resource-Group-867ad678",
      "ActivityDate": "2018-06-24T13:20:23.373",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Easily-swap-between-your-8d59f794",
      "ActivityDate": "2019-02-21T00:36:22.123",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Sync-Build-Files-to-Azure-5ae03950",
      "ActivityDate": "2019-03-16T22:14:11.847",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Azure-Subscription-and-RG-e11378f8",
      "ActivityDate": "2019-05-24T22:55:20.387",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Sync-Azure-Keyvault-f6efc502",
      "ActivityDate": "2019-10-07T23:14:27.063",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Sample-of-using-REST-to-e327b094",
      "ActivityDate": "2020-02-08T19:04:47.917",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Trigger-Azure-Policy-c31b2b08",
      "ActivityDate": "2020-03-10T20:51:29.02",
      "Comment": null,
      "IsPublic": true
    },
    {
      "UserActivityName": "Release",
      "Title": "Created release: Setup-Azure-DevOps-Agent-dfa6f49a",
      "ActivityDate": "2020-03-14T05:29:50.96",
      "Comment": null,
      "IsPublic": true
    }
  ],
  "threadPost": [
    {
      "Thread": "Share to Cleint?",
      "Subject": null,
      "Text": "Okay that is no problem, I would suggest the following steps:\n\n1) Put the list of workstations you want to transfer the file to in a single text file\n   Put one workstation name on each new line\n   Call the file c:\\ps\\workstations.txt\n\n2) Save the following lines into a script and run it.\n\nGet-Content -Path c:\\ps\\workstations.txt | foreach {\n$workstation = $_\nWrite-Host \"Workstation is: $workstation\"\nc:\\ps\\Start-TransferFile.ps1 -s \"\\\\serverS\\share\\*.*\" -d \"\\\\$workstation\\c$\\\"\n}\n\nFor this to work you will have to be an administrator on the workstations in order to connect to the C$ share.\n",
      "PostedDate": "2011-03-26T10:22:20.233",
      "LastModifiedDate": null,
      "SearchableText": "Okay that is no problem, I would suggest the following steps:\n\n1) Put the list of workstations you want to transfer the file to in a single text file\n   Put one workstation name on each new line\n   Call the file c:\\ps\\workstations.txt\n\n2) Save the following lines into a script and run it.\n\nGet-Content -Path c:\\ps\\workstations.txt | foreach {\n$workstation = $_\nWrite-Host \"Workstation is: $workstation\"\nc:\\ps\\Start-TransferFile.ps1 -s \"\\\\serverS\\share\\*.*\" -d \"\\\\$workstation\\c$\\\"\n}\n\nFor this to work you will have to be an administrator on the workstations in order to connect to the C$ share.\n"
    },
    {
      "Thread": "Share to Cleint?",
      "Subject": null,
      "Text": "Actually where i put:\nc:\\ps\\Start-TraânsferFile.ps1 -s \"\\\\serverS\\sharâe\\*.*\" -d \"\\\\$workstationâ\\c$\\\"\n\nYou would need to have the name of the file, rather than the wildcard\nc:\\ps\\Start-TraânsferFile.ps1 -s \"\\\\serverS\\sharâe\\file.ext\" -d \"\\\\$workstationâ\\c$\\\"",
      "PostedDate": "2011-03-26T10:23:56.94",
      "LastModifiedDate": null,
      "SearchableText": "Actually where i put:\nc:\\ps\\Start-TraânsferFile.ps1 -s \"\\\\serverS\\sharâe\\*.*\" -d \"\\\\$workstationâ\\c$\\\"\n\nYou would need to have the name of the file, rather than the wildcard\nc:\\ps\\Start-TraânsferFile.ps1 -s \"\\\\serverS\\sharâe\\file.ext\" -d \"\\\\$workstationâ\\c$\\\""
    },
    {
      "Thread": "Question ?",
      "Subject": null,
      "Text": "I tried to provide full help and examples for running this script in the description.\n\nThe most common way to run this on the domain would be:\n\nStart-TransferFile.ps1 -s \"\\\\serverS\\share\\file.ext\" -d \"\\\\serverD\\share\" -c \"domain\\user\"\n\n",
      "PostedDate": "2010-08-04T16:03:57.04",
      "LastModifiedDate": null,
      "SearchableText": "I tried to provide full help and examples for running this script in the description.\n\nThe most common way to run this on the domain would be:\n\nStart-TransferFile.ps1 -s \"\\\\serverS\\share\\file.ext\" -d \"\\\\serverD\\share\" -c \"domain\\user\"\n\n"
    },
    {
      "Thread": "Question ?",
      "Subject": null,
      "Text": "I had another thought. If you are having troubles with this then you may need to install the BITS Module.\n\nMake sure you have PowerShell v 2.0 and install BITS v 4.0.\n\nhttp://support.microsoft.com/kb/968929/en-us\n\nI actually cannot remember where the BITSTRANSFER Module came from, however from memory it was from the above package.\n\nRun this >   Get-Module -ListAvailable\n\nSee if BitsTransfer shows up, if so the script should run, since it imports the module.\n\nOr import it manually and explore it some more.\n\nImport-Module BitsTransfer\n\nget-help Get-BitsTransfer -online\n\nHope this helps.",
      "PostedDate": "2010-08-05T19:05:40.547",
      "LastModifiedDate": null,
      "SearchableText": "I had another thought. If you are having troubles with this then you may need to install the BITS Module.\n\nMake sure you have PowerShell v 2.0 and install BITS v 4.0.\n\nhttp://support.microsoft.com/kb/968929/en-us\n\nI actually cannot remember where the BITSTRANSFER Module came from, however from memory it was from the above package.\n\nRun this >   Get-Module -ListAvailable\n\nSee if BitsTransfer shows up, if so the script should run, since it imports the module.\n\nOr import it manually and explore it some more.\n\nImport-Module BitsTransfer\n\nget-help Get-BitsTransfer -online\n\nHope this helps."
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "Glad that you have tried out the script.\n\nI test for the installation of the mbsacli tool in the script, however when I call it, I do not put in the full path.\n\nIn order to simply call \"mbsacli\" I have added the path for the into the PATH Variable on my computer. You just go to the PATH and add in \"C:\\Program Files\\Microsoft Baseline Security Analyzer 2\" or if you are running 64 bit then put in \"C:\\Program Files(x86)\\Microsoft Baseline Security Analyzer 2\".\n\nOnce you have done that go to a command prompt and type in mbsacli /? and see what comes up. You should see the help for the tool.\n\nNext make sure your report directiry exists. I use $ReportDir = \"C:\\PS\\MBSA\\Reports\\NewReports\" so if you do not have those directories either create them or change the path in the script to a directory that you have.\n\nOnce that is setup you need to provide a list of computers to scan. The script takes a text file with the computer names on a new line in the file.\n\nE.g. save the text file as below to the location on your file system such as C:\\PS\\MBSA\\servers.txt\ncomputer1\ncomputer2\ncomputer2\n\nThen you can run the script by using these details:\n\n.\\Get-MBSAStats.ps1 -h C:\\PS\\MBSA\\servers.txt\n\nPlease let me know how you go.",
      "PostedDate": "2011-04-26T08:16:17.28",
      "LastModifiedDate": null,
      "SearchableText": "Glad that you have tried out the script.\n\nI test for the installation of the mbsacli tool in the script, however when I call it, I do not put in the full path.\n\nIn order to simply call \"mbsacli\" I have added the path for the into the PATH Variable on my computer. You just go to the PATH and add in \"C:\\Program Files\\Microsoft Baseline Security Analyzer 2\" or if you are running 64 bit then put in \"C:\\Program Files(x86)\\Microsoft Baseline Security Analyzer 2\".\n\nOnce you have done that go to a command prompt and type in mbsacli /? and see what comes up. You should see the help for the tool.\n\nNext make sure your report directiry exists. I use $ReportDir = \"C:\\PS\\MBSA\\Reports\\NewReports\" so if you do not have those directories either create them or change the path in the script to a directory that you have.\n\nOnce that is setup you need to provide a list of computers to scan. The script takes a text file with the computer names on a new line in the file.\n\nE.g. save the text file as below to the location on your file system such as C:\\PS\\MBSA\\servers.txt\ncomputer1\ncomputer2\ncomputer2\n\nThen you can run the script by using these details:\n\n.\\Get-MBSAStats.ps1 -h C:\\PS\\MBSA\\servers.txt\n\nPlease let me know how you go."
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "hey nice work, glad you like the script.",
      "PostedDate": "2011-04-26T09:01:11.41",
      "LastModifiedDate": null,
      "SearchableText": "hey nice work, glad you like the script."
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "hi PS1 Beginner,\n\nGood job for searching for a utility to help solve one of your requirements.\n\nOkay so here are some steps to test.\n1) can you run mbsacli /?  from anywhere on your system i.e. any place in the command line or powershell host?  In order to do that you have to add the installation directory to your PATH variable.\n\nLet me know the answer to that and then we can move on to the next thing?\n\nYou can see my comment further up in this list in relation to that item with some more info.\n",
      "PostedDate": "2011-08-01T15:07:37",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "If you right click on \"my computer\", select properties, go to either advanced system properties (if you have Win 7) and then select the Advanced tab and then Environment Variables. In the system variables section you will see the \"path\" variable. If you select it and click edit, you can then add the extra path from the mbsacli in there. They are separated by ; so you would add ;C:\\Program Files\\Microsoft Baseline Security Analyzer 2 to the end. Now click okay, okay, okay. The next time you start cmd or powershell you should be able to run mbsacli /? without putting in the full path. Try run the script again now and let me know how it goes.",
      "PostedDate": "2011-08-02T06:13:19",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "The next thing to check is that you have created the appropriate directories for the script to run. So the report directory should exist. If that exists and you run the script particular variables should be created when the script runs, so start at the top and see which variables do exist in the powershell console. Check that $cmd and then $ReportDetails have a value, if they do not you have to work out why not. Also you may wish to update one line of the script from: $ReportDetails = Invoke-Expression $cmd to: $ReportDetails = @(Invoke-Expression $cmd). That will ensure the $reportDetails is of type array.\n\n\n\n",
      "PostedDate": "2011-08-02T11:38:13",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "One question: With the hostfile, do you have a single computer listed, each on a new line?",
      "PostedDate": "2011-08-04T10:46:25",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output Errors",
      "Subject": null,
      "Text": "This is tough. Run it once and then select each variable one at a time and only run the variable to see the value. What does $cmd show? What does $ReportDetails show?",
      "PostedDate": "2011-08-09T21:12:30",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "A script to monitor servers, Ping Test, with email notification",
      "Subject": null,
      "Text": "Since I designed this script to be run with a Scheduled task I made the decision not to use parameters, however I have since wanted to use this script many times by supplying parameters to monitor a chosen group of servers from the command line. Because of this I am going to updates this script to a PowerShell version 2.0 Script and include Full parameters and help.\n\nNow back to your question. . . . In order to provide the script with a list of server names you need to put the list of computers in the .txt file \\\\server\\share\\hosts.txt (as listed in the script).\n\nSince the script gets the contents of that file to use the items listed as the computers to monitor.\n\nYou can of course simply change that path to any path that matches your needs. \nE.g C:\\Scripts\\computers.txt or something similar.\n\nI hope that helps.\n\nActually I have already updated this script so please check back in a day or so and I will upload the new version.",
      "PostedDate": "2010-08-25T07:10:09.237",
      "LastModifiedDate": null,
      "SearchableText": "Since I designed this script to be run with a Scheduled task I made the decision not to use parameters, however I have since wanted to use this script many times by supplying parameters to monitor a chosen group of servers from the command line. Because of this I am going to updates this script to a PowerShell version 2.0 Script and include Full parameters and help.\n\nNow back to your question. . . . In order to provide the script with a list of server names you need to put the list of computers in the .txt file \\\\server\\share\\hosts.txt (as listed in the script).\n\nSince the script gets the contents of that file to use the items listed as the computers to monitor.\n\nYou can of course simply change that path to any path that matches your needs. \nE.g C:\\Scripts\\computers.txt or something similar.\n\nI hope that helps.\n\nActually I have already updated this script so please check back in a day or so and I will upload the new version."
    },
    {
      "Thread": "SMTP Configure",
      "Subject": null,
      "Text": "The full help for Send-MailMessage is found by using:\n\nget-help Send-MailMessage -full\n\nThe full SYNTAX from that page is:\nSYNTAX\n    Send-MailMessage [-To] <string[]> [-Subject] <string> -From <string> [[-Body] <string>] \n    [[-SmtpServer] <string>] [-Attachments <string[]>] [-Bcc <string[]>] [-BodyAsHtml] [-Cc \n    <string[]>] [-Credential <PSCredential>] [-DeliveryNotificationOption {None | OnSuccess \n    | OnFailure | Delay | Never}] [-Encoding <Encoding>] [-Priority {Normal | Low | High}] [\n    -UseSsl] [<CommonParameters>]\n\nYou can see that this cmdlet uses the -credential parameter for supplying the username. If you use that parameter then it will prompt for the password, which would be a manual process for sending the mail, which is fine unless you run this using a scheduled task or by some other automation method.\n\nMost Enterprise Email Servers will have a Relay server setup that will accept unauthenticated relay of mail from certain host or IP Ranges. If none of these options cover your needs, you would have to use one of the many other tools that allow you to send emails and also possibly store the credentials.",
      "PostedDate": "2010-08-04T16:01:44.47",
      "LastModifiedDate": null,
      "SearchableText": "The full help for Send-MailMessage is found by using:\n\nget-help Send-MailMessage -full\n\nThe full SYNTAX from that page is:\nSYNTAX\n    Send-MailMessage [-To]  [-Subject] -From [[-Body]] \n    [[-SmtpServer] ] [-Attachments] [-Bcc] [-BodyAsHtml] [-Cc] [-Credential ] [-DeliveryNotificationOption {None | OnSuccess \n    | OnFailure | Delay | Never}] [-Encoding ] [-Priority {Normal | Low | High}] [\n    -UseSsl] []\n\nYou can see that this cmdlet uses the -credential parameter for supplying the username. If you use that parameter then it will prompt for the password, which would be a manual process for sending the mail, which is fine unless you run this using a scheduled task or by some other automation method.\n\nMost Enterprise Email Servers will have a Relay server setup that will accept unauthenticated relay of mail from certain host or IP Ranges. If none of these options cover your needs, you would have to use one of the many other tools that allow you to send emails and also possibly store the credentials."
    },
    {
      "Thread": "Error",
      "Subject": null,
      "Text": "Hi _muris_ & bharathnazareth\n\nThanks for your question and reponse. Hopefully that will help.\n\n",
      "PostedDate": "2012-07-19T13:04:18.327",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Not uptime, but last reboot time",
      "Subject": null,
      "Text": "Hi James,\n\nI am not really sure what you are talking about. . .  the script shows the time since rebooted which is as far as i have always known the defintion of uptime.\n\nRetrieving Computer Info . . .\nMonday, September 13, 2010 3:06:06 PM\n\nServer Uptime Days Hours Minutes Seconds\n------ ------ ---- ----- ------- -------\nbrwpc1 -----> 11   2     19      27     ",
      "PostedDate": "2010-09-13T12:07:08.433",
      "LastModifiedDate": null,
      "SearchableText": "Hi James,\n\nI am not really sure what you are talking about. . .  the script shows the time since rebooted which is as far as i have always known the defintion of uptime.\n\nRetrieving Computer Info . . .\nMonday, September 13, 2010 3:06:06 PM\n\nServer Uptime Days Hours Minutes Seconds\n------ ------ ---- ----- ------- -------\nbrwpc1 -----> 11   2     19      27     "
    },
    {
      "Thread": "Not uptime, but last reboot time",
      "Subject": null,
      "Text": "Excuse the formatting there with the numbers, however the above shows that:\n\nMy computer was last rebooted:  11 Days, 2 hours, 19 minutes and 27 seconds ago.\n\nThat is the uptime of my computer.\n\nYou can run this script on a list of computers to get the uptime from all of them.",
      "PostedDate": "2010-09-13T12:09:15.603",
      "LastModifiedDate": null,
      "SearchableText": "Excuse the formatting there with the numbers, however the above shows that:\n\nMy computer was last rebooted:  11 Days, 2 hours, 19 minutes and 27 seconds ago.\n\nThat is the uptime of my computer.\n\nYou can run this script on a list of computers to get the uptime from all of them."
    },
    {
      "Thread": "How do I execute this?",
      "Subject": null,
      "Text": "This script was designed to run from a Module, which is why it is wrapped in a function name.\n\nIf you know what a PowerShell Profile is then you could create a module and then load it in your profile each time you open the PowerShell console.\n\nStep 1. Edit the profile to run your module each time it starts up Powershell.\nStep 2. Create a module.\nStep 3. Add the link to this function in that module.\nOnce you have done that the cmdlets such as the get-aduser will be available to you always when you run Powershell.\n\nOkay now, if you are not sure what any of that means then you can do the following.\n\nStep 1. Delete OR comment out the first and last lines of the script.\nStep 2. Call the script by supplying the full path to the script.\nE.g. \nc:\\ps\\get-aduser.ps1 -u someusername\n\nThere is a large amount of resources on Powershell on the web, if you can work out how to setup a profile and then that would help your PowerShell skills along a fair amount. http://technet.microsoft.com/en-us/library/ee692764.aspx\n\nAlso if you can work out how to add your favourite scripts to a module file that would also help.\n\nI wrote some articles a while back on this, however they are a little outdated since you can learn so much in PowerShell in a short time I normally do things differently now that what I published in the blog just 4or 6  months ago, but it maybe worth a read http://brwilkinson.wordpress.com/",
      "PostedDate": "2011-02-10T17:38:04.283",
      "LastModifiedDate": null,
      "SearchableText": "This script was designed to run from a Module, which is why it is wrapped in a function name.\n\nIf you know what a PowerShell Profile is then you could create a module and then load it in your profile each time you open the PowerShell console.\n\nStep 1. Edit the profile to run your module each time it starts up Powershell.\nStep 2. Create a module.\nStep 3. Add the link to this function in that module.\nOnce you have done that the cmdlets such as the get-aduser will be available to you always when you run Powershell.\n\nOkay now, if you are not sure what any of that means then you can do the following.\n\nStep 1. Delete OR comment out the first and last lines of the script.\nStep 2. Call the script by supplying the full path to the script.\nE.g. \nc:\\ps\\get-aduser.ps1 -u someusername\n\nThere is a large amount of resources on Powershell on the web, if you can work out how to setup a profile and then that would help your PowerShell skills along a fair amount. http://technet.microsoft.com/en-us/library/ee692764.aspx\n\nAlso if you can work out how to add your favourite scripts to a module file that would also help.\n\nI wrote some articles a while back on this, however they are a little outdated since you can learn so much in PowerShell in a short time I normally do things differently now that what I published in the blog just 4or 6  months ago, but it maybe worth a read http://brwilkinson.wordpress.com/"
    },
    {
      "Thread": "Script modification",
      "Subject": null,
      "Text": "This is certainly possible, I would use teh Quest AD cmdlets for this and here is an example.\n\n$Root = 'Domain.org/Domain Controllers'  # This is the OU you want to search/monitor\n Add-PSSnapin \"Quest.ActiveRoles.ADManagement\" -EA 0     # Add the snapin\n Get-QADObject -SearchRoot $Root | Where-Object {$_.Type -eq \"Computer\"} |\n ForEach-Object {$_.Name} | \nForEach-Object {... The rest of the scrip goes here ...}\n\nYou will be replacing the following lines with the above code.\n$Servers | Where-Object {!($_ -match \"#\")} |  \n#\"test1\",\"test2\" | Where-Object {!($_ -match \"#\")} | \nForEach-Object {\n\nI hope this helps, if you need me to provide more detail, then just let me know.\nBy the way the Quest Snapin cmdlets must be downloaded and installed, then you load the snapin itself.",
      "PostedDate": "2011-03-22T05:54:32.54",
      "LastModifiedDate": null,
      "SearchableText": "This is certainly possible, I would use teh Quest AD cmdlets for this and here is an example.\n\n$Root = 'Domain.org/Domain Controllers'  # This is the OU you want to search/monitor\n Add-PSSnapin \"Quest.ActiveRoles.ADManagement\" -EA 0     # Add the snapin\n Get-QADObject -SearchRoot $Root | Where-Object {$_.Type -eq \"Computer\"} |\n ForEach-Object {$_.Name} | \nForEach-Object {... The rest of the scrip goes here ...}\n\nYou will be replacing the following lines with the above code.\n$Servers | Where-Object {!($_ -match \"#\")} |  \n#\"test1\",\"test2\" | Where-Object {!($_ -match \"#\")} | \nForEach-Object {\n\nI hope this helps, if you need me to provide more detail, then just let me know.\nBy the way the Quest Snapin cmdlets must be downloaded and installed, then you load the snapin itself."
    },
    {
      "Thread": "Script modification",
      "Subject": null,
      "Text": "Hi D.Holland,\n\nThis script is a function so I would recommend that you run it from your favourite Powershell editor, rather that just from the command line, at least until you are familiar with it.\n\nI would recommend that you use the PowerShell ISE, that is part of Windows 7.\n\nSteps are:\n1) load the script into the editor and save it as a Start-Monitor.ps1 file.\n2) save your preferences in the parameter list for your mail server or other settings if you like and save the settings.\n3) execute the script or click F5 which will load the function. The ISE automatically dot sources the script into memory which enabled you to do this. If you were running it from a command line the process is slightly different. Long term if you like the function then you should load it as part of a module or a dot source is some way in your powershell profile.\n4) once the module is loaded you can then call it . . . Type in the script pane \"Start-Monitor\" you should be able to tab complete the cmdlet name and then also type in \"-\" and then tab to run through the parameters.\n5) The only important parameter you need is the ComputerName parameter. so it would look like start-monitor -computerName mytestcomputer\n6) then run it.\n\nPlease let me know how you go with that and then we can troubleshoot further if you are still having issues.\n\n7) Anyay i will say that it would be best to save your list of computers in a standard text file, NOT a ps1 file, since it is now powershell code, its just a test file.\n8) if you have a text file with the computers listed one on each line you can then call the function as follows:  Start-Monitor -computerName (get-content -path c:\\mos.txt)\n\nand that should be it.",
      "PostedDate": "2011-06-24T08:55:35",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script modification",
      "Subject": null,
      "Text": "Oh great, I hope you like it.\n",
      "PostedDate": "2011-06-24T09:02:16",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script modification",
      "Subject": null,
      "Text": "Aaah yeah I started using the script more interactively, so commented out some parts.\n\nOriginally I wrote it to monitor a large list of servers for uptime running on a scheduled task or continual cycle, so it should still work okay for that purpose as well, which is more likley where you would want to use the email notifications.\n\n: )",
      "PostedDate": "2011-06-24T10:02:51",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Not working for me",
      "Subject": null,
      "Text": "Hi Bucky,\n\nThat is a very good question that you asked and in simple terms as the script is right now it will not work against the local machine. The -credential paramatere of the Get-WmiObject does not support using the this when checking locally.\n\nThe simple thing to do it delete the part of the script that says:   -credential $Creds\n\nThe line will come: $CPU = Get-WmiObject -Class Win32_Processor -ComputerName $Server | ForEach-Object {\n\nYou can also delete or comment out the parameter part that shows: $Creds = (Cred -DomainA)\n\nI will post some more info below in another comment in regards to what Cred actually is.",
      "PostedDate": "2011-01-29T14:14:13.667",
      "LastModifiedDate": null,
      "SearchableText": "Hi Bucky,\n\nThat is a very good question that you asked and in simple terms as the script is right now it will not work against the local machine. The -credential paramatere of the Get-WmiObject does not support using the this when checking locally.\n\nThe simple thing to do it delete the part of the script that says:   -credential $Creds\n\nThe line will come: $CPU = Get-WmiObject -Class Win32_Processor -ComputerName $Server | ForEach-Object {\n\nYou can also delete or comment out the parameter part that shows: $Creds = (Cred -DomainA)\n\nI will post some more info below in another comment in regards to what Cred actually is."
    },
    {
      "Thread": "Not working for me",
      "Subject": null,
      "Text": "Okay I updated the code slightly to remove the Cred alias and put in the full cmdlet name Receive-Credential.\n\nI also added the link to the function in case you want to consider using it.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/en-us/2ff11fd5-67f6-44e4-8816-28edb984d63a \n\nI have the credentials parameter since I ofter have to query against remote domains, if this is not something you have to deal with then I would recommend as I did above to simply remove that part.",
      "PostedDate": "2011-01-29T14:19:02.12",
      "LastModifiedDate": null,
      "SearchableText": "Okay I updated the code slightly to remove the Cred alias and put in the full cmdlet name Receive-Credential.\n\nI also added the link to the function in case you want to consider using it.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/en-us/2ff11fd5-67f6-44e4-8816-28edb984d63a \n\nI have the credentials parameter since I ofter have to query against remote domains, if this is not something you have to deal with then I would recommend as I did above to simply remove that part."
    },
    {
      "Thread": "Not working for me",
      "Subject": null,
      "Text": "Apologies for saying your name incorrectly, BuckWoody.",
      "PostedDate": "2011-01-29T14:20:50.543",
      "LastModifiedDate": null,
      "SearchableText": "Apologies for saying your name incorrectly, BuckWoody."
    },
    {
      "Thread": "Not working for me",
      "Subject": null,
      "Text": "If you do want to query against other domains etc, you can simply replace the (Receive-Credential -DomainA) with (get-credential).",
      "PostedDate": "2011-01-29T14:23:07.647",
      "LastModifiedDate": null,
      "SearchableText": "If you do want to query against other domains etc, you can simply replace the (Receive-Credential -DomainA) with (get-credential)."
    },
    {
      "Thread": "A little help",
      "Subject": null,
      "Text": "If the have all of the groups in the same OU then this is a good script for you.\n\nThe first time you run the script so long as you set the $root correctly to point to that OU, also make sure the directories are setup correctly where the reports will go $dir, then it should create the configuration XML files for the current memberships. You will also receive the email notification that all of the members are NEW, because it has never seen them before.\n\nAlso make sure you have loaded the \"Quest.ActiveRoles.ADManagement\" snapin, which is probably the MOST important step here, since without that part installed and loaded nothing will work, since it cannot contact Active Directory at all.\n\nOkay now here is the important part of this script for your needs. It is best to call this script from another script that checks each of the Objects in the particular OU that you are wanting to Monitor.\n\nIt would look something like this:\n\n$Now = get-date -uformat \"%Y_%m\"\n$MonthlyLogFile = \"C:\\PS\\ADReport\\Logs\\ADReportLog_$Now.txt\"\n$Root = 'Domain.org/Domain Admins'  # This is the OU\nStart-Transcript -Path $MonthlyLogFile -Append -NoClobber\nAdd-PSSnapin \"Quest.ActiveRoles.ADManagement\" -EA 0\nGet-QADObject -SearchRoot $Root | Where-Object {$_.Type -eq \"group\"} |\nForEach-Object {$_.Name} | \nForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_}\nStop-Transcript\n",
      "PostedDate": "2011-02-04T10:18:17.367",
      "LastModifiedDate": null,
      "SearchableText": "If the have all of the groups in the same OU then this is a good script for you.\n\nThe first time you run the script so long as you set the $root correctly to point to that OU, also make sure the directories are setup correctly where the reports will go $dir, then it should create the configuration XML files for the current memberships. You will also receive the email notification that all of the members are NEW, because it has never seen them before.\n\nAlso make sure you have loaded the \"Quest.ActiveRoles.ADManagement\" snapin, which is probably the MOST important step here, since without that part installed and loaded nothing will work, since it cannot contact Active Directory at all.\n\nOkay now here is the important part of this script for your needs. It is best to call this script from another script that checks each of the Objects in the particular OU that you are wanting to Monitor.\n\nIt would look something like this:\n\n$Now = get-date -uformat \"%Y_%m\"\n$MonthlyLogFile = \"C:\\PS\\ADReport\\Logs\\ADReportLog_$Now.txt\"\n$Root = 'Domain.org/Domain Admins'  # This is the OU\nStart-Transcript -Path $MonthlyLogFile -Append -NoClobber\nAdd-PSSnapin \"Quest.ActiveRoles.ADManagement\" -EA 0\nGet-QADObject -SearchRoot $Root | Where-Object {$_.Type -eq \"group\"} |\nForEach-Object {$_.Name} | \nForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_}\nStop-Transcript\n"
    },
    {
      "Thread": "A little help",
      "Subject": null,
      "Text": "Please note that I updated the script with a modification: I used the incorrect term to load the pssnapin, so I updated that.",
      "PostedDate": "2011-02-04T10:19:23.403",
      "LastModifiedDate": null,
      "SearchableText": "Please note that I updated the script with a modification: I used the incorrect term to load the pssnapin, so I updated that."
    },
    {
      "Thread": "A little help",
      "Subject": null,
      "Text": "Actually I enabled the functionality in the original script to do more than one Group, however found it more useful to abstract it out to make the task of the script more simple/specific and I find this method very useful, so I hope it works for you.\n\np.s. If you want to do some work to enhance the reporting that would be good, since I think the basic compare-object report I am using is pretty basic  : )",
      "PostedDate": "2011-02-04T10:25:14.573",
      "LastModifiedDate": null,
      "SearchableText": "Actually I enabled the functionality in the original script to do more than one Group, however found it more useful to abstract it out to make the task of the script more simple/specific and I find this method very useful, so I hope it works for you.\n\np.s. If you want to do some work to enhance the reporting that would be good, since I think the basic compare-object report I am using is pretty basic  : )"
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "You need to replace the line \"ForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_}\"\nwith ForEach-Object {C:\\Pathtotheotherscript\\Nameoftheotherscriptfile.ps1 -g $_}\n\n",
      "PostedDate": "2011-02-04T11:02:08.153",
      "LastModifiedDate": null,
      "SearchableText": "You need to replace the line \"ForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_}\"\nwith ForEach-Object {C:\\Pathtotheotherscript\\Nameoftheotherscriptfile.ps1 -g $_}\n\n"
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "If you register the main script into a module then you can replace the path name with just the function name so long as the module is loaded.",
      "PostedDate": "2011-02-04T11:09:35.563",
      "LastModifiedDate": null,
      "SearchableText": "If you register the main script into a module then you can replace the path name with just the function name so long as the module is loaded."
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "Make sure you have specified the [String]$Root = 'Domain.org/Domain Admins',\ncorrectly.\n\nIt should point at the OU you are reviewing OR you can add this as a parameter when you call the main script from the other smaller script, although I prefer not to user parameters when the variable does not change and it is used as a scheduled task, since there is no real need to pass it.\n\nBut if you did the line would look like:\nForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_ -r 'Domain.org/Domain Admins'}\n\n\n\n",
      "PostedDate": "2011-02-04T11:48:12.107",
      "LastModifiedDate": null,
      "SearchableText": "Make sure you have specified the [String]$Root = 'Domain.org/Domain Admins',\ncorrectly.\n\nIt should point at the OU you are reviewing OR you can add this as a parameter when you call the main script from the other smaller script, although I prefer not to user parameters when the variable does not change and it is used as a scheduled task, since there is no real need to pass it.\n\nBut if you did the line would look like:\nForEach-Object {C:\\PS\\ADReport\\Get-ADGroupsReport.ps1 -g $_ -r 'Domain.org/Domain Admins'}\n\n\n\n"
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "Nice, glad to hears it's working. . .  feel free to forward any questions you have.",
      "PostedDate": "2011-02-05T07:29:41.743",
      "LastModifiedDate": null,
      "SearchableText": "Nice, glad to hears it's working. . .  feel free to forward any questions you have."
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "Yes the syntax is definitely correct.\n\nI have used a method called splatting for the email parameters.\n\n(Splatting is where) you set values in the hash table and the each of the fields represents a parameter of the Send-MailMessage cmdlet.\n\nIf there are any mistakes with those parameters it will not send.\n\nI suggest loading the script into a powershell editor (I use the ISE), then run each of the commands manually by highlighting the individual parts as you go and then check the values of each of the variables as you work your way towards the last part where you send the email. \n\nOr since the $body is the only value you will really end up having to check, just set it to some text value if you need to test sending or troubleshooting the sending of the email. E.g. $body = \"This is a test message\". Then just run the email snippet of the code.\n\nMake sure you have the attachment field commented out as I have or completely remove it, since it is not geting used in this script in the current format.\n\nSome other things to consider are: \n1) Make sure you have access to the SMTP mail server from where ever you are running the script from, you can test this by using the command prompt and testing: telnet relay.domain.org 25\nand then make sure you get a response.\n2) If this is running on a server that has antivirus software then make sure it does not block the SMTP traffic. Some antivirus solutions block the traffic since a fair amount of virus's send out spam email.\n\nLet me know how you go.\n",
      "PostedDate": "2011-02-05T16:12:12.363",
      "LastModifiedDate": null,
      "SearchableText": "Yes the syntax is definitely correct.\n\nI have used a method called splatting for the email parameters.\n\n(Splatting is where) you set values in the hash table and the each of the fields represents a parameter of the Send-MailMessage cmdlet.\n\nIf there are any mistakes with those parameters it will not send.\n\nI suggest loading the script into a powershell editor (I use the ISE), then run each of the commands manually by highlighting the individual parts as you go and then check the values of each of the variables as you work your way towards the last part where you send the email. \n\nOr since the $body is the only value you will really end up having to check, just set it to some text value if you need to test sending or troubleshooting the sending of the email. E.g. $body = \"This is a test message\". Then just run the email snippet of the code.\n\nMake sure you have the attachment field commented out as I have or completely remove it, since it is not geting used in this script in the current format.\n\nSome other things to consider are: \n1) Make sure you have access to the SMTP mail server from where ever you are running the script from, you can test this by using the command prompt and testing: telnet relay.domain.org 25\nand then make sure you get a response.\n2) If this is running on a server that has antivirus software then make sure it does not block the SMTP traffic. Some antivirus solutions block the traffic since a fair amount of virus's send out spam email.\n\nLet me know how you go.\n"
    },
    {
      "Thread": "Help",
      "Subject": null,
      "Text": "Yes that is exactly correct.\n\nThe idea is that you set the script to run on a scheduled task every 15 or 30 minutes.\n\nOnly if changes are detected in the group membership then i will send just the changes that have been made to a particular group by email. \n\nThat is that is the part where it says:\nif ($difference -ne $Null) \nand the $difference was the results of comparing the saved XML memberships with the live memberships.\n\nThe best way to test this will be to add a user to a group and run it. Then remove a user from a group and run it. OR what I normally do periodically is actually remove some of the user definitions from the XML file so i \"thinks\" that there is a new user since it never had the particular user that you delted and then reports that there is a new user.\n\nI hope this helps, feel free to let me know if you have any more questions.\n\n\n\n",
      "PostedDate": "2011-02-06T08:20:10.197",
      "LastModifiedDate": null,
      "SearchableText": "Yes that is exactly correct.\n\nThe idea is that you set the script to run on a scheduled task every 15 or 30 minutes.\n\nOnly if changes are detected in the group membership then i will send just the changes that have been made to a particular group by email. \n\nThat is that is the part where it says:\nif ($difference -ne $Null) \nand the $difference was the results of comparing the saved XML memberships with the live memberships.\n\nThe best way to test this will be to add a user to a group and run it. Then remove a user from a group and run it. OR what I normally do periodically is actually remove some of the user definitions from the XML file so i \"thinks\" that there is a new user since it never had the particular user that you delted and then reports that there is a new user.\n\nI hope this helps, feel free to let me know if you have any more questions.\n\n\n\n"
    },
    {
      "Thread": "What about against the local administrator group on servers",
      "Subject": null,
      "Text": "I have a script that checks local admin groups.\nhttp://gallery.technet.microsoft.com/scriptcenter/0322f44e-f9d9-4212-94b5-39a14fc2c4f6\n\nCurrently it returns a string from the query which is not helpful at all.\n\nI will re-write this and provide an update in the next day or so. Once I have re-written it to return an object then you can look to store the results in the XML file in a similar fashion to the Domain Groups script.",
      "PostedDate": "2011-02-07T08:17:24.17",
      "LastModifiedDate": null,
      "SearchableText": "I have a script that checks local admin groups.\nhttp://gallery.technet.microsoft.com/scriptcenter/0322f44e-f9d9-4212-94b5-39a14fc2c4f6\n\nCurrently it returns a string from the query which is not helpful at all.\n\nI will re-write this and provide an update in the next day or so. Once I have re-written it to return an object then you can look to store the results in the XML file in a similar fashion to the Domain Groups script."
    },
    {
      "Thread": "What about against the local administrator group on servers",
      "Subject": null,
      "Text": "I updated the script to produce objects rather than text.\nhttp://gallery.technet.microsoft.com/scriptcenter/ed4a0cb7-603c-488d-afeb-194b7a60f42f\n\nThat will allow the data to be exported to XML easily.\n\nNow I just have to write the next part to compare the saved XML to the current results of the information.\n\nI have been thinking about that part, however will probably now finish it on the weekend.",
      "PostedDate": "2011-02-10T06:36:41.603",
      "LastModifiedDate": null,
      "SearchableText": "I updated the script to produce objects rather than text.\nhttp://gallery.technet.microsoft.com/scriptcenter/ed4a0cb7-603c-488d-afeb-194b7a60f42f\n\nThat will allow the data to be exported to XML easily.\n\nNow I just have to write the next part to compare the saved XML to the current results of the information.\n\nI have been thinking about that part, however will probably now finish it on the weekend."
    },
    {
      "Thread": "What about against the local administrator group on servers",
      "Subject": null,
      "Text": "Okay it wrote this to monitor Local Groups.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/655180ff-6236-4718-8dee-0f5b9b4a1f06\n\nThe best way to run it as a scheduled task would probably be:\n.\\Get-ADLocalGroups.ps1 -Computers (gc C:\\ps\\computerlist.txt)\n\nOR just put:\n[Array]$Computers = (gc C:\\ps\\computerlist.txt)\nIn the parameter section in the script then you can just call the script without parameters.\n.\\Get-ADLocalGroups.ps1\n",
      "PostedDate": "2011-02-12T13:08:57.923",
      "LastModifiedDate": null,
      "SearchableText": "Okay it wrote this to monitor Local Groups.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/655180ff-6236-4718-8dee-0f5b9b4a1f06\n\nThe best way to run it as a scheduled task would probably be:\n.\\Get-ADLocalGroups.ps1 -Computers (gc C:\\ps\\computerlist.txt)\n\nOR just put:\n[Array]$Computers = (gc C:\\ps\\computerlist.txt)\nIn the parameter section in the script then you can just call the script without parameters.\n.\\Get-ADLocalGroups.ps1\n"
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "Okay glad you have given it a shot already.\n\nThe first things to test are:\n\n1) Run the script that does all of the work to get the local groups by itself.\nC:\\ps\\Get-LocalGroup.ps1 -Computers Computername123\nThen make sure it returns the response that you expect.\nMake sure you have permissions to run it against the remote machine.\n\n2) If that is working, then make sure you have the report directory created so that it can save the XML files and that you have permission to write to it.\n\n3) Make sure your Email settings are configured in the parameter section.\n\nIf you have checked that then please copy the output from the script back to me.",
      "PostedDate": "2011-02-13T09:06:17.78",
      "LastModifiedDate": null,
      "SearchableText": "Okay glad you have given it a shot already.\n\nThe first things to test are:\n\n1) Run the script that does all of the work to get the local groups by itself.\nC:\\ps\\Get-LocalGroup.ps1 -Computers Computername123\nThen make sure it returns the response that you expect.\nMake sure you have permissions to run it against the remote machine.\n\n2) If that is working, then make sure you have the report directory created so that it can save the XML files and that you have permission to write to it.\n\n3) Make sure your Email settings are configured in the parameter section.\n\nIf you have checked that then please copy the output from the script back to me."
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "Okay that is no problem I can see what is going on.\n\nYou see how the code is wrapped in the function?\n\nIn order to use a function you have to dot source the function into your current session.\n\nYou do that by:\n\n. C:\\ps\\Get-LocalGroup.ps1\n\nSee the dot, then the path to the function. After that when you call it, since the function is loaded in memory you just use the function name:\n\nGet-LocalGroup -Computers Computername123\n\nAlternatively just comment out the first and last lines to remove the inner script code from the function and then you can use it as you were.\n\nBy adding the part of the code that does the dot sourcing from many different scripts to a name.psm1 module file you can load all of the functions by simply loading the parent module. That is something to have a read on if you are not familiar.\n\n",
      "PostedDate": "2011-02-13T09:39:26.173",
      "LastModifiedDate": null,
      "SearchableText": "Okay that is no problem I can see what is going on.\n\nYou see how the code is wrapped in the function?\n\nIn order to use a function you have to dot source the function into your current session.\n\nYou do that by:\n\n. C:\\ps\\Get-LocalGroup.ps1\n\nSee the dot, then the path to the function. After that when you call it, since the function is loaded in memory you just use the function name:\n\nGet-LocalGroup -Computers Computername123\n\nAlternatively just comment out the first and last lines to remove the inner script code from the function and then you can use it as you were.\n\nBy adding the part of the code that does the dot sourcing from many different scripts to a name.psm1 module file you can load all of the functions by simply loading the parent module. That is something to have a read on if you are not familiar.\n\n"
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "So you checked the report directory is available as specified in the parameter list?\n\nWhat editor do you use? I use the ISE, so you can F9 to run the selected/highlighted part of the script, which is very useful for debugging.\n\nI suggest seeing what the value of: $LocalGroupMembership is after you have run the script OR just highlight and run that line and double check it's returning the expected result.\n\n",
      "PostedDate": "2011-02-13T10:05:11.357",
      "LastModifiedDate": null,
      "SearchableText": "So you checked the report directory is available as specified in the parameter list?\n\nWhat editor do you use? I use the ISE, so you can F9 to run the selected/highlighted part of the script, which is very useful for debugging.\n\nI suggest seeing what the value of: $LocalGroupMembership is after you have run the script OR just highlight and run that line and double check it's returning the expected result.\n\n"
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "Highlight and run each variable to see what values are.\n\nCurrently the value of File is null, so you need to run the part that creates the file variable. It is made up of the computername and the group you are querying.\n\nI am currently on a train to the countryside to go skiing, I'll probably check back in later this evening.\n",
      "PostedDate": "2011-02-13T10:27:50.433",
      "LastModifiedDate": null,
      "SearchableText": "Highlight and run each variable to see what values are.\n\nCurrently the value of File is null, so you need to run the part that creates the file variable. It is made up of the computername and the group you are querying.\n\nI am currently on a train to the countryside to go skiing, I'll probably check back in later this evening.\n"
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "I a opened up the ISE editor on a fresh computer.\n\nI copied the code from this script http://gallery.technet.microsoft.com/scriptcenter/ed4a0cb7-603c-488d-afeb-194b7a60f42f\n\nI removed the first and last lines by commenting them out.\nFirst line:\n#Function Get-LocalGroup(){\nLast line:\n#}#Get-LocalAdmin\n\nThen I saved the script to a totally new directory on this computer:\nD:\\ps\\get-localgroup.ps1\n\nThen I opened up the script from this article and copied and pasted it into a fresh page on the ISE editor (I did't save it).\n\nI updated the script to point to my local directory:\n    [String]$dir = \"D:\\PS\\\",\n\nThen I updated the single line of code as below to point to the other script.\n$LocalGroupMembership = D:\\ps\\get-localgroup.ps1 -Computers $Computer -LocalGroup $LocalGroup\n\nThen I ran it and it gave me the following output:\n\nNo Previous file was available to compare for Administrators on localhost\nThere are no changes in the Administrators group on localhost\nThere are no changes in the Administrators on localhost\n\nThen I ran it again and it gave me the following:\n\nThere are no changes in the Administrators group on localhost\nThere are no changes in the Administrators on localhost\n\nI checked the D:\\PS\\ directory and I see an XML file called: localhost_Administrators.xml\nWhen I open it up in notepad I see the groups specified in there.\n\nNow when I look at the ISE editor I am checking what each variable is currently set to:\n$AllChangesinMembership = $Null\n$Computers = localhost\n$computer = localhost\n$file = D:\\PS\\localhost_Administrators.xml\n$PreviousAccess = Administrator, brw\n$LocalGroupMembership =\nServer                                       Groups                                      \n------                                       ------                                      \nLOCALHOST                                    {Administrator, brw}\n\n$CurrentAccess = Administrator, brw\n$difference = $Null\n\nDoes this help at all? \nWhat do you get for the values of these variables?",
      "PostedDate": "2011-02-13T15:14:03.08",
      "LastModifiedDate": null,
      "SearchableText": "I a opened up the ISE editor on a fresh computer.\n\nI copied the code from this script http://gallery.technet.microsoft.com/scriptcenter/ed4a0cb7-603c-488d-afeb-194b7a60f42f\n\nI removed the first and last lines by commenting them out.\nFirst line:\n#Function Get-LocalGroup(){\nLast line:\n#}#Get-LocalAdmin\n\nThen I saved the script to a totally new directory on this computer:\nD:\\ps\\get-localgroup.ps1\n\nThen I opened up the script from this article and copied and pasted it into a fresh page on the ISE editor (I did't save it).\n\nI updated the script to point to my local directory:\n    [String]$dir = \"D:\\PS\\\",\n\nThen I updated the single line of code as below to point to the other script.\n$LocalGroupMembership = D:\\ps\\get-localgroup.ps1 -Computers $Computer -LocalGroup $LocalGroup\n\nThen I ran it and it gave me the following output:\n\nNo Previous file was available to compare for Administrators on localhost\nThere are no changes in the Administrators group on localhost\nThere are no changes in the Administrators on localhost\n\nThen I ran it again and it gave me the following:\n\nThere are no changes in the Administrators group on localhost\nThere are no changes in the Administrators on localhost\n\nI checked the D:\\PS\\ directory and I see an XML file called: localhost_Administrators.xml\nWhen I open it up in notepad I see the groups specified in there.\n\nNow when I look at the ISE editor I am checking what each variable is currently set to:\n$AllChangesinMembership = $Null\n$Computers = localhost\n$computer = localhost\n$file = D:\\PS\\localhost_Administrators.xml\n$PreviousAccess = Administrator, brw\n$LocalGroupMembership =\nServer                                       Groups                                      \n------                                       ------                                      \nLOCALHOST                                    {Administrator, brw}\n\n$CurrentAccess = Administrator, brw\n$difference = $Null\n\nDoes this help at all? \nWhat do you get for the values of these variables?"
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "Aah good to hear.\n\nIf you have a better style sheet you can send it to me  : )\n\nDoes your email report look like the table in the description? I could not paste in the full style sheet so you would have to edit that part slightly as I described.",
      "PostedDate": "2011-02-13T17:12:46.45",
      "LastModifiedDate": null,
      "SearchableText": "Aah good to hear.\n\nIf you have a better style sheet you can send it to me  : )\n\nDoes your email report look like the table in the description? I could not paste in the full style sheet so you would have to edit that part slightly as I described."
    },
    {
      "Thread": "Not pulling any of the members",
      "Subject": null,
      "Text": "I put a bit more effort into that report compared to the basic one for the domain groups reporting, I probably should update that one. If I do I will send you a note.",
      "PostedDate": "2011-02-14T05:59:00.547",
      "LastModifiedDate": null,
      "SearchableText": "I put a bit more effort into that report compared to the basic one for the domain groups reporting, I probably should update that one. If I do I will send you a note."
    },
    {
      "Thread": "Nice script, very useful for me",
      "Subject": null,
      "Text": "I did the following.\r\n\r\nCreated a file called install_updates.cmd\r\n\r\nIn that command file I put one single line to call your script.\r\n\r\nPowershell.exe -noprofile -executionpolicy Bypass \\\\server\\Path\\Get-WUInstall.ps1\r\n\r\nI also updated your script to include the call to the function by putting the following in the script\r\n\r\nGet-WUInstall -all\r\n\r\nWorks like a treat. . . thanks again.\r\n\r\n",
      "PostedDate": "2011-03-31T19:20:17.363",
      "LastModifiedDate": null,
      "SearchableText": "I did the following.Created a file called install_updates.cmdIn that command file I put one single line to call your script.Powershell.exe -noprofile -executionpolicy Bypass \\\\server\\Path\\Get-WUInstall.ps1I also updated your script to include the call to the function by putting the following in the scriptGet-WUInstall -allWorks like a treat. . . thanks again."
    },
    {
      "Thread": "Nice script, very useful for me",
      "Subject": null,
      "Text": "Then i just copy the UNC path into a cmd prompt on the server and press enter:\n\n\\\\server\\Path\\install_updatesâ.cmd   <Enter>",
      "PostedDate": "2011-03-31T19:21:30.073",
      "LastModifiedDate": null,
      "SearchableText": "Then i just copy the UNC path into a cmd prompt on the server and press enter:\n\n\\\\server\\Path\\install_updatesâ.cmd   "
    },
    {
      "Thread": "Get-DomainControllers",
      "Subject": null,
      "Text": "HI There,\n\nI am really sorry, i must have forgotten to upload it.\n\nNow it is uploaded here:\n\nhttp://gallery.technet.microsoft.com/scriptcenter/b2547a5b-39d9-48ce-b6e2-bf4c452b1993\n\nLet me know how you go.",
      "PostedDate": "2011-06-08T23:54:33",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Get-DomainControllers",
      "Subject": null,
      "Text": "I updates the post with the correct link now as well.\n\nThank you for pointing this out : )",
      "PostedDate": "2011-06-08T23:57:05",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Little Help",
      "Subject": null,
      "Text": "Hello JKessenich,\n\nDid you ever get this thing off the ground?",
      "PostedDate": "2011-02-26T10:19:25.45",
      "LastModifiedDate": null,
      "SearchableText": "Hello JKessenich,\n\nDid you ever get this thing off the ground?"
    },
    {
      "Thread": "Little Help",
      "Subject": null,
      "Text": "Yes of course.\n\nFirst set your $Homedir and specify this in the parameters OR just leave it as it is:\nWhich means you create the following directories:\n$HomeDir = \"C:\\PS\\AccountLockout\",\n\nIf you use that directory then you need to also create the two subdirectories:\nC:\\PS\\AccountLockout\\Tools\nC:\\PS\\AccountLockout\\Logs\n\nIn the script these are specified in these parts.\n$Homedir\\Tools\\eventcombMT.exe   <--- This is where the Lockout tools sit, you just need eventcombMT.exe\n$HomeDir\\Logs  <-- This is where the logs will be put.\n\nThere is a line in the script as follows:\n$DC1,$DC2 = (Get-BadPasswordtime -User $Account)[0..1] | % {($_.DomainController -split \"\\.\")[0]}\n\nYou need to download that other script \"Get-BadPasswordTime\" and register that in a module OR simply put that other script in the same directory and call it from there, then you will update that line to:\n$DC1,$DC2 = ($HomeDir\\Get-BadPasswordtime.ps1 -User $Account)[0..1] | % {($_.DomainController -split \"\\.\")\n[0]}\n\nRemember you need to also download and install the Quest tool and load the snapin as well. You can use this line to add the snappin:\nAdd-PSSnapin Quest.ActiveRoles.ADManagement -EA 0\n\nOnce the snapin is loaded you should be able to run the following script as a standalone script:\n$HomeDir = \"C:\\PS\\AccountLockout\"\n$Account = \"someuser\"\n$HomeDir\\Get-BadPasswordtime.ps1 -User $Account\n\nOnce that is setup you should be ready to go, however hit me up with more questions once you get to that part.\n",
      "PostedDate": "2011-02-16T12:22:24.723",
      "LastModifiedDate": null,
      "SearchableText": "Yes of course.\n\nFirst set your $Homedir and specify this in the parameters OR just leave it as it is:\nWhich means you create the following directories:\n$HomeDir = \"C:\\PS\\AccountLockout\",\n\nIf you use that directory then you need to also create the two subdirectories:\nC:\\PS\\AccountLockout\\Tools\nC:\\PS\\AccountLockout\\Logs\n\nIn the script these are specified in these parts.\n$Homedir\\Tools\\eventcombMT.exe   <--- This is where the Lockout tools sit, you just need eventcombMT.exe\n$HomeDir\\Logs  <-- This is where the logs will be put.\n\nThere is a line in the script as follows:\n$DC1,$DC2 = (Get-BadPasswordtime -User $Account)[0..1] | % {($_.DomainController -split \"\\.\")[0]}\n\nYou need to download that other script \"Get-BadPasswordTime\" and register that in a module OR simply put that other script in the same directory and call it from there, then you will update that line to:\n$DC1,$DC2 = ($HomeDir\\Get-BadPasswordtime.ps1 -User $Account)[0..1] | % {($_.DomainController -split \"\\.\")\n[0]}\n\nRemember you need to also download and install the Quest tool and load the snapin as well. You can use this line to add the snappin:\nAdd-PSSnapin Quest.ActiveRoles.ADManagement -EA 0\n\nOnce the snapin is loaded you should be able to run the following script as a standalone script:\n$HomeDir = \"C:\\PS\\AccountLockout\"\n$Account = \"someuser\"\n$HomeDir\\Get-BadPasswordtime.ps1 -User $Account\n\nOnce that is setup you should be ready to go, however hit me up with more questions once you get to that part.\n"
    },
    {
      "Thread": "Little Help",
      "Subject": null,
      "Text": "Just saw your second post.\n\nPlease run Get-executionpolicy and see what it returns?\n\nThen you should run Set-ExectionPolicy 1\n\nThen run Get-executionpolicy and see what it returns?\nIt should say: RemoteSigned\n\nThen you should be ready to go, since you are copying this code into your own new script files.",
      "PostedDate": "2011-02-16T12:24:31.03",
      "LastModifiedDate": null,
      "SearchableText": "Just saw your second post.\n\nPlease run Get-executionpolicy and see what it returns?\n\nThen you should run Set-ExectionPolicy 1\n\nThen run Get-executionpolicy and see what it returns?\nIt should say: RemoteSigned\n\nThen you should be ready to go, since you are copying this code into your own new script files."
    },
    {
      "Thread": "Another way to do the same thing",
      "Subject": null,
      "Text": "Okay one more thing, you know how you used the original \"format-table -autosize\" in the second line of your script?! Well it is still a great tool to use the Format-Table, however make sure it is always in the very last line of your script or of the Pipeline.\n\nE.g. (adding on from what was already there)\nGet-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path} | folder-size | Sort-Object \"Folder Size\" | format-table -autosize\n\nOf course if you are using the | Export-Csv C:\\FldrSize.csv as your did it is not needed at all.\n",
      "PostedDate": "2011-03-26T09:31:33.567",
      "LastModifiedDate": null,
      "SearchableText": "Okay one more thing, you know how you used the original \"format-table -autosize\" in the second line of your script?! Well it is still a great tool to use the Format-Table, however make sure it is always in the very last line of your script or of the Pipeline.\n\nE.g. (adding on from what was already there)\nGet-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path} | folder-size | Sort-Object \"Folder Size\" | format-table -autosize\n\nOf course if you are using the | Export-Csv C:\\FldrSize.csv as your did it is not needed at all.\n"
    },
    {
      "Thread": "Another way to do the same thing",
      "Subject": null,
      "Text": "Just read this again and realized I was incorrect and the values still get saved in example 2) however the point was still the same and if you run $Result | get-member you will see the results are chopped up by the formatting of the table.\n\nDo the same thing with the toher results and you see the clean data.",
      "PostedDate": "2011-03-27T06:14:21.337",
      "LastModifiedDate": null,
      "SearchableText": "Just read this again and realized I was incorrect and the values still get saved in example 2) however the point was still the same and if you run $Result | get-member you will see the results are chopped up by the formatting of the table.\n\nDo the same thing with the toher results and you see the clean data."
    },
    {
      "Thread": "Another way to do the same thing",
      "Subject": null,
      "Text": "Hi Adam,\r\n\r\nI noticed a few of your recent posts.\r\n\r\nFirst of all, good to see your posts on the repository.\r\n\r\nI have a few tips I wanted to share that can help with your scripting.\r\n\r\nRather than using the Out-File and Get-Content to manipulate the text results that you got back from the Get-WmiObject, use a different method.\r\n\r\nThe secret is to NEVER use \"format-table\", since it turns the Object into Text.\r\n\r\nYou could test using the following pipeline to achieve the same thing.\r\n\r\nGet-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path}\r\n\r\nAlso have a play around with the following examples:\r\n\r\n1)Your original way\r\n$Result = Get-WmiObject -Class Win32_Share | select path | format-table -autosize\r\n$Result\r\nSee how nothing is saved to the $Result value? That is because when you used the Format-Table it turned the response into a String and outputed the result to the screen.\r\n\r\n2) The other way\r\n$Result = Get-WmiObject -Class Win32_Share | select path\r\n$Result\r\nSee how the Path was saved to the $Result value? This is very useful.\r\n\r\n3) Consider this\r\n$Result = Get-WmiObject -Class Win32_Share\r\n$Result\r\nSee how all of the values are saved to the $Result? This is useful, since now we can filter or grab the information from the $Result value later.\r\nE.g.\r\n$Result | select Path, Name\r\n$Result | select Path\r\n$Result | Foreach-Object {$_.Path}\r\n\r\nBy doing this you really discover the Power of the Object, which is how you end up with my suggested single line to filter discover the information that you can feed into your \"folder-size\" function.\r\n\r\nGet-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path} | folder-size | Sort-Object \"Folder Size\" | Export-Csv C:\\FldrSize.csv\r\n\r\nThe only other comment would be a personal recommendation, which would be to not use spaces in the noteproperty values.\r\nE.g.\r\nChange \"Folder Size\" to \"FolderSize\".\r\nThat will be particularly useful down the track.",
      "PostedDate": "2011-03-26T09:30:40.717",
      "LastModifiedDate": null,
      "SearchableText": "Hi Adam,I noticed a few of your recent posts.First of all, good to see your posts on the repository.I have a few tips I wanted to share that can help with your scripting.Rather than using the Out-File and Get-Content to manipulate the text results that you got back from the Get-WmiObject, use a different method.The secret is to NEVER use \"format-table\", since it turns the Object into Text.You could test using the following pipeline to achieve the same thing.Get-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path}Also have a play around with the following examples:1)Your original way$Result = Get-WmiObject -Class Win32_Share | select path | format-table -autosize$ResultSee how nothing is saved to the $Result value? That is because when you used the Format-Table it turned the response into a String and outputed the result to the screen.2) The other way$Result = Get-WmiObject -Class Win32_Share | select path$ResultSee how the Path was saved to the $Result value? This is very useful.3) Consider this$Result = Get-WmiObject -Class Win32_Share$ResultSee how all of the values are saved to the $Result? This is useful, since now we can filter or grab the information from the $Result value later.E.g.$Result | select Path, Name$Result | select Path$Result | Foreach-Object {$_.Path}By doing this you really discover the Power of the Object, which is how you end up with my suggested single line to filter discover the information that you can feed into your \"folder-size\" function.Get-WmiObject -Class Win32_Share | where {($_.Path).length -gt 3} | foreach {$_.path} | folder-size | Sort-Object \"Folder Size\" | Export-Csv C:\\FldrSize.csvThe only other comment would be a personal recommendation, which would be to not use spaces in the noteproperty values.E.g.Change \"Folder Size\" to \"FolderSize\".That will be particularly useful down the track."
    },
    {
      "Thread": "The easy way",
      "Subject": null,
      "Text": "Can you run that against the remote machine?",
      "PostedDate": "2011-04-05T14:14:01.603",
      "LastModifiedDate": null,
      "SearchableText": "Can you run that against the remote machine?"
    },
    {
      "Thread": "The easy way",
      "Subject": null,
      "Text": "Hi \"thezim\"\n\nThank you for your suggestion, when I wrote this I knew there was another method, however did not think of it at the time.\n\nMainly I call this script from other scripts, so just wanted the object returned.\n\nI would definitely feel comfortable re-writing this to your your method and i would still return the same psobejct with the Hostname ",
      "PostedDate": "2011-03-29T11:10:15.693",
      "LastModifiedDate": null,
      "SearchableText": "Hi \"thezim\"\n\nThank you for your suggestion, when I wrote this I knew there was another method, however did not think of it at the time.\n\nMainly I call this script from other scripts, so just wanted the object returned.\n\nI would definitely feel comfortable re-writing this to your your method and i would still return the same psobejct with the Hostname "
    },
    {
      "Thread": "The easy way",
      "Subject": null,
      "Text": "hmm half of my post was cut off. . . . anyway.\n\nWhy don't you have any script shared on the repository?",
      "PostedDate": "2011-03-29T11:11:21.663",
      "LastModifiedDate": null,
      "SearchableText": "hmm half of my post was cut off. . . . anyway.\n\nWhy don't you have any script shared on the repository?"
    },
    {
      "Thread": "Good technique",
      "Subject": null,
      "Text": "Now noticed that you were looking for the number of unique items:\n\n($csvInfo | foreach {$_.task} | Get-Unique).count",
      "PostedDate": "2011-03-26T11:35:37.67",
      "LastModifiedDate": null,
      "SearchableText": "Now noticed that you were looking for the number of unique items:\n\n($csvInfo | foreach {$_.task} | Get-Unique).count"
    },
    {
      "Thread": "Good technique",
      "Subject": null,
      "Text": "Hi Adam.\r\n\r\nI have been checking your posts and trying out the examples, thank you.\r\n\r\nHere are some more examples:\r\n\r\nI have this CSV file called C:\\ps\\tasks2.csv\r\nThe file contains the following:\r\n\r\nPriority,ToDoListName,Task\r\nhigh,housework,Clean the house.\r\nmedium,housework,Wash the dishes.\r\nmedium,housework,Buy more soap. \r\n\r\nI import the details:\r\n$csvInfo = Import-Csv -Path D:\\ps\\tasks2.csv\r\n\r\nI view the column I want, called Task\r\n$csvInfo | select Task\r\n\r\nI want to just get the values of the Task column\r\n$csvInfo | foreach {$_.task}\r\n\r\nThen I want to save those items in a file\r\n$csvInfo | foreach {$_.task} | Out-File -FilePath D:\\ps\\Tasks.txt\r\n",
      "PostedDate": "2011-03-26T09:50:01.483",
      "LastModifiedDate": null,
      "SearchableText": "Hi Adam.I have been checking your posts and trying out the examples, thank you.Here are some more examples:I have this CSV file called C:\\ps\\tasks2.csvThe file contains the following:Priority,ToDoListName,Taskhigh,housework,Clean the house.medium,housework,Wash the dishes.medium,housework,Buy more soap. I import the details:$csvInfo = Import-Csv -Path D:\\ps\\tasks2.csvI view the column I want, called Task$csvInfo | select TaskI want to just get the values of the Task column$csvInfo | foreach {$_.task}Then I want to save those items in a file$csvInfo | foreach {$_.task} | Out-File -FilePath D:\\ps\\Tasks.txt"
    },
    {
      "Thread": "Good technique",
      "Subject": null,
      "Text": "Probably should put this in as well.\n\nIf you want to get the total items.\n$csvInfo.count",
      "PostedDate": "2011-03-26T09:53:13.967",
      "LastModifiedDate": null,
      "SearchableText": "Probably should put this in as well.\n\nIf you want to get the total items.\n$csvInfo.count"
    },
    {
      "Thread": "Integration with VBScript/PS --",
      "Subject": null,
      "Text": "My example just happened to be with a Get-ChildItem which is the PowerShell version of the Dir command.\n\nIf you use my example and expand on it then that should solve your problem.\n\n- You can see I specify the Direcory to search\n- I use the recurse switch to get subdirectories as well\n- I specify the default headings to select for the report\n- I sort the table by the size of the files (from largest to smallest)\n\n$Directory = \"C:\\PS\"\n$FileInfo = Get-ChildItem -Path $Directory -Recurse | Select-Object Name, Length, LastWriteTime, Mode | sort Length -Descending\nSend-HTMLEmail -InputObject $FileInfo -To User@domain.org -Subject \"Directory Information\"\n\nPlease give that a try and if you need any more modifications or suggestions please feel free to let me know.",
      "PostedDate": "2011-04-01T21:51:10.643",
      "LastModifiedDate": null,
      "SearchableText": "My example just happened to be with a Get-ChildItem which is the PowerShell version of the Dir command.\n\nIf you use my example and expand on it then that should solve your problem.\n\n- You can see I specify the Direcory to search\n- I use the recurse switch to get subdirectories as well\n- I specify the default headings to select for the report\n- I sort the table by the size of the files (from largest to smallest)\n\n$Directory = \"C:\\PS\"\n$FileInfo = Get-ChildItem -Path $Directory -Recurse | Select-Object Name, Length, LastWriteTime, Mode | sort Length -Descending\nSend-HTMLEmail -InputObject $FileInfo -To User@domain.org -Subject \"Directory Information\"\n\nPlease give that a try and if you need any more modifications or suggestions please feel free to let me know."
    },
    {
      "Thread": "Pipeline processing vs Parameter",
      "Subject": null,
      "Text": "Jeff, thank you for taking the time to respond.\n\nI really appreciate it.",
      "PostedDate": "2011-04-03T20:48:08.76",
      "LastModifiedDate": null,
      "SearchableText": "Jeff, thank you for taking the time to respond.\n\nI really appreciate it."
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "I am not too sure about that, I tested and could not replicate your issue.\n\nTest with this:\n(Get-WmiObject -class win32_process -ComputerName ServerName) | \nforeach {new-object psobject -pro @{desc=$_.Description;own=$_.GetOwner().User}}\n\nWhen i log onto a 64 bit server by RDP and run the code above I see around 8 processes running under my account. When I launch Notepad.exe I also see that.\n\nI even launched notepad from: C:\\Windows\\SysWOW64\nand C:\\Windows\\System32\nBoth processes were visible.\n\nI presume your users logged on locally? They must literally be running nothing at the time? Even if they opened explorer.exe to launch a notepad it would show up.\n\nAre you sure you are pointing it at the correct machine name/DNS name/IP address?\n\nMaybe WMI is broken on the machine? (using the single line above will tell you if wmi is working or not).\n",
      "PostedDate": "2011-05-21T17:15:01",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "So you are sorted now?",
      "PostedDate": "2011-05-21T18:15:26",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "Thank you for the feedback I am glad you like it.",
      "PostedDate": "2011-05-06T07:22:16.843",
      "LastModifiedDate": null,
      "SearchableText": "Thank you for the feedback I am glad you like it."
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "Xav,\n\nI use a module by @ShayLevy for managing TS Sessions called PSTerminalServices module.\n\nThere is a good blog post about how to use it here:\n\nhttp://blogs.microsoft.co.il/blogs/scriptfanatic/archive/2010/02/22/psterminalservices-powershell-module-for-terminal-services.aspx\n\nI don't believe you could disconnect or manage desktops using that module, just servers, since it leverages the terminal services processes which do not run on a single session such as that on a workstation.\n\nI really love that module, I even wrote a post on using the module to test Terminal Server Session counts and also provide a metric similar to a round trip time of the server to give a guide as to the utlization on the server. I actually run it every 30 minutes in my environment on a scheduled task, so that I can see in an email how the Terminal Servers are load balanced at regular intervals throughout the day and often I can spot of there is a problem on a server with and incorrect number of sessions or an incorrect load in relation to that number of users.\n\nThere are two scripts that I use for this, one calls the other\n\nBaseline Citrix Performance Testing Script:\nhttp://gallery.technet.microsoft.com/scriptcenter/1f7e8c1b-6e90-437a-bcd1-828f1064bfb3\n\nReport Citrix Load Balancing and Performance by email:\nhttp://gallery.technet.microsoft.com/scriptcenter/1f7e8c1b-6e90-437a-bcd1-828f1064bfb3\n",
      "PostedDate": "2011-05-07T15:49:15.143",
      "LastModifiedDate": null,
      "SearchableText": "Xav,\n\nI use a module by @ShayLevy for managing TS Sessions called PSTerminalServices module.\n\nThere is a good blog post about how to use it here:\n\nhttp://blogs.microsoft.co.il/blogs/scriptfanatic/archive/2010/02/22/psterminalservices-powershell-module-for-terminal-services.aspx\n\nI don't believe you could disconnect or manage desktops using that module, just servers, since it leverages the terminal services processes which do not run on a single session such as that on a workstation.\n\nI really love that module, I even wrote a post on using the module to test Terminal Server Session counts and also provide a metric similar to a round trip time of the server to give a guide as to the utlization on the server. I actually run it every 30 minutes in my environment on a scheduled task, so that I can see in an email how the Terminal Servers are load balanced at regular intervals throughout the day and often I can spot of there is a problem on a server with and incorrect number of sessions or an incorrect load in relation to that number of users.\n\nThere are two scripts that I use for this, one calls the other\n\nBaseline Citrix Performance Testing Script:\nhttp://gallery.technet.microsoft.com/scriptcenter/1f7e8c1b-6e90-437a-bcd1-828f1064bfb3\n\nReport Citrix Load Balancing and Performance by email:\nhttp://gallery.technet.microsoft.com/scriptcenter/1f7e8c1b-6e90-437a-bcd1-828f1064bfb3\n"
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "Hmm I could even be wrong about the desktop thing, since it says supported on Windows XP.",
      "PostedDate": "2011-05-07T15:57:29.213",
      "LastModifiedDate": null,
      "SearchableText": "Hmm I could even be wrong about the desktop thing, since it says supported on Windows XP."
    },
    {
      "Thread": "Thanks!",
      "Subject": null,
      "Text": "Aleks,\nThanks to you I used [String[]]$ComputerName, rather than [Array]$Computers for the first time on this script.\n\nI still have about 50 scripts on here to update with that change.\n\nI will also have to update my Verb-SingluarNoun function names  : )\n(I will at least update this one straight away.)\n\nI have now tested the script on Server 2000 and can confirm it works : D\n\nThanks your, feedback is awesome.\n",
      "PostedDate": "2011-05-07T19:38:02.44",
      "LastModifiedDate": null,
      "SearchableText": "Aleks,\nThanks to you I used [String[]]$ComputerName, rather than [Array]$Computers for the first time on this script.\n\nI still have about 50 scripts on here to update with that change.\n\nI will also have to update my Verb-SingluarNoun function names  : )\n(I will at least update this one straight away.)\n\nI have now tested the script on Server 2000 and can confirm it works : D\n\nThanks your, feedback is awesome.\n"
    },
    {
      "Thread": "Make source code downloadable/copyable please",
      "Subject": null,
      "Text": "Yeah for some reason the way you added your code was strange.\n\nYou should be able to add the code to a special sectiona and also specify that it is PowerShell code.\n",
      "PostedDate": "2011-05-18T21:41:42",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Multiple PCs",
      "Subject": null,
      "Text": "You were close, however the ComputerName expects a string array. To get this you need to use the get-content cmdlet first to get the contents of the file (one computer per line). The end result will be: Get-LoggedOnUseâr -ComputerName (get-content c:\\pcs.txt)",
      "PostedDate": "2011-08-17T16:44:50",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Ninite",
      "Subject": null,
      "Text": "Nifty, I had not seen that before. I'll have to give it a test run.",
      "PostedDate": "2011-09-13T14:55:57.127",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "It's fine, we will be able to make this work for you. There is a term called dot sourcing. It means that you invoke a script (which is a file with code in it saved with a .ps1 extension). In order to dot source the format is a single . and then a space and then the full path to the script that you want to invoke. Unfortunately the formatting in this particular technet gallery does not really allow me to easily show you what the dot source looks like, however please look above on the post \"Written December 06, 2011\". You can see a single dot . and then a space and then the full path to the script file C:\\scripts\\Get-ââVolumeWin32â.pâsâ1. You need to do the same thing with your file. After you do that then you can go to the powershell prompt (shell) and type the name of the function which is this case is Get-ââVolumeWin32. I always just type the first part such as Get-Volu and then I tab complete the rest. If the dot sourcing above worked, then the funtion will have been loaded into memory and then you can tab complete as well. Once that is done then you can actually use the script as you want to which was the other post above written on Written December 06, 2011. Get-VolumeWin32âââ (Get-Content C:\\Scripts\\compâââuters.txt) | Export-Csv -Path C:\\scripts\\VoluâââmeInfo.csv -NoTypeInformatâââion ",
      "PostedDate": "2011-12-14T09:01:28.163",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "This script is a function, so you have to load it first. Try this . . \n# This will load the function ready or use (and returns no output)\n. C:\\scripts\\Get-VolumeWin32â.ps1\n# Then all the function that is defined within the module called: Get-VolumeWin32\nGet-VolumeWin32â (Get-Content C:\\Scripts\\compâuters.txt) | Export-Csv -Path C:\\scripts\\VoluâmeInfo.csv -NoTypeInformatâion",
      "PostedDate": "2011-12-06T15:04:52.27",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": ". C:\\scripts\\Get-âVolumeWin32â.psâ1",
      "PostedDate": "2011-12-06T15:05:34.293",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "Get-VolumeWin32ââ (Get-Content C:\\Scripts\\compââuters.txt) | Export-Csv -Path C:\\scripts\\VoluââmeInfo.csv -NoTypeInformatââion",
      "PostedDate": "2011-12-06T15:06:07.15",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "Sorry the formatting makes it hard to ready, so I put the two lines that you need to run above. The first loads the function, the second calls the function. Notice when you load it you use the full path to the file that contains the funtion including the .ps1 extenstion. When you call the function you only put the function name (without any requirement or association to the file name OR th .ps1 extenstion), since you are calling it from memory.",
      "PostedDate": "2011-12-06T15:08:00.497",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "hi Satish, sure I can. Step 1) copy the script or download the file and save it to a location such as C:\\PS\\Disk\\Get-VolumeWin32.ps1  2) Execute the script to load the function within the script into memory E.g.  in the PS console run . C:\\PS\\Disk\\Get-VolumeWin32.ps1  OR if you are in the directory E.g. cd C:\\PS\\Disk, then just run   . .\\Get-VolumeWin32.ps1 3) The dot before the path to the script invokes the file and loads the function within the file into memory so that you can call it, so next you can just use the function name that you see in the code E.g.  Get-VolumeWin32 serverpvm001 | ft -AutoSize  OR  Get-VolumeWin32 server123,Server456 | Export-Csv -Path C:\\PS\\VolumeInfo.csv -NoTypeInformation Let me know how you go? The long term way to use the function is to load it into a module, then either load the module at startup in your PowerShell profile or load the module when you need it.",
      "PostedDate": "2011-11-04T19:10:36.81",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding Get-QADUser to the Available Host after the Computer Name",
      "Subject": null,
      "Text": "I will need to take some more time (hopefully over the weekend) to understand your requirement. However in the meantime maybe you can leverage this function for your needs: http://gallery.technet.microsoft.com/scriptcenter/d46b1f3b-36a4-4a56-951b-e37815a2df0c",
      "PostedDate": "2011-11-17T09:59:31.337",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "specific ou",
      "Subject": null,
      "Text": "When you say cant use .... What is your limitation? These scripts run remotely from an external machine, which could be server or desktop. You don't need to install anything on the directory servers for this.",
      "PostedDate": "2011-12-06T14:59:58.1",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "specific ou",
      "Subject": null,
      "Text": "Here is the send-htmlemail function: http://gallery.technet.microsoft.com/scriptcenter/bd0c8d87-466f-4488-92a2-0f726cb6f4cd\nLoad it in your profile so that you can call it anytime.",
      "PostedDate": "2011-12-09T17:11:15.687",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email Function not working",
      "Subject": null,
      "Text": "Hi @KHabershon,\nThe email function is totally independent so you can test that it is working outside of the other script.\nHowever because it is a function you will need to dot source the script into memory before running it.\nThe . and then the path to the file will load the function.\n. C:\\ps\\functions\\Send-HtmlEmail.âps1\nThen try call the function:\n# First save the services to the variable\n$Services = (get-service w* | where {$_.Status -eq \"running\"})\n# Then confirm the variable contains the info you wanted\n$Services\n# Then test the function\nSend-HtmlEmail -InputObject $Services -Subject \"Services\"\nHow did that go?",
      "PostedDate": "2012-03-30T16:41:10.773",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Where should the cmdlet \"Get-UserLogonInformation\" come from?",
      "Subject": null,
      "Text": "Hi Steve,\nI am not sure why the link may not work, since the link in the Description works okay when I just tested it.\nThis is the link: http://gallery.technet.microsoft.com/scriptcenter/Find-User-Logon-Information-5806f3b4 \nLet me know how that goes?",
      "PostedDate": "2012-03-30T16:43:08.247",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Where should the cmdlet \"Get-UserLogonInformation\" come from?",
      "Subject": null,
      "Text": "For some reason I had not published it, however you can try again now.",
      "PostedDate": "2012-05-02T03:56:34.53",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output",
      "Subject": null,
      "Text": "When you call mbsacli you can specify for the /xmlout\n\n* This script does not leverage that.\n\nMBSACLI /xmlout /catalog c:\\temp\\wsusscn2.cab /unicode >results.xml\n\nI wrote this a couple of years ago now, would probably have been worth using XML.\n\nI will keep it in mind to do an update. . . sometime in the future. I know more now than I did two years ago  : )",
      "PostedDate": "2012-04-19T08:41:08.977",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output",
      "Subject": null,
      "Text": "run:\n\nMBSACLI /?",
      "PostedDate": "2012-04-19T08:42:35.263",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "checking for Weak Passwords ",
      "Subject": null,
      "Text": "There is a particular line in the script as follows:\n$cmd = âcmd /c mbsacli /listfile \"\"$Hosts\"\" /n OS+SQL+IIS+Passwordâ\n\nBasically when calling the mfsacli tool you specify with the /n switch which section NOT TO RUN.\n\nYou would need to update this to:\n$cmd = âcmd /c mbsacli /listfile \"\"$Hosts\"\" /n OS+SQL+IIS+Updatesâ\n\n* However once you invoke this and get the results in $ReportDetails you will have all of the password results and this will totally break the script as it stands since it just parses the text that is returned from the mbsacli.\n\nHowever it should not take too much effort to rewrite that section to get what you need.\n",
      "PostedDate": "2012-04-22T10:15:12.947",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Suggestions",
      "Subject": null,
      "Text": "Hi Steve,\n\nthanks for the feedback.\n\nI will have to spin this one up and take a look at your suggestions and do some updates.\n\n",
      "PostedDate": "2012-05-05T10:01:43.81",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Help with email function",
      "Subject": null,
      "Text": "once you have run the script can you then check the content of the variables: $difference and $differenceObject ?\n\nThere is a link to the function/script called Send-HtmlEmail. You will have to download and dot source that script as well.\ni.e. add a line at the beginning of the script with:\n. C:\\fullpath\\send-htmlemail.ps1",
      "PostedDate": "2012-07-27T19:13:01.317",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Help with email function",
      "Subject": null,
      "Text": "My Best tip would be to open the script and run it from the Powershell_ISE. Then you can highlight the variable name and press F8 to get the current value. You can also run sections of the script and that will help to see where the issue may be.\n\nwith the email part once you have dot sourced the send-htmlemail script you should be able to type in: dir function:send-htmlemail to see if the function is actually loaded into memory.",
      "PostedDate": "2012-07-27T21:52:27.067",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Is there any way to change the timeout ?",
      "Subject": null,
      "Text": "Wen you use Format-Table you kill the object and it can never be consumed anywhere else. so saving to a variable is not very useful, since any format command it really only useful to view the output on the screen.\n\nSo try to use Select-Object instead of Format-Table (the results on the screen look similar, however under the covers Select-Object is far more useful).\n\nSo anywhere there are a couple of ways to do this:\n\n1) Use expandproperty to get one property Name into a simple list. \n$ComputerList = Get-ADComputer -Filter * -Property * | Select-Object -ExpandProperty Name\n\nThen: $ComputerList | Test-Online | Get-LoggedOnUser\n\n",
      "PostedDate": "2012-08-17T21:02:11.017",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Is there any way to change the timeout ?",
      "Subject": null,
      "Text": "Sure thing, I wrote this function called Test-Online.\nIf you install that you can use it as part of the pipeline along the way.\nDownload here:\nhttp://gallery.technet.microsoft.com/scriptcenter/2789c120-48cc-489b-8d61-c1602e954b24\n\nThen you can go: \nImport-Csv -Path C:\\ps\\computers.csv | Test-Online | Get-LoggedOnUser\nOR\nget-content -Path C:\\ps\\computers.csv | Test-Online | Get-LoggedOnUser\n\nLOVE that pipeline. Let me know how you go?",
      "PostedDate": "2012-08-15T16:37:32.147",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "deploy the hardware ",
      "Subject": null,
      "Text": "I don't have any VMware infrastructure available to me at the moment, so I cannot test any changes, sorry.",
      "PostedDate": "2012-08-31T04:42:48.45",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "deploy the hardware ",
      "Subject": null,
      "Text": "Agroman . . . probably best to start a new thread for this q? since it doesn't relate to the previous post you added to.\n\nHowever if you are having a trouble with workflow, best paste in your hello world example. Sounds like you missed a closing } or something like that. Probably something simple. Turning this script into a workflow is something that I always wanted to do, however I don't have the VMWare infrastructure to test it on to do the update.",
      "PostedDate": "2013-11-29T07:32:24.22",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "deploy the hardware ",
      "Subject": null,
      "Text": "agroman if you would like some help, start a new thread and post the code for your workflow.\n\nThis thread you commented on belongs to auqf",
      "PostedDate": "2013-12-02T14:56:57.857",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "deploy the hardware ",
      "Subject": null,
      "Text": "hey auqf,\n\nI am really sorry I don't have an environment to test this with.\n\nI wish I could help, can you be more descriptive of your issue? Or break down the problem into smaller pieces?",
      "PostedDate": "2012-09-12T19:12:09.15",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script",
      "Subject": null,
      "Text": "The csv format is provided in the example code.\n\nThe pre-requisites are: \n- Do you have a template VM called: W2K8-R2-X64\n- Do you have a customization spec called: W2K8-R2-X64\n- Are you connected to VCenter?\n- Can you execute a simple powercli command like get-vm and get results?\n\nIf you satisfy all of those then you should be good to start reviewing the different parts of the CSV and run the script.\n\nDid you call the function with the path to your CSV file?\nStart-VMDeploy -path mycsvfile.csv\n",
      "PostedDate": "2012-08-31T04:47:30.137",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Really nice and useful script.",
      "Subject": null,
      "Text": "Thanks Aman, simple but effective  : )",
      "PostedDate": "2012-09-03T03:13:03.197",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Really nice and useful script.",
      "Subject": null,
      "Text": "you might like this: http://wp.me/p16OPe-3I",
      "PostedDate": "2012-09-03T03:20:58.38",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Nested Groups",
      "Subject": null,
      "Text": "Hi James . . I did not make any updates so far.\n\nHow many levels did you want to nest?",
      "PostedDate": "2012-09-04T09:41:33.957",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Nested Groups",
      "Subject": null,
      "Text": "Hey James, nice work, glad you sorted it. . .\n\nIf you think it's something you want to share you should post it here on the repository. If you do let me know the link.\n\nI don't have any need for it at the moment. . . . One time I had to execute a command on around 500 Servers and there was no other way to connect than RDP. So I wrote this script to automate the connection process with the autologon settings in RDCMan. Then I connected, pasted in the single command and ran it and then logged off. . . boy was that fun.",
      "PostedDate": "2012-09-06T08:40:48.377",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Compatibility with MBSA 2.2?",
      "Subject": null,
      "Text": "okay great, thanks for letting me know.",
      "PostedDate": "2012-09-11T13:44:23.06",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "no info displayed after script executed",
      "Subject": null,
      "Text": "when the script (Get-HBAWin.ps1) file contents is wrapped in a function then you have to load that function into memory before you can call the function by its name.\n\nTo do this you Dot source the script. A dot source looks like:\n. c:\\ps\\Get-HBAWin.ps1\nWhich is a . then a space then the full path to the script file.\n\nOnce that is loaded into memory like that you can call the function name like:\nGet-HBAWin -ComputerName Server123",
      "PostedDate": "2012-10-09T10:13:43.497",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running Get-HBAWin from Powershell",
      "Subject": null,
      "Text": "Please see the comment below.\n\nYou can also comment out the Function line and the last } and then just call the script using the full path.ps1",
      "PostedDate": "2012-10-10T10:44:33.977",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script to invoke the result of another script?",
      "Subject": null,
      "Text": "If you already have a html file you can just use the native PowerShell cmdlet to send an email.\n$body = Get-Content -path c:\\yourfile.html\nsend-mailmessage -body $body -bodyashtml . . . .",
      "PostedDate": "2012-11-09T10:42:43.977",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script to invoke the result of another script?",
      "Subject": null,
      "Text": "Hi Sai,\n\nGlad that you found it useful.\n\nPlease feel free to leave a rating if you think others may find it useful as well.\n\nBen.",
      "PostedDate": "2012-11-13T11:32:35.253",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Keep Alive",
      "Subject": null,
      "Text": "Hi Nik,\nsorry for the delay, I just saw this.\n\nstep 1) Download the file and save it to a known location.\nstep 2) Open the powershell console (running as Administrator/elevated)\nstep 3) dot source the file/function into memory:\n. c:\\fullpath\\start-keepalive.ps1\nThat is dot, then a space, then the full path to the file, then press enter.\nstep 4) see if the function is loaded: Get-item function:\\start-keepalive\nstep 5) call the function via: Start-KeepAlive -KeepAliveHours 2\nstep 6) query the keep alive with: Start-KeepAlive -Query\nstep 7) stop the keepalive with: Start-KeepAlive -EndJob",
      "PostedDate": "2012-11-28T10:03:00.41",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "No Output",
      "Subject": null,
      "Text": "Hi Dave, try this.\nstep 1) Download the file and save it to a known location.\nstep 2) Open the powershell console (running as Administrator/elevated)\nstep 3) dot source the file/function into memory:\n. c:\\fullpath\\Get-LoggedOnUsers.ps1\nThat is dot, then a space, then the full path to the file, then press enter.\nstep 4) see if the function is loaded: Get-item function:\\Get-LoggedOnUsers\nstep 5) call the function via: Get-LoggedOnUsers -computername server123",
      "PostedDate": "2012-11-28T10:09:46.143",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "No Output",
      "Subject": null,
      "Text": "sorry it should be Get-LoggedOnUser not Get-LoggedOnUsers notice the singular.",
      "PostedDate": "2012-11-28T10:10:46.217",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Unable to run this windows 2003 box",
      "Subject": null,
      "Text": "This line in the script joins the pieces of the array together.\n\nNodeWWN          = (($_.NodeWWN) | ForEach-Object {\"{0:x}\" -f $_}) -join \":\"",
      "PostedDate": "2013-01-16T18:51:45.543",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Unable to run this windows 2003 box",
      "Subject": null,
      "Text": "Hi mohdazam89,\n\nFrom memory I am fairly certain that have run this class against 2003 R2 Sp2 Servers in the past.\n\nThis class may not be available on all servers. You would probably need a HBA card (fibre channel adapter) installed for the class to be present.\n\nDo you have a card in the server that you queried?\n\nyou can list similar classes by:\nGet-wmiobject -list *Adapter* -computername server123",
      "PostedDate": "2013-01-14T20:13:24.337",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How use the Script",
      "Subject": null,
      "Text": "did you see the link to the new version of the script?",
      "PostedDate": "2013-01-16T14:12:25.273",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "What does this error mean ",
      "Subject": null,
      "Text": "Hi iis4313,\n\nIt seems like either you do not have permission to run the wmi query against the remote machine OR there is a problem with wmi on the remote machine.\n\nThe actual query that is failing is:\nGet-WmiObject -class win32_process -ComputerName \"cg000164578\"\nSo if you run that you will get your error.\n\nIn General you need to be a local administrator on a machine to run the query.",
      "PostedDate": "2013-01-20T10:41:51.873",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Cannot run script",
      "Subject": null,
      "Text": "Hi Bob,\n\nWhat steps did you take to get it to run and also what was the output?",
      "PostedDate": "2013-02-11T12:48:58.027",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "multiple groups",
      "Subject": null,
      "Text": "How were you looking to get the list of computers, was it from AD?\n\nYou can try something like this:\n\n# Get computers from text file\n$Computers = (Get-content -Path C:\\computers.txt)\n\nOR\n\n# Get computers from CSV file\n$Computers = (Import-CSV -Path C:\\computers.csv | Select -ExpandProperty Computers)\n\n\"Remote Desktop Users\",\"Administrators\" | ForEach-Object {\n\n    Get-LocalGroup -Export -ComputerName $Computers -LocalGroup $_\n\n}",
      "PostedDate": "2013-02-13T10:53:03.73",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "multiple groups",
      "Subject": null,
      "Text": "Also I made a small change to the script so you may want to download it again.",
      "PostedDate": "2013-02-13T10:53:29.297",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "doesn't work for me as well",
      "Subject": null,
      "Text": "Are you running it from an elevated PowerShell prompt?\n\nAfter you run the following:\n. C:\\Users\\Administrator\\Get-HBAWin.ps1\ntry running:\nGet-HBAWin -computername server123",
      "PostedDate": "2013-02-23T11:44:18.54",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do you force the script to reference a text file with the list of host names in it?",
      "Subject": null,
      "Text": "Hey CluM09,\n\nI updated the code.\n\nLet me know how you go after you download it again.",
      "PostedDate": "2013-05-09T14:32:16.797",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do you force the script to reference a text file with the list of host names in it?",
      "Subject": null,
      "Text": "I would recommend the following:\n$computers = Get-Content -Path C:\\computers.txt\nGet-IPAddress -ComputerName $Computers",
      "PostedDate": "2013-04-16T15:33:00.237",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "The same - no output from the script",
      "Subject": null,
      "Text": "just use the single dot, then space to wherever you downloaded the script to.\n. c:\\fullpath\\Get-LoggedOnUser.ps1\nAfter that it should be in memory.",
      "PostedDate": "2013-04-16T15:34:57.727",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "where is get-domainControllers function?",
      "Subject": null,
      "Text": "aah good question, I updated it a while back and deleted the old version.\n\nI will have to go through and double check it still works as expected.\n\nHere is the new link.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/List-Domain-Controllers-in-2bec62a5\n\n",
      "PostedDate": "2013-04-16T15:41:52.56",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "where is get-domainControllers function?",
      "Subject": null,
      "Text": "yeah that works fine.\n\ndownload the script again or change the function name from the original from Get-DomainControllers to Get-DomainController",
      "PostedDate": "2013-04-16T15:53:43.403",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do I",
      "Subject": null,
      "Text": "Hi Todd.\nThe secret it to create a profile and then load it in the profile.\nE.g.\nNew-Item $PROFILE.CurrentUserAllHosts -ItemType File\n\nThen open the file:\nE.g.\nnotepad $PROFILE.CurrentUserAllHosts\n\nThen add the dot source in that script to load the function.\nE.g.\n. c:\\fullpath\\Get-LoggedOnUser.ps1\n\nThen save and close the file, the next time you open powershell that script will run and the function will be available for you to call.",
      "PostedDate": "2013-04-16T15:38:17.14",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do I",
      "Subject": null,
      "Text": "Well glad you got it worked out :)\n\nEnjoy.",
      "PostedDate": "2015-01-22T16:47:54.49",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Disk with more than 1TB",
      "Subject": null,
      "Text": "This is what I see. Can you let me know which values are incorrect?\n\n\nSystemName Name VolumeName         CapacityGB UsedGB   FreeGB   FreePC\n---------- ---- ----------         ---------- ------   ------   ------\nHYP-V      C:                      99.66      96.94    2.72     2.73\nHYP-V      D:   DATA               138.47     127.24   11.23    8.11\nHYP-V      E:   Hyper-V            2,792.87   914.44   1,878.43 67.26\nHYP-V      F:   Backup + Hyp-V     2,792.87   1,994.11 798.76   28.60\nHYP-V      I:   MrT                1,863.01   1,781.33 81.69    4.38\nHYP-V      K:   BACKUP_USB_3drives 1,392.62   853.17   539.45   38.74",
      "PostedDate": "2013-04-24T11:19:32.983",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Thanks",
      "Subject": null,
      "Text": "thanks for downloading :)",
      "PostedDate": "2013-05-07T05:56:11.247",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Missing tags in the css part?",
      "Subject": null,
      "Text": "hi Nick,\n\nYeah sorry about that and thank you.\n\nthe code does now show up, I will add it back in with comments, hopefully that should fix it up.",
      "PostedDate": "2013-06-05T07:43:18.297",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Missing tags in the css part?",
      "Subject": null,
      "Text": "Actually the one with the download link should work fine you would be best using that one.",
      "PostedDate": "2013-06-05T07:44:45.253",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Error connecting to DC",
      "Subject": null,
      "Text": "I think your issue maybe with the Get-BadPasswordtime script/function. At the end of that script it has: Connect-QADService -Service \"DCfavourite.domain.org\"\n\nYou would want to point it at one of your domain controllers. I did not include that setting as a parameter which I should have done. You could also easily just comment out that line.",
      "PostedDate": "2013-06-22T19:35:29.843",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Other types of server",
      "Subject": null,
      "Text": "Hi Keith,\n\nI would always recommend the ActiveDirectory Module for running queries against the domain. Simple ones are easy with ADSI, however for ongoing use and writing new code and automation you can save a lot of time with the module.\n\nThis particular example uses the legacy (obviously it is still used and available) ADSI, which has no pre-requisite.\n\nYou can use ADSI to query against AD for any computer account. It looks like the following.\n\n$DirSearcher = [adsisearcher][adsi]\"\"\n$DirSearcher.Filter = \"(objectClass=computer)\"\n$DirSearcher.FindAll()\n\nYou can see some other ldap queries here that may assist to answer your question to a better degree, basically just replace the filter on the 2nd line with whatever query you wish to run.\n\n# http://www.activedirsec.com/ldap_filters.html",
      "PostedDate": "2013-07-01T15:26:28.13",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Is it possible to export all OUs permission to a file and ",
      "Subject": null,
      "Text": "Anything is possible, however I believe it would be a large undertaking.\n\nWhat scenario are you working in where you would like to do this?\n\nOften times backing up and restoring a domain into a Sandbox environment works much better.",
      "PostedDate": "2013-07-09T09:34:54.12",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Invalid Class MSFC_FCAdapterHBAAttributes",
      "Subject": null,
      "Text": "You also have to set the namespace, since this is not using root\\cimv2.\n\nso try:\n\ngwmi -list -class *adapter* -cn servername -namespace \"root\\WMI\"",
      "PostedDate": "2013-07-24T06:13:52.197",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "n00b script'er",
      "Subject": null,
      "Text": "The current way the script is setup to do this is:\n1) Get a list of computernames (somehow) and get them into an array (a list).\nI would recommend a single text file with a computername on each line.\n$ComputerNames = Get-Content C:\\mycomputers.txt\n2) Call the call the script as below and export the data to csv.\nGet-HBAWin  -ComputerName $ComputerNames | Export-Csv -path c:\\myhbainfo.txt\n",
      "PostedDate": "2013-08-29T09:49:47.62",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "output to cvs",
      "Subject": null,
      "Text": "Yes that will work, exactly.\n\nDid you try it?\n",
      "PostedDate": "2013-08-28T08:23:22.59",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "2003 SP2",
      "Subject": null,
      "Text": "I believe from the notes below I even tested on 2000 :)",
      "PostedDate": "2013-08-28T18:01:38.267",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "2003 SP2",
      "Subject": null,
      "Text": "I have used this on 2003 a few years back, I am fairly certain.\n\nEnsure you have the appropriate adapter installed.\n\nEnsure you query in the correct namespace.\n\nE.g.  gwmi -list -class *adapter* -cn servername -namespace \"root\\WMI\"",
      "PostedDate": "2013-08-28T08:19:16.967",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Problem with New script, MaxOutageCount Hosts down ?",
      "Subject": null,
      "Text": "I updated the newer script to add this functionality for you:\n\nNow you can choose by using a switch for when you get notifications for:\n1) when a server goes down\n2) when a server comes back online\n3) when the max threshold was hit for the script to stop sending emails.\n\nhttp://gallery.technet.microsoft.com/scriptcenter/d0670079-6158-4dc5-a9da-b261c70e4b7d/",
      "PostedDate": "2014-07-16T12:09:07.993",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "I can't see the result",
      "Subject": null,
      "Text": "how are you calling the script and how are you trying to output to a txt file?",
      "PostedDate": "2013-09-12T20:07:59.267",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "I can't see the result",
      "Subject": null,
      "Text": "Glad you got it solved.\n\nYeah step 4 would be the dot source:\n. .\\Get-HBAWin\n\nthen step 5 would be calling the function in memory\nGet-HBAWin -ComputerNames $ServerNames | Export-Csv -path C:\\Report.txt\n",
      "PostedDate": "2013-09-14T08:41:22.447",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "very nice ",
      "Subject": null,
      "Text": "What do you mean by for mouse?\n\nWhat is it you would like to do?",
      "PostedDate": "2013-09-23T04:59:26.803",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "very nice ",
      "Subject": null,
      "Text": "I take offense at your 3 stars  :)\n\nSince this is one of my favorite and I think also unique scripts around, especially leveraging background jobs.",
      "PostedDate": "2013-10-09T14:45:39.57",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "I really need help ...",
      "Subject": null,
      "Text": "Create your file with 1 computer on each line.\nthen simply add the following:\n. d:\\scripts\\pingscript\\Start-Monitor.ps1\n$computers = Get-Content -Path c:\\computers.txt\nStart-Monitor -ComputerName $computers\n",
      "PostedDate": "2013-10-01T12:30:33.147",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "I really need help ...",
      "Subject": null,
      "Text": "Hi Suat,\n\nHere are some instructions:\n\n1) Save the script to a known file location, then right click on the script and choose properties and then click unblock. then okay.\n2) edit the script and modify the settings in the param block, such as smtpserver  and email addresses, plus possibly the timeout settings.\n3) Load the function into memory by dot sourcing the script\nSo start up Powershell.exe\nthen run the following with the dot and then the space.\n. d:\\scripts\\pingscript\\Start-Monitor.ps1\n4) Now call the function.\nStart-Monitor -ComputerName host1,host23,host154\n5) if you change any settings I the script going forward or each time you load powershell.exe you have to remember to do step 3 again.\n",
      "PostedDate": "2013-09-29T08:47:40.913",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Robocopy doesn't have option for Unbuffered",
      "Subject": null,
      "Text": "This is the version that comes on Windows 8/2012\n\nI will update the release notes to say that.\n\nOtherwise you can use it without the unbuffered option.\n",
      "PostedDate": "2013-10-04T08:14:28.89",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Having issue running",
      "Subject": null,
      "Text": "Okay great.\n\nYeah you have to load the snapin to use the cmdlets within.\n\nthis Script is pretty old, I now use the native ActiveDirectory Module.\n\nI probably should update the script.",
      "PostedDate": "2013-10-10T13:37:30.27",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Identify Idle Users",
      "Subject": null,
      "Text": "I prefer to use this module for those kinds of tasks, this has some very useful cmdlets: http://psterminalservices.codeplex.com/\n\nYou gain the advantage of the results being PowerShell objects which makes customizing the output via the pipeline easier to achieve than .exe commands.",
      "PostedDate": "2013-10-17T06:24:23.36",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Old Version works, new one does nothing",
      "Subject": null,
      "Text": "Hi Anton,\n\nThe instructions are below . . . see the previous question (to Suat).\n\nYou are not the first to have this problem with dot sourcing the function into memory before calling it.",
      "PostedDate": "2013-11-05T05:03:46.303",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "how to enumerate individual user accounts also",
      "Subject": null,
      "Text": "It pulls all members at the moment, which are users or groups.\n\nBy default it looks at the local administrators group.\n\nCan you elaborate on what you would like to do?",
      "PostedDate": "2013-11-13T14:08:07.35",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "almost working...",
      "Subject": null,
      "Text": "actually now I think about it, I think you just have to update the parameter from -Computers to -ComputerName.",
      "PostedDate": "2013-11-13T14:10:24.113",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "almost working...",
      "Subject": null,
      "Text": "okay so two things.\nThere is this script that does the comparison and also the other script that actually checks the local user accounts.\n\nSo you need access to both scripts.\nDid you save them both to disk and what path did you save them to?",
      "PostedDate": "2013-11-13T14:04:41.307",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Big thanks Ben for a great tool.",
      "Subject": null,
      "Text": "Thanks for the feedback Johnny, I really appreciate it  :)\n\nGlad you find the tools useful.\n\nHopefully they can inspire you to also also create tools for tasks that you commonly perform.",
      "PostedDate": "2013-11-26T17:03:40.553",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "MSFC_FibrePortHbaAttributes",
      "Subject": null,
      "Text": "break it down into steps.\n\n$result = gwmi -class MSFC_FibrePortHbaAttributes\n -namespace \"root\\WMI\" -computername somecomputerwithadapter\n$results | Get-Member\n$results | select *",
      "PostedDate": "2013-11-26T17:05:29.843",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "This is not working for me, not sure what I am missing..",
      "Subject": null,
      "Text": "sorry I missed this question, let me know I you need help.",
      "PostedDate": "2014-12-03T14:36:05.863",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "No output in Windows 2012",
      "Subject": null,
      "Text": "a) Well did you dot source and run the function?\nb) Do you have a fibre adapter onboard?",
      "PostedDate": "2013-12-11T17:35:59.413",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "the exported file is blank",
      "Subject": null,
      "Text": "You need to do this:\n\n1)  . .\\Get-HBAWin.ps1\n2)  Get-HBAWin -ComputerNames 10.241.33.152 | Export-Csv -path C:\\Report.txt",
      "PostedDate": "2013-12-21T06:35:00.707",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output errors",
      "Subject": null,
      "Text": "Are you running PowerShell as Elevated (Administrator)?",
      "PostedDate": "2014-01-04T08:18:47.097",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output errors",
      "Subject": null,
      "Text": "Seems like you are having issues accessing that class. It will only show up if you have a HBA card installed on the system.\n\nYou might want to use wmi or cim explorer to validate what classes you have available OR test against another machine that does have a HBA card.",
      "PostedDate": "2014-01-08T05:10:50.317",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Output errors",
      "Subject": null,
      "Text": "try the query outside of the script . . .\n   \nGet-WmiObject -class MSFC_FCAdapterHBAAttributes -Namespace \"root\\WMI\"\n\nthen try another more simple query if that does not work.\n\nGet-WmiObject -class win32_operatingsystem -Namespace \"root\\cimv2\n\nLet me know how you go?\n",
      "PostedDate": "2014-01-06T12:11:54.07",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to get individual PortWWN number",
      "Subject": null,
      "Text": "To see what classes are available you could use a tool like \"WMI Explorer\".\n\nYou can also use PowerShell itself.\n\nGet-wmiobject -namespace \"root\\WMI\" -class *HBA* -List\n\nThat will list off any classes from that namespace that match *HBA*.\n\nSo change the namespace or class filter in order to find what you are looking for, also remember you can also use the -ComputerName parameter to query remote machines.",
      "PostedDate": "2014-01-11T17:19:58.573",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Somewhat frustrating",
      "Subject": null,
      "Text": "Hey Chad,\n\nWell on the upside, you got it working . . . on another upside, hopefully you had the opportunity to learn a few things about the PowerShell language.\n\nOn the downside, I hope you didn't waste too much time. . . thank you for your feedback on this. I have updated the description with a comment on this.\n\nI hope you find the script useful.\n\nBen.",
      "PostedDate": "2014-01-18T06:43:39.197",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Paramaters",
      "Subject": null,
      "Text": "Hi Joshua,\n\nDid you try like below?\n\nInvoke-PSEXEC -ComputerName server123 -File C:\\script.bat -Command script.bat -Params -u username -p password\n\nI am presuming that you need the password to run the script, not to connect to the remote computer?\n\nIf you need to pass credentials to connect to the remote machine, that still might work, however I would be inclined to modify the script to just add in those parameters on the commandline when psexec is called.",
      "PostedDate": "2014-01-30T07:58:44.34",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How it works?",
      "Subject": null,
      "Text": "Hi 7Master,\n\n1) Download the script, save it to a known location.\n2) right click on the script and select properties and choose unblock.\n3) dot source the script.\n  . C:\\users\\myuser\\Set-CustomADOUPermissions.ps1\n4) run the script E.g.\nSet-CustomADOUPermissions -DistinguishedName \"OU=Lab100,OU=LabComputers,OU=Test,DC=DevDomain,DC=com\" -AdminGroup \"LabAdmins\"\n",
      "PostedDate": "2014-02-03T11:30:59.007",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Getting error",
      "Subject": null,
      "Text": "my guess is that you copied the code from the web page. Instead I recommend you use the download link. Then you will always get the correct formatting.\n\nI guess your actual issue will be that you may have a space after the `\nwhich will cause the script to fail. Basically that escape character MUST be the last thing on the line, since it escapes a hidden end of line terminator.\n\nI recommend to just download the script again.\n\n",
      "PostedDate": "2014-02-08T06:56:41.977",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Only works for some remotes",
      "Subject": null,
      "Text": "You are querying a WMI NameSpace/Class for this information.\n\nYou can test the raw cmdlets: \nGet-wmiobject -namespace root\\cimv2 -class win32_process -CN WS123\n\nBy default the class requires you to have local admin rights to query.\n\nIf you want you can use some other credentials:\n$cred = get-credential domain\\user\n\nThen add the following to the get-wmiobject query:\n -credential $cred\n\nLet me know how you go.\n\nThis used DCOM/RPC to query which requires a large range of network ports to connect, if you can use compmgmt.msc and connect to the remote machine, then you should have permission to connect with Get-wmiobject.",
      "PostedDate": "2014-02-11T09:07:26.943",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Are the website files available?",
      "Subject": null,
      "Text": "I was hoping for the website files and pictures . . .did I miss the cupcake pictures + html etc somewhere?",
      "PostedDate": "2014-04-30T13:22:37.697",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Remove cmdlet",
      "Subject": null,
      "Text": "Any chance of adding a remove-device\r\n\r\nI don't think  saw this question.\r\n\r\nAlso is this the latest version of this Module, I see '9/24/2012'\r\n\r\nI really want to clean up ghosted NICS etc.\r\n\r\nRight now I do this manually via: set devmgr_show_nonpresent_devices=1\r\n\r\nThen manually delete them.\r\n\r\nSo I guess support for hidden devices would be cool, not sure if I missed this feature?",
      "PostedDate": "2014-05-11T11:45:02.36",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Silly question",
      "Subject": null,
      "Text": "Let me see if I can update this script soon and then get back to you, it was written a long time ago and I can likely make it more efficient . . . I'll update you I a few days.",
      "PostedDate": "2014-05-29T21:47:24.577",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Silly question",
      "Subject": null,
      "Text": "Okay I have updated the Function.\n\nYou should download the pre-requisite Get-DomainController function as well.",
      "PostedDate": "2014-07-19T13:06:36.64",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Silly question",
      "Subject": null,
      "Text": "Oh yeah and it uses the ActiveDirectory Module now, not the Quest tools.",
      "PostedDate": "2014-07-19T13:07:19.777",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Silly question",
      "Subject": null,
      "Text": "And the function is also available for download now.",
      "PostedDate": "2014-07-19T13:07:48.183",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email Functionality ",
      "Subject": null,
      "Text": "I updated this script to allow for easier setting of the Email notification.",
      "PostedDate": "2014-07-16T12:04:47.253",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email Functionality ",
      "Subject": null,
      "Text": "You should review this script in the Integrated Scripting Environment, the ISE or powershell_ise.exe\n\nThat way comments will be very clear to you.\n\nThere are several instances of the following, they are the parts to uncomment, notice that you will also need to setup an appropriate smtp server address.\n\n#$Body = \"$_ has not responded for 5 pings at $Now\" \n#Send-MailMessage -Body \"$body\" -to $notificationto -from $notificationfrom ` \n# -Subject \"Host $_ is down\" -SmtpServer $smtpserver",
      "PostedDate": "2014-05-29T21:46:20.91",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to log the errors in the file",
      "Subject": null,
      "Text": "I updated the script for you to add in logging for computers that are offline or do not have the specific class available, please let me know how you go?",
      "PostedDate": "2014-06-03T09:01:51.12",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to log the errors in the file",
      "Subject": null,
      "Text": "All parameters in Powershell use the -\n\nSo it would be -Logfile\n\nIf you are writing to C:\\logfile.txt you would need to be elevated i.e. running as Admin.",
      "PostedDate": "2014-06-21T09:27:01.767",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding entrie to the script file for router",
      "Subject": null,
      "Text": "If you see below you might want to uncomment out the parts to enable the email. Also you need to add in an smtp server.\n\nAlso full instructions are below as well on the date \"Written September 29, 2013\"\n\nThere is a list of 8 steps to take.",
      "PostedDate": "2014-06-05T06:12:05.917",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Parameters for CSV file?",
      "Subject": null,
      "Text": "I have not tried.\n\nHowever if I were you I would just create one server in the actual GUI (application), then fill I all of the settings that you want to use.\n\nThen just verify the settings look normal, then replace them out with the $_.propertyname for each part of the XML file.",
      "PostedDate": "2014-06-09T15:29:39.287",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Parameters for CSV file?",
      "Subject": null,
      "Text": "Glad you got it working and updated. Nice one.\n. . . Another PowerShell Pipeline Win  :)",
      "PostedDate": "2014-06-10T19:13:18.013",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email when server is back up",
      "Subject": null,
      "Text": "I updated the newer script to add this functionality for you:\n\nhttp://gallery.technet.microsoft.com/scriptcenter/d0670079-6158-4dc5-a9da-b261c70e4b7d/",
      "PostedDate": "2014-07-16T12:07:54.293",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "Oh just put your list of computers into the test file, one on each new line.\n\nE.g. C:\\monitor\\hosts.txt \n\nIf you do have a list of computers in there, you could choose to not monitor that server by putting a # in front of the computername. (this would normally be a temporary thing, otherwise you can just remove the computername from the list).\n\nLet me know which script you are using, maybe re-ask the question on the other script if you are having some issues on that one.\n",
      "PostedDate": "2014-07-21T10:17:57.333",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "Just in case you are using this script . . . try this:\n\nGet-Content -path c:\\computers.txt | Start-Monitor -notifyonServerDown -notifyonServerBackOnline -notifyonMaxOutageCount",
      "PostedDate": "2014-07-21T10:20:14.517",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "Okay this is a little confusing since we are discussing the other script on this thread,... so I am going to move this over to: \n\nhttp://gallery.technet.microsoft.com/scriptcenter/d0670079-6158-4dc5-a9da-b261c70e4b7d",
      "PostedDate": "2014-07-22T07:09:32.053",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "Maybe one thing that might help if you are using this script.\n\nTry:\n1) Download the fresh script and update your smtp settings etc.\n\n2) Dot source the function:\n. .\\Start-Monitor.ps1\n\n3) Call the function:\nGet-Content -path c:\\computers.txt | Start-Monitor -notifyonServerDown -notifyonServerBackOnline -notifyonMaxOutageCount\n",
      "PostedDate": "2014-07-22T07:14:42.927",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "oh okay :)\n\nDo you have a single computername on each line in the text file?\n\nyou don't want to have any # in front of the computername, if you have the # then it will not search against that computername.",
      "PostedDate": "2014-07-22T11:03:05.303",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "okay sorry my fault, I wasn't thinking  :)\n\nDon't use the pipeline for this script. You have to read in all of the computers first.\n\n$Computers = Get-Content -path c:\\computers.txt\nStart-Monitor -ComputerName $Computers -notifyonServerDown -notifyonServerBackOnline -notifyonMaxOutageCount",
      "PostedDate": "2014-07-22T11:05:48.23",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding a list of hosts",
      "Subject": null,
      "Text": "Thanks for your feedback by the way :)\n\nI did a script update to simplify how it works and also added a switch to enable ALL notifications. (so download it again if you can).\n\nYou can now do either option.\n\n$Computers = Get-Content -path c:\\computers.txt\nStart-Monitor -ComputerName $Computers -NotifyAll\n\nOR\n\nGet-Content -path c:\\computers.txt | Start-Monitor -NotifyAll",
      "PostedDate": "2014-07-22T11:36:07.697",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "how do i make this script to fetch uptime on remote servers",
      "Subject": null,
      "Text": "running the script itself only loads the function into memory.\n\nOnce you load it you call the function by name\n\nE.g. Load the function\n. c:\\scripts\\get-uptime.ps1\n\nGet-Uptime -ComputerName (get-content computers.txt)",
      "PostedDate": "2014-08-26T09:12:06.807",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script problem",
      "Subject": null,
      "Text": "It's a function that you need to load.\n\n. .\\get-maxconcurrentapireport.ps1\nGet-MaxConcurrentAPIReport -ComputerName DC1\n",
      "PostedDate": "2014-10-02T03:19:49.653",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Need help in running this script from a remote Windows 2008 server stand alone machine against a Windows Server 2008 Domain Controller.",
      "Subject": null,
      "Text": "Hi Michael,\n\nYes there sure is. If you install or enable the Windows PowerShell for Active Directory, in the windows features, that will give you what you need.\n\nI prefer the ActiveDirectory Module since it's more up to date. If you want to run this from the client machine you can install the \"Remote Server Administration Tools\" (RSAT).\n\nYou will find very similar cmdlets in that module however rather than get-qadobject, it will just be get-adobject notice the prefix is -ad not -qad another example would be rather than get-qaduser it would just be get-aduser.\n\nI can give you some more info on this if you want, however try to add or install the feature first.",
      "PostedDate": "2014-10-16T17:54:25.62",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "SMTP authentication",
      "Subject": null,
      "Text": "The send-mailmessage supports credentials.\n\nhelp Send-MailMessage -Full\n\ntake a look at the credential parameter and also in the examples at the end.\n\nTo run this at startup you would use a scheduled task.",
      "PostedDate": "2014-10-19T07:29:56.157",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "SMTP authentication",
      "Subject": null,
      "Text": "run this and check out example # 3\n\nhelp Send-MailMessage -Examples",
      "PostedDate": "2014-10-29T17:49:57.927",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running script",
      "Subject": null,
      "Text": "great, I am happy to assist.\n\nSimply share all of the ways that you tried to run it and then I can show you where you may have gone wrong and also help so that you can also have some extra info on running other scripts and functions in the future.",
      "PostedDate": "2014-11-05T09:45:14.353",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running script",
      "Subject": null,
      "Text": "I would test step by step:\n1)\ntest-connection -computername test123 -count 1\n\n2)\nadd the test123 to the servermonitor.txt file and make sure it can read it.\nget-content \\\\kelley\\Test\\servermonitor.txt \n\n3) test with the example you had above\n get-content \\\\kelley\\Test\\servermonitor.txt | Where-Object {!($_ -match \"#\")} |\n            ForEach-Object {\n                  Test-Connection -ComputerName $_ -Count 1 -ea silentlycontinue}\n\nIF all that works then you should be good to run the script, if not try to move the file to the local machine instead of the UNC path.",
      "PostedDate": "2014-11-12T12:06:29.497",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do you set this to run in the background?",
      "Subject": null,
      "Text": "normally a scheduled task would be the standard way that is built in to run a task in the background.\n\nscheduled tasks have inbuilt capabilities to run different scripts in many different ways, on different schedules and also provide the ability to use a credential etc.",
      "PostedDate": "2014-11-17T10:59:00.89",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Adding host ",
      "Subject": null,
      "Text": "you just save the script\n\nc:\\users\\username\\desktop\\start-monitor.ps1\n\nThen load the script, which is called dot sourcing, by running the following in powershell.\n\n. c:\\users\\username\\desktop\\start-monitor.ps1\n\nThen call the function from within Powershell\n\nstart-monitor -computername localhost\n\nThen if you want call it with a some computernames\n$list = get-content -path c:\\users\\username\\desktop\\computers.txt\nStart-monitor -ComputerName $list",
      "PostedDate": "2014-11-19T13:36:55.03",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running the script",
      "Subject": null,
      "Text": "you just save the script\n\nc:\\users\\username\\desktop\\start-monitor.ps1\n\nThen load the script, which is called dot sourcing, by running the following in powershell.\n\n. c:\\users\\username\\desktop\\start-monitor.ps1\n\nThen call the function from within Powershell\n\nstart-monitor -computername localhost\n\nThen if you want call it with a some computernames\n$list = get-content -path c:\\users\\username\\desktop\\computers.txt\nStart-monitor -ComputerName $list\n\n",
      "PostedDate": "2014-11-19T13:36:46.983",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Any chance you could clean up the description? ",
      "Subject": null,
      "Text": "It's referenced in each script, with a comment next to each function that is required.\n\nThis first script uses get-badpasswordinfo\n\nhttps://gallery.technet.microsoft.com/scriptcenter/Find-the-Bad-Password-c207d807\n\nThat one calls the following:\n\n # Test-Online is here: \n # http://gallery.technet.microsoft.com/scriptcenter/2789c120-48cc-489b-8d61-c1602e954b24 \n \n# Get-DomainController is here: \n# http://gallery.technet.microsoft.com/scriptcenter/List-Domain-Controllers-in-2bec62a5",
      "PostedDate": "2014-11-19T13:40:51.083",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "hyper-v guest",
      "Subject": null,
      "Text": "Did you consider using the Hyper-V module for this?\n\nE.g. hyper-v\\Get-VMFibreChannelHba -VMName server123 -ComputerName HVHost123",
      "PostedDate": "2014-11-20T12:29:14.247",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "hyper-v guest",
      "Subject": null,
      "Text": "Otherwise try:\n\nGet-WmiObject -ComputerName server123VM -Class MSFC_FibrePortHbaAttributes -Namespace 'root\\WMI'",
      "PostedDate": "2014-11-20T12:34:23.613",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Object and decendant objects",
      "Subject": null,
      "Text": "Sure you there is a overloaddefinition for also setting the inheritance. Check the list of custructors.\n\nif you are on V5 you can it listed with the following:\n[System.DirectoryServices.ActiveDirectoryAccessRule]::new\n\nor view it on the website: http://msdn.microsoft.com/en-us/library/system.directoryservices.activedirectoryaccessrule.aspx\n\nNotice the 2nd constructor: Initializes a new instance of the ActiveDirectoryAccessRule class with the specified identity reference, Active Directory Domain Services rights, access rule type, and inheritance type.\n\nThen when you create the accessrule, you just specify that as one of the arguments.\n",
      "PostedDate": "2015-01-06T20:07:42.053",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "So close!!!",
      "Subject": null,
      "Text": "So I guess you are running this on PowerShell version 2?\n\nTry adding the @ symbol before the (get-badpasswordinfo . . . )\n\nPlus you may as well remove the references to the $DC2,$DC3 etc\n\nFrom:\n$DC1,$DC2,$DC3 = (Get-BadPasswordInfo -User $Account)[0] | \n     ForEach-Object {($_.DomainController -split \"\\.\")[0]} \n\nTo:\n$DC1 = @(Get-BadPasswordInfo -User $Account)[0] | \n     ForEach-Object {($_.DomainController -split \"\\.\")[0]} ",
      "PostedDate": "2015-01-15T19:06:22.433",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "So close!!!",
      "Subject": null,
      "Text": "I see the issue . .  I originally wrote the script to run in large environments, expecting there to be many DC's, and by many I mean at least 3.\n\nThe lines below actually select the first two DC's, so you just need to modify this to just select one:\n\n----------------------------------------------------\nFrom: \n\n$DC1,$DC2,$DC3 = (Get-BadPasswordInfo -User $Account)[0..2] | \n     ForEach-Object {($_.DomainController -split \"\\.\")[0]}    \n     \n     $Option -= 1\n     $Servers = $DC1 + \", \" + $DC2 # + \", \" + $DC3\n     $LogName1 = \"$LogDir\\$DC1-Security_LOG.txt\"\n     $LogName2 = \"$LogDir\\$DC2-Security_LOG.txt\"\n     #$LogName3 = \"$LogDir\\$DC3-Security_LOG.txt\"\n\n------------------------------------------\nTo:\n\n$DC1,$DC2,$DC3 = (Get-BadPasswordInfo -User $Account)[0] | \n     ForEach-Object {($_.DomainController -split \"\\.\")[0]}    \n     \n     $Option -= 1\n     $Servers = $DC1 # + \", \" + $DC2 + \", \" + $DC3\n     $LogName1 = \"$LogDir\\$DC1-Security_LOG.txt\"\n     # $LogName2 = \"$LogDir\\$DC2-Security_LOG.txt\"\n     #$LogName3 = \"$LogDir\\$DC3-Security_LOG.txt\"\n\nAlso further down in the script\n\nFrom:\n     & \"$Homedir\\Tools\\eventcombMT.exe\" /s:$DC1 /s:$DC2 /et:safa /log:sec /text:$Account /outdir:$LogDir /evt:$EventID /t:75 /start # /s:$DC3\n\n\nTo:\n\n     & \"$Homedir\\Tools\\eventcombMT.exe\" /s:$DC1  /et:safa /log:sec /text:$Account /outdir:$LogDir /evt:$EventID /t:75 /start # /s:$DC2 /s:$DC3\n\nLet me know how that goes.",
      "PostedDate": "2015-01-09T10:33:32.97",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Okay, I get \"empty\" output - nothing, nada, zilch",
      "Subject": null,
      "Text": "step 1) Download the file and save it to a known location.\nstep 2) right click on the script, select properties, then unblock.\nstep 3) Open the powershell console (running as Administrator/elevated)\nstep 4) dot source the file/function into memory:   * you missed this step.\n. c:\\fullpath\\Get-LoggedOnUsers.ps1\nThat is dot, then a space, then the full path to the file, then press enter.\nstep 5) see if the function is loaded: Get-item function:\\Get-LoggedOnUser\n         or get-command Get-Loggedonuser\nstep 6) call the function via: Get-LoggedOnUser -computername server123",
      "PostedDate": "2016-03-18T09:17:42.747",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this?",
      "Subject": null,
      "Text": "With PowerShell we put useful things in PS1 files. A function is an example of a useful thing and this is an example of a function.\n\nWhen you run a PS1 file it launches in a protected space in memory, which we call the \"Script Scope\". Anything that is defined while the script runs disappears once the script has finished running.\n\nin order to run the script in the Global scope you need to do a thing called Dot Sourcing.\n# load the function\n. c:\\scripts\\get-userlastlogin.ps1\n\n# run the function\nGet-UserLastLogin -ComputerName Server1,Server2\n\nAnd that is all there is to it. . .  read this blog post about creating a Module.\n\nhttps://brwilkinson.wordpress.com/2012/08/30/save-you-pennies-in-a-jar-building-your-own-module-to-save-your-code/",
      "PostedDate": "2015-02-19T14:21:06.03",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script is not providing any output",
      "Subject": null,
      "Text": "Okay I found somewhere to test . . . here is an update, I haven't really tested this much yet, on a multi card, multi port environment.\n\n\n\nfunction Get-HBAWin { \nparam( \n[String[]]$ComputerName = $ENV:ComputerName,\n[Switch]$LogOffline \n) \n \n$ComputerName | ForEach-Object { \ntry {\n\t$Computer = $_\n\t\n\t$Params = @{\n\t\tNamespace    = 'root\\WMI'\n\t\tClass        = 'MSFC_FCAdapterHBAAttributes' \n\t\tComputerName = $Computer \n\t\tErrorAction  = 'Stop'\n\t\t}\n\t\n\tGet-WmiObject @Params  | ForEach-Object { \n\t\t$InstanceName = $_.InstanceName -replace '\\\\','\\\\'\n        $Params['class']='MSFC_FibrePortHBAAttributes'\n        $Params['filter']=\"InstanceName='$InstanceName'\" \n        $Ports = @(Get-WmiObject @Params | Select -Expandproperty Attributes | % { ($_.PortWWN | % {\"{0:x2}\" -f $_}) -join \":\"})\n        #$NodeWWN = @(Get-WmiObject @Params | Select -Expandproperty Attributes | % { ($_.NodeWWN | % {\"{0:x2}\" -f $_}) -join \":\"})\n\n        $hash=@{ \n\t\t\t\tComputerName     = $_.__SERVER \n\t\t\t\tNodeWWN          = (($_.NodeWWN) | ForEach-Object {'{0:x2}' -f $_}) -join ':'\n                PortWWN          = $Ports\n\t\t\t\tActive           = $_.Active \n\t\t\t\tDriverName       = $_.DriverName \n\t\t\t\tDriverVersion    = $_.DriverVersion \n\t\t\t\tFirmwareVersion  = $_.FirmwareVersion \n\t\t\t\tModel            = $_.Model \n\t\t\t\tModelDescription = $_.ModelDescription\n                UniqueAdapterId  = $_.UniqueAdapterId\n                NumberOfPorts    = $_.NumberOfPorts\n                NodeWWMv2       = $NodeWWN\n\t\t   \t   } \n\t\t\tNew-Object psobject -Property $hash \n\t\t}#Foreach-Object(Adapter) \n}#try\ncatch {\n\tWrite-Warning -Message \"$Computer is offline or not supported\"\n\tif ($LogOffline)\n\t{\n\t\t\"$Computer is offline or not supported\" >> \"$home\\desktop\\Offline.txt\"\n\t}\n}\n\n}#Foreach-Object(Computer) \n \n}#Get-HBAWin",
      "PostedDate": "2015-06-24T12:07:36.353",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script is not providing any output",
      "Subject": null,
      "Text": "Hi Amir, I don't have any HBA adapters to test with unfortunately. I don't like to make any modifications unless I can also test the new code.",
      "PostedDate": "2015-03-11T13:23:03.327",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script is not providing any output",
      "Subject": null,
      "Text": "With PowerShell we put useful things in PS1 files. A function is an example of a useful thing and Get-HBAWin is an example of a function.\n\nWhen you run a PS1 file it launches in a protected space in memory, which we call the \"Script Scope\". Anything that is defined while the script runs disappears once the script has finished running.\n\nin order to run the script in the Global scope you need to do a thing called Dot Sourcing.\n# load the function\n. c:\\scripts\\Get-HBAWin.ps1\n\n# run the function\nGet-HBAWin -ComputerName Server1,Server2\n\nAnd that is all there is to it. . .  read this blog post about creating a Module.\n\nhttps://brwilkinson.wordpress.com/2012/08/30/save-you-pennies-in-a-jar-building-your-own-module-to-save-your-code/",
      "PostedDate": "2015-02-26T14:30:40.107",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "njmessenger",
      "Subject": null,
      "Text": "This is the newer version\n\nhttps://gallery.technet.microsoft.com/scriptcenter/f6550a1d-6ca7-4cc4-b066-a0ea5761866d",
      "PostedDate": "2015-03-09T19:44:24.7",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Linux Hosts",
      "Subject": null,
      "Text": "This just uses ICMP to make the connection with test connection. So as long as a machine will respond to ICMP this should work fine.\n\nYou could also consider Test-WSMAN, however that uses a WSMAN query so you have to have wsman running in order to get the response from that. That is available on Linux if you install and configure OMI.",
      "PostedDate": "2015-03-11T13:25:22.83",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script isn't accepting computer name as argument",
      "Subject": null,
      "Text": "Hmm seem that two of you have the same issue.\n\ndo these work?\n\nStart-Monitor -ComputerName localhost\n\n'localhost' | start-monitor",
      "PostedDate": "2015-04-02T20:20:18.333",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How would I schedule this ",
      "Subject": null,
      "Text": "I'll have to play around with the SQL agent, what version of SQL are you running?\n\nI normally schedule it with a standard scheduled task.",
      "PostedDate": "2015-04-02T20:21:40.087",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Server 2012 R2",
      "Subject": null,
      "Text": "Hmm seem that two of you have the same issue.\n\ndo these work?\n\nStart-Monitor -ComputerName localhost\n\n'localhost' | start-monitor",
      "PostedDate": "2015-04-02T20:20:05.223",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Executing Script on Server?",
      "Subject": null,
      "Text": "if you want to run it as a scheduled task, you might be best to just comment out the first and last lines, then just call it like a normal script.\n\ni.e. remove the function by commenting it out.\n\nE.g. \n#function Start-Monitor {\n\n#}\n\nSince I have this as part of a module, then I just call the function name in the scheduled task, however if it's not part of a module, then also remove the function part as well.",
      "PostedDate": "2015-04-07T21:57:44.83",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "WWPN doesnt work",
      "Subject": null,
      "Text": "Okay I had the time and chance to test this out ... first cut, let me know how this goes\n\n\n\nfunction Get-HBAWin { \nparam( \n[String[]]$ComputerName = $ENV:ComputerName,\n[Switch]$LogOffline \n) \n \n$ComputerName | ForEach-Object { \ntry {\n\t$Computer = $_\n\t\n\t$Params = @{\n\t\tNamespace    = 'root\\WMI'\n\t\tClass        = 'MSFC_FCAdapterHBAAttributes' \n\t\tComputerName = $Computer \n\t\tErrorAction  = 'Stop'\n\t\t}\n\t\n\tGet-WmiObject @Params  | ForEach-Object { \n\t\t$InstanceName = $_.InstanceName -replace '\\\\','\\\\'\n        $Params['class']='MSFC_FibrePortHBAAttributes'\n        $Params['filter']=\"InstanceName='$InstanceName'\" \n        $Ports = @(Get-WmiObject @Params | Select -Expandproperty Attributes | % { ($_.PortWWN | % {\"{0:x2}\" -f $_}) -join \":\"})\n        #$NodeWWN = @(Get-WmiObject @Params | Select -Expandproperty Attributes | % { ($_.NodeWWN | % {\"{0:x2}\" -f $_}) -join \":\"})\n\n        $hash=@{ \n\t\t\t\tComputerName     = $_.__SERVER \n\t\t\t\tNodeWWN          = (($_.NodeWWN) | ForEach-Object {'{0:x2}' -f $_}) -join ':'\n                PortWWN          = $Ports\n\t\t\t\tActive           = $_.Active \n\t\t\t\tDriverName       = $_.DriverName \n\t\t\t\tDriverVersion    = $_.DriverVersion \n\t\t\t\tFirmwareVersion  = $_.FirmwareVersion \n\t\t\t\tModel            = $_.Model \n\t\t\t\tModelDescription = $_.ModelDescription\n                UniqueAdapterId  = $_.UniqueAdapterId\n                NumberOfPorts    = $_.NumberOfPorts\n                NodeWWMv2       = $NodeWWN\n\t\t   \t   } \n\t\t\tNew-Object psobject -Property $hash \n\t\t}#Foreach-Object(Adapter) \n}#try\ncatch {\n\tWrite-Warning -Message \"$Computer is offline or not supported\"\n\tif ($LogOffline)\n\t{\n\t\t\"$Computer is offline or not supported\" >> \"$home\\desktop\\Offline.txt\"\n\t}\n}\n\n}#Foreach-Object(Computer) \n \n}#Get-HBAWin",
      "PostedDate": "2015-06-24T12:06:39.773",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "WWPN doesnt work",
      "Subject": null,
      "Text": "I would suggest add another line in the script, sorry I don't have any HBA's to test or modify the main script however something like below. . .\n\n$hash=@{ \n   ComputerName     = $_.__SERVER \n   NodeWWN          = (($_.NodeWWN) | ForEach-Object {'{0:x2}' -f $_}) -join ':' \n   PortWWN          = $_.attributes | Select-Object -ExpandProperty PortWWN\n   Active           = $_.Active \n   DriverName       = $_.DriverName \n   DriverVersion    = $_.DriverVersion \n   FirmwareVersion  = $_.FirmwareVersion \n   Model            = $_.Model \n   ModelDescription = $_.ModelDescription \n   }\n\n",
      "PostedDate": "2015-04-09T11:00:01.45",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "where i can i put my ip list",
      "Subject": null,
      "Text": "Please read further down in the questions below and you can see some examples.",
      "PostedDate": "2015-05-12T06:31:43.34",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Multiple computers applications",
      "Subject": null,
      "Text": "Anything is possible, however you will do the task in two different scripts.\n1) read the computer account names from the OU\n2) read the application lists from the servers\n\nThere are already scripts that do both of these tasks if you search.",
      "PostedDate": "2015-05-12T06:33:05.953",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Use with CSV",
      "Subject": null,
      "Text": "sure just make sure the header in the CSV is Computername.\n\nimport-csv -path .\\mycomputers.txt | get-loggedonuser",
      "PostedDate": "2015-06-16T08:44:56.07",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to speed up write?",
      "Subject": null,
      "Text": "Performance is an issue with this script.\n\nI would likely use event forwarding instead of this script these days.\n\nHowever I will take a look at the script and see if I can think of a faster way to do this.\n\nWhat version of PowerShell would you be using? (what OS on your servers?)",
      "PostedDate": "2015-08-15T12:04:40.563",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script getting stuck",
      "Subject": null,
      "Text": "did you test sending the mail message from your machine?",
      "PostedDate": "2015-08-15T12:01:49.953",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "SMTP settings??",
      "Subject": null,
      "Text": "send-mailmessage does accept a credential.\n\nhttps://technet.microsoft.com/library/796227f5-c9ff-402d-8a04-cde9e0c180ee(v=wps.630).aspx",
      "PostedDate": "2015-08-15T12:01:08.703",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Keep active Script",
      "Subject": null,
      "Text": "You would need to setup a scheduled task that runs as the user and starts at logon.",
      "PostedDate": "2015-09-09T06:53:45.533",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Add CanonicalName to output",
      "Subject": null,
      "Text": "Since the computername is the known thing, it should be easy to look up. Are you happy to use the ActiveDirectory Module? you install that as part of the RSAT tools.\n\nThen just update the code to the following and then use that $CanonicalName for the computername further down.\n\nProcess             \n{ \n    $ComputerName | Foreach-object { \n    $Computer = $_ \n    $CanonicalName = Get-ADComputer -Identity $Computer -Properties CanonicalName | Foreach CanonicalName",
      "PostedDate": "2015-09-10T08:17:45.76",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Error ps1:73 char:51",
      "Subject": null,
      "Text": "I am not too sure, however you will need to provide information on how you called the script/function to start it?\n\nAlso did you use the download script button or copy and paste the script? make sure you downloaded the file.",
      "PostedDate": "2015-09-13T11:31:46.287",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email if connections -gt N ?",
      "Subject": null,
      "Text": "You may want to take a look at this script.\n\nhttps://gallery.technet.microsoft.com/scriptcenter/2d537e5c-b5d4-42ca-a23e-2cbce636f58d\n\nIt does something similar with the notifications piece that maybe helpful.",
      "PostedDate": "2015-09-28T12:36:09.057",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "information",
      "Subject": null,
      "Text": "Hi Adil,\n\nOkay that makes sense.\n\nCan you try the following:\n\nJust update the one line as follows then try it again:\n\nfrom:\nPortWWN          = $Ports\n\nTo:\nPortWWN          = $Ports | Out-String",
      "PostedDate": "2015-10-16T14:36:15.653",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "can i monitor web services",
      "Subject": null,
      "Text": "You could do that.\n\nYou would likely want to just replace the Test-Connection commands with an Invoke-WebRequest.",
      "PostedDate": "2015-11-20T07:15:33.713",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "When I open power shell as administrator it shows V: as the drive",
      "Subject": null,
      "Text": "Hi Kevin,\n\nPlease follow the steps that I gave below, they are very detailed.\n\nThen if you try and fail, let me know the error that you have received.\n\nI do not recommend using this script to override policy set on your computer, please be aware of the warning that goes with this script about security and leaving your computer unlocked and unattended. I wouldn't want to get anyone into any kind of trouble.",
      "PostedDate": "2015-12-08T10:20:43.643",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Same Computername issue",
      "Subject": null,
      "Text": "okay no worries, I think I saw your question over there.",
      "PostedDate": "2016-02-23T09:14:46.5",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Same Computername issue",
      "Subject": null,
      "Text": "This script does not have a -ComputerName parameter.\n\nIf you take a look at the code it reads in the names of the computers in the following line of code:\nget-content \\\\server\\share\\hosts.txt\n\nSo put your computers in that hosts file one computername on each new line.\n\nIf you want the script that uses the computername, use the link in the notes to the newer script.",
      "PostedDate": "2016-01-27T08:37:21.177",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Path error",
      "Subject": null,
      "Text": "The log dir is specified in the parameters.\n          $HomeDir = \"C:\\PS\\AccountLockout\", \n          $LogDir = \"$HomeDir\\Logs\",\n\nCan you make sure that the $homedir exists, that is the base directory for the script tools, then also make sure you create the Log directory under there?",
      "PostedDate": "2016-01-27T08:41:28.477",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Path error",
      "Subject": null,
      "Text": "in order to load those other scripts into memory try the following:\n. C:\\PS\\AccountLockout\\Get-BadPasswordInfo.ps1\n. C:\\PS\\AccountLockout\\Get-DomainController.ps1\n. C:\\PS\\AccountLockout\\Test-Online.ps1\n. C:\\PS\\AccountLockout\\Get-AccountLockout.ps1\n\nThen try to call each function below individaually before running the main get-accountlockout\n\nE.g.\nGet-DomainController\nGet-BadPasswordInfo -User somelockedoutaccountorwithbadpassword",
      "PostedDate": "2016-02-07T09:16:12.467",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Updated code",
      "Subject": null,
      "Text": "Perfect, I was kind of expecting that, thanks for letting me know.\n\nI will update.",
      "PostedDate": "2016-02-09T09:09:38.847",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Updated code",
      "Subject": null,
      "Text": "I now check for both classes, since it seems to have changed back again from Large to Medium  :)",
      "PostedDate": "2016-02-25T13:56:48.23",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Posted this under V2 by accident.",
      "Subject": null,
      "Text": "hmmm okay, well glad it's working, I cannot see anything that should not work on v2, so not sure.\n\nHopefully you are all sorted. I think you mentioned you downloaded the file rather than copying the script, so hopefully that was the case and it wasn't a code error from copying the script from the html page.",
      "PostedDate": "2016-02-23T12:35:26.8",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Posted this under V2 by accident.",
      "Subject": null,
      "Text": "can you try one of the following:\n\n1) import-module .\\start-monitor.psm1\ni.e. change the filename to psm1\n\nOR\n\n2) use dot sourcing to import the ps1 file / function.\n\n. .\\start-monitor.ps1\nget-command start-monitor\nhelp start-monitor\nstart-monitor -computername localhost\n",
      "PostedDate": "2016-02-23T09:14:01.983",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Digitally Signed???/",
      "Subject": null,
      "Text": "No one signs scripts on the Internet, because they are designed to be modified and tested by the end user. So It's up to you to sign the scripts with your own certs to use in your own environment.\n\nJust unblock the file and you will be good to go.\n\nAlso read this: help about_signing\nhttps://technet.microsoft.com/en-us/library/hh847874.aspx",
      "PostedDate": "2016-03-04T20:45:30.047",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "WILL NOT RUN",
      "Subject": null,
      "Text": "Right click on the script file the ps1 file and choose properties, then click the unblock button.\n\nyou ALWAYS have to do this on EVERY script that you download from the Internet.",
      "PostedDate": "2016-03-04T20:38:03.79",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "PowerShell version on entire Sysinternals Suite with a GUI",
      "Subject": null,
      "Text": "These tools are not open source. Mark and colleagues update them constantly as the need requires and they are updated regularly as major builds up onto the http://live.sysinternals.com/ site.\n\nI sync them about once a month to my own machine. \n\nSome of the tools are command line tools and some of the tools are GUI tools, it just depends on the use case.",
      "PostedDate": "2016-03-23T19:33:34.12",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Cannot validate argument on parameter 'ComputerName'",
      "Subject": null,
      "Text": "my guess would be that you have some blank lines at the end of your hosts.txt file.\n\nPossibly remove those and you should be all good  :)",
      "PostedDate": "2016-04-12T09:34:11.467",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to make this work",
      "Subject": null,
      "Text": "The thing about a scheduled task is that it will create the powershell.exe and then also execute the dot sourced function, that you added and then also even execute the function call. . . . .\n\nHowever that function runs in a background job . . . which will be alive so long as the powershell.exe is still alive.\n\nHowever by default here powershell.exe will close as soon as the function has been called, which will also take the background job with it.\n\nThere could be a few ways around this, perhaphs add -NoExit to the call would be the easiest.\n\npowershell -noprofile -NoExit -command {. C:\\Users\\Fast3\\Downloads\\Start-KeepAlive.ps1; Start-KeepAlive -KeepAliveHours 8; sleep -Seconds (60*60*8);exit } \n\n",
      "PostedDate": "2016-04-18T08:52:11.483",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Doesn't work correctly",
      "Subject": null,
      "Text": "Zoltan,\n\nyou did the right thing (the dot source) which actually loads the function into memory, however you never called the actual function.\n. .\\Get-DomainController.ps1\n\nThe script was dot sourced to load the things inside the script. . . then you can run the following to see it was loaded into memory:\n\nGet-command -Name Get-DomainController\n\nThen go ahead and call it:\nGet-DomainController\nor\nGet-DomainController -CurrentForest",
      "PostedDate": "2016-05-12T09:04:17.94",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Typo Perhaps?",
      "Subject": null,
      "Text": "The parametername is computername, computer works because it is a cutdown version of computername, computers doesn't work because that is not a partial match to the real parameter name.\n\nGet-LocalGroup -ComputerName server123",
      "PostedDate": "2016-05-27T08:16:45.857",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Typo Perhaps?",
      "Subject": null,
      "Text": "okay I see where you copied that from and updated the example, thanks.",
      "PostedDate": "2016-05-27T08:18:30.357",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Performance Improvement",
      "Subject": null,
      "Text": "NB. You will also get accounts running services with this query.\nYou can use the following script to only get users running the Explorer.exe process\nhttp://gallery.technet.microsoft.com/scriptcenter/Find-the-logged-on-users-1161bd92",
      "PostedDate": "2016-06-09T07:39:25.477",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "# First time down add to the list and send email",
      "Subject": null,
      "Text": "The script runs on a loop.\n\nSo once it goes down we do a few checks and if you select it will email. Once it's emailed, we don't want to continue to email every time it loops. So we flag it as in the list and it doesn't email. Unless a timeout happens which is 1 hour later by default. Then after the timeout it can send another email to say it's still down.\n\nDoes that make sense ?",
      "PostedDate": "2016-06-23T14:44:56.477",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Add session status to output",
      "Subject": null,
      "Text": "I recommend using the psterminalservices module for this.\n\nDetails are here: http://blogs.microsoft.co.il/scriptfanatic/2010/02/22/psterminalservices-powershell-module-for-terminal-services/",
      "PostedDate": "2016-10-05T09:11:17.397",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Still doesn't work",
      "Subject": null,
      "Text": "you need to dot source it\n\n. .\\Get-DomainController.ps1\n\nthen\n\n1) run Get-Command -Name -GetDomainController\n\n2. Then run Get-DomainController\n",
      "PostedDate": "2017-02-27T08:39:33.473",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Export the data to CSV",
      "Subject": null,
      "Text": "Get-HBAWin | export-csv $home\\desktop\\info.txt -notype",
      "PostedDate": "2016-12-06T12:37:19.057",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How do you run the script",
      "Subject": null,
      "Text": "Here are some instructions that I had posted earlier down the page . ..\n\nstep 1) Download the file and save it to a known location.\nstep 2) right click on the script, select properties, then unblock.\nstep 3) Open the powershell console (running as Administrator/elevated)\nstep 4) dot source the file/function into memory:\n. c:\\fullpath\\Get-LoggedOnUsers.ps1\nThat is dot, then a space, then the full path to the file, then press enter.\nstep 5) see if the function is loaded: Get-item function:\\Get-LoggedOnUser\n         or get-command Get-Loggedonuser\nstep 6) call the function via: Get-LoggedOnUser -computername server123\n",
      "PostedDate": "2016-12-15T11:47:56.647",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Errors",
      "Subject": null,
      "Text": "It looks like you might be missing the - on the computername parameter.\n\n\n if(Test-Connection ComputerName $_ -Count 1 -ea sil ...\n\nshould be:\n\n if(Test-Connection -ComputerName $_ -Count 1 -ea sil ...\n",
      "PostedDate": "2017-01-03T16:20:02.393",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Getting Shared folder size",
      "Subject": null,
      "Text": "from memoryÂ I cannot remember any easyÂ way to do this, unless you setup quotas using FSRM.\n\nFSRM reporting can also help.\n\nIt really depends what kind of storage it is EtcÂ and how the LUNS are provisioned or if it is directly attached.\n",
      "PostedDate": "2017-01-03T16:26:24.43",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Log Results and Scheduled Task",
      "Subject": null,
      "Text": "The best way for loggingÂ a scheduled task with output such as this script is to use a transcript.\n\nAdd the firstÂ three linesÂ to the script:\n\n$tfile = \"OnlineReport_{0:yyyy-MM-dd_hhmmss}.txt\" -f (Get-Date)\n$tfilepath = join-path -path d:\\logs -childpath $tfile\nStart-transcript -path $TFilePath",
      "PostedDate": "2017-01-13T07:33:26.28",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Disable Email Notification Resend",
      "Subject": null,
      "Text": "It should only notify the first time down via email.\n\nHowever after $EmailTimeOutÂ =Â 30 It will send another email.\n\nSo just increase that number, so that it does not timeout.",
      "PostedDate": "2017-01-25T14:25:22.953",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to use this script",
      "Subject": null,
      "Text": "This script is actually for the Azure Service Manger . . .\nwhich is and old API to manage Azure.\n\nHopefully you are using the new API Azure Resource Manager . . . let me know and we can talk more ?",
      "PostedDate": "2017-02-27T08:40:56.82",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "2012r2 working fine",
      "Subject": null,
      "Text": "Thanks for the comment   :)",
      "PostedDate": "2017-02-27T08:39:46.94",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Add multiple email recipients",
      "Subject": null,
      "Text": "if you look at the syntax on send-mailmessage you can see the To field accepts a list of recipients <String[]> \n\nSend-MailMessage [-To] <String[]> [-Subject] <String> [[-Body] <String>] [[-SmtpServer] <String>]\n\nS you just use a comma separated list in the ToField.\n\n$tonotificationÂ =Â (\"user@domain.org\",\"user2@domain.org\"),",
      "PostedDate": "2017-03-10T18:02:31.683",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "does it tell you about remote user as well",
      "Subject": null,
      "Text": "This particular script shows users who have running processes on the system, including service accounts that are running services.\n\nInstead you likely want to use this other script that I link to:\nhttps://gallery.technet.microsoft.com/scriptcenter/Find-the-logged-on-users-1161bd92 \n\nThat one shows just the Explorer.exe process.\n\nAlso you would likely want to make a small modification to the script, to add the SessionID.\n\nThe sessionID works a little differently in different operating systems, however I *think* only sessionid 0 or 1 can be local.\n\n$ProcessinfoÂ |Â ForEach-ObjectÂ {Â Â \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â New-ObjectÂ PSObjectÂ -PropertyÂ @{Â \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ComputerName=$ComputerÂ \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â LoggedOnÂ Â Â Â =$_.GetOwner().UserÂ \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â SIDÂ Â Â Â Â Â Â Â Â =$_.GetOwnerSid().sid}Â \n                            SessionId   =$_.SessionId}Â |Â Â \nÂ Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Select-ObjectÂ ComputerName,LoggedOn,SID,SessionIdÂ \n\nWhat I recommend is actually using the PSterminalsservices module, that has some cmdlets for managing Terminal Services.\n\nÂ Â Â  # Get-TSSession is from @ShayLevy \nÂ Â Â  # http://archive.msdn.microsoft.com/PSTerminalServices\n",
      "PostedDate": "2017-03-17T09:03:53.673",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Problem run",
      "Subject": null,
      "Text": "try save the script as a Get-ADAuditAccess.psm1\n\nThen run:\nimport-module .\\Get-ADAuditAccess.psm1\n\nThen run:\nget-command Get-ADAuditAccess\n\nSee if it the command shows up to be able to be executed.",
      "PostedDate": "2017-03-21T16:35:51.243",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Failed Host Back Online notification?",
      "Subject": null,
      "Text": "There is a parameter for that\n$EmailTimeOutÂ =Â 30Â \n\nBasically after this amount of time the host will be removed from the known hosts that are down, if the host is still down, then it will cause a new notification to be sent.\n\nSo basically change that to 5 and you will get emailed every 5 minutes until the host is back online.",
      "PostedDate": "2017-03-21T16:42:59.597",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Not able to get ping status even if the system is up for some of the servers",
      "Subject": null,
      "Text": "by default ICMP is not enabled on servers due to the firewall.\n\nYou may want to use Test-NetConnection or Test-WsMan instead, since they will respond by default.\n\nAs far as the html report goes, one step at a time try to get a functional solution first with the responses.",
      "PostedDate": "2017-04-04T17:08:31.88",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Hey Ben, this is fantastic!  Thank you!",
      "Subject": null,
      "Text": "The script is on a loop and it checks to send an email based on the $EmailTimeOut value, which is in seconds.\n\nSo if you want to send an email every minute (60 seconds) $EmailTimeOut = 60\nIf you want to send an email every hour $EmailTimeOut = (60 * 60)\nIf you want to send an email every day $EmailTimeOut = (60 * 60 * 24)\n\nThere is not much point in not doing a continuous loop, you may as well see the continuous update, then just decide when you want alerts sent if machines go down.",
      "PostedDate": "2017-05-05T08:08:45.887",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Hey Ben, this is fantastic!  Thank you!",
      "Subject": null,
      "Text": "The settings are there, it already pings 4 time over two cycles before it sends an email\n\n#Â specifyÂ theÂ timeÂ youÂ wantÂ emailÂ notificationsÂ resentÂ forÂ hostsÂ thatÂ areÂ downÂ \n$EmailTimeOutÂ =Â (60 * 24)\n",
      "PostedDate": "2017-04-29T09:18:24.337",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Loop Timeout - Can it be set?",
      "Subject": null,
      "Text": "Since it's in a Do While loop it will run forever.\n\nHowever you can modify the While statement.\n\nwhile ($Exit -ne $True) \n\nPerhaps just set a variable at the beginning, that has the starttime in it. then once the start time - the current time is greater than 120 seconds, return $False. you can use new-timespan to calculate the timespan.",
      "PostedDate": "2018-03-19T20:02:25.807",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email credentials",
      "Subject": null,
      "Text": "help Send-MailMessage -Examples",
      "PostedDate": "2018-01-30T10:49:24.097",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Help me",
      "Subject": null,
      "Text": "There are detailed instructions below: \n\nlook for . ..\n\n\"How do you run the script\"\n2 Posts | Last post December 15, 2016",
      "PostedDate": "2017-11-13T12:02:48.027",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "cannot send email",
      "Subject": null,
      "Text": "I recommend to download to get the correct formatting.\n\nyou have a space after the `",
      "PostedDate": "2018-01-30T10:50:05.007",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "cannot send email",
      "Subject": null,
      "Text": "did you download the script or copy and paste?",
      "PostedDate": "2018-01-29T08:36:39.293",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "The script is trying to remove all the managed disk of a resource group",
      "Subject": null,
      "Text": "The script will delete all VM's, NICS and Disks.\n\nThe items that will be deleted will be the ones that you see returned from running the commands below. So if there is output from the commands below those VM's will be deleted if you execute the function.\n\n \n# The resource group where the servers are deployed \n$rg = 'AZEUS2-MY-APP' \n \n# Delete the SQL and the Integration services role servers \n$role = 'SQL|IS' \n \n#Run the following first to confirm which machines/s will be deleted.  \nGet-AzureRMVM -ResourceGroup $rg | Where Name -Match $role  ",
      "PostedDate": "2017-12-21T10:31:34.797",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "how to add WMI-Objects to this scrip",
      "Subject": null,
      "Text": "Perhaps take a look at this script.\n\nhttps://gallery.technet.microsoft.com/scriptcenter/Find-System-Hardware-b68938c8?redir=0",
      "PostedDate": "2018-01-09T16:35:36.053",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "getting error at line 53",
      "Subject": null,
      "Text": "I recommend to download to get the correct formatting.\n\nyou have a space after the `",
      "PostedDate": "2018-01-30T10:50:16.583",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "getting error at line 53",
      "Subject": null,
      "Text": "did you download the script or copy and paste?",
      "PostedDate": "2018-01-29T08:36:30.37",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Exits without error?",
      "Subject": null,
      "Text": "Hey Peter,\n\nYes you are correct. . . often people will put functions into modules.\n\nThen since modules are always available/since they autoload on the system, you can just run: start-keepalive and powershell knows what that means straight away, it makes it super easy to collect a library of functions that you can utilize everyday. You just have to call them names that are logical so you can remember all of the scripts/functions that you have in your module  :)\n\nI hope you enjoy the script, remember to lock your machine.",
      "PostedDate": "2018-02-13T07:56:41.82",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Use as Azure runbook",
      "Subject": null,
      "Text": "This is not specifically designed to be a runbook. However you can run any script as a Powershell runbook.\n\nUse the test scripts (that are created in runbooks section) to get the code, that allows you to authenticate against Azure using the service principal. The you could put that at the top of any script to authenticate. ",
      "PostedDate": "2018-02-22T07:57:58.59",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": " 896/5000 Error in code.",
      "Subject": null,
      "Text": "You can install mbsa/mbsacli from here: \n\nhttps://www.microsoft.com/en-us/download/details.aspx?id=7558 ",
      "PostedDate": "2018-03-12T09:01:30.233",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": " 896/5000 Error in code.",
      "Subject": null,
      "Text": "can you run: mbsacli \n\nIf not then the you don't have the directory in the environment PATH.\n\nYou might need a reboot or you might need to manually add it.\n",
      "PostedDate": "2018-03-12T12:24:43.597",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "I am getting error here as no SMTP server  was specified",
      "Subject": null,
      "Text": "I recommend to download the script to get the correct formatting.\n\nSince you copied and pasted it you have a space after the `",
      "PostedDate": "2018-03-19T19:59:02.363",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Unable to Run the Script",
      "Subject": null,
      "Text": "# load the function\n. H:\\Tahir\\Scripts\\GetHBA\\Get-HBAWin.ps1\n\n\n# run the function\nGet-HBAWin -ComputerName Server1,Server2",
      "PostedDate": "2018-05-26T00:35:37.153",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Not working to me,",
      "Subject": null,
      "Text": "The script contains a function that has to be loaded into memory before it is called.\n\n# load the function\n. .\\Remove-AzureRMVMInstanceParallel.ps1\n\n# save your context as described in the help.\n\n# call the function\nRemove-AzureRMVMInstanceParallel -ResourceGroup $rg -VMName $vm -Wait",
      "PostedDate": "2018-07-19T12:15:39.617",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Need to have any changes ",
      "Subject": null,
      "Text": "Here are the steps.\n\n1) click on the download \"New-VMBuildAzureRM2.ps1\", save it to your desktop\n2) right click on that file, select properties, then 'unblock' the file.\n3) Open up powershell and login to Azure, you need the AzureRM modules installed\n3a) Install-Module AzureRm -Force\n3b) Login-AzureRmAccount\n3c) authenticate with the pop up and confirm your in the correct subscription\n4) load the function\n4a) in powershell . . dot source the file\n4b) . $home\\desktop\\New-VMBuildAzureRM2.ps1\n5) Now the function is loaded, you can tab complete the function name\n5a) New-VMBuildAzu  <tab>\n5b) It should find: New-VMBuildAzureRM2\n5c) then tab out the parameters\n5d) New-VMBuildAzureRM2 -VMName MS1\n5e) run that and it should deploy\n6) discover other ways to deploy\n6a) help New-VMBuildAzureRM2 -Examples\n",
      "PostedDate": "2018-07-28T10:43:35.99",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Need any change",
      "Subject": null,
      "Text": "it should be fine to run as-is.\n\nIt's a sample script, so it's a little generic, so it should work for you, without any pre-requisites. I do recommend using the keyvault for your password, however it will just use the default password in the script if you haven't set that up.\n\nThere is only the single function in this script that will be loaded.\n\nI recommend to give the instructions below a try and if you have any errors, you can share them here. . . I should look on here every few days for new messages.\n\n",
      "PostedDate": "2018-07-30T19:42:21.627",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Script not working for me ",
      "Subject": null,
      "Text": "I provide a sample of how to call the function so that it includes emails\n\nStart-Monitor -ComputerName www.bing.com -notifyonServerDown -notifyonServerBackOnline -notifyonMaxOutageCount\n\nhowever for that to work, you have to setup your email information in the script\n\nE.g.\n            # specify who gets notified  \n            $tonotification = \"user@domain.org\",  \n            # specify where the notifications come from  \n            $fromnotification = \"admin@domain.org\",  \n            # specify the SMTP server  \n            $smtpserver = \"relay.domain.org\", ",
      "PostedDate": "2018-08-29T17:19:26.827",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running on Linux",
      "Subject": null,
      "Text": "okay, can you. try the test-connection to one of your hosts in your list ?",
      "PostedDate": "2018-10-26T20:28:51.727",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running on Linux",
      "Subject": null,
      "Text": "okay I tweaked it a little, let me know how that goes. .  it should work on Linux now.\n\nNot sure why the test-connection failure takes so long on PS Core.\n\nor why it returns other objects or what stream they are even on. . . anyway hopefully that gets you up and running. . .\n\nOh by the way I didn't look into the email part.",
      "PostedDate": "2018-10-12T21:42:54.187",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running on Linux",
      "Subject": null,
      "Text": "okay I see your issue now. . . I can look into it.",
      "PostedDate": "2018-10-16T18:47:30.037",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running on Linux",
      "Subject": null,
      "Text": "okay I haven't been able to replicate your issue. . .\n\nwhat does this show:\n\n $psversiontable\n\nI am guessing that ICMP is disabled on your hosts or network.\n\nI would recommend using just the simple Cmdlets to test:\n\nTest-Connection -computername xyz -Count 1 -Quiet\n\nThen see if your host responds, if not, then this script is no use, since it needs ICMP.\n\nAn alternate is using a tcp port query of some kinds. . . I will have to play around to see what is supports on PS Core.\n",
      "PostedDate": "2018-10-16T19:02:48.587",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Running on Linux",
      "Subject": null,
      "Text": "Yes, I'll take a look at this for you on Linux with pswh. . .\n\nit should work out of the box, however there maybe a few things that need tweaking.",
      "PostedDate": "2018-10-03T18:32:28.027",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "extended info in mail",
      "Subject": null,
      "Text": "I'll take a look...",
      "PostedDate": "2018-10-08T03:39:57.13",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Disable Loop?",
      "Subject": null,
      "Text": "Yes just comment out this line\n\n# Do {\n\nand then at the end, comment those two lines\n\n#} \n#while ($Exit -ne $True) ",
      "PostedDate": "2018-10-24T20:06:57.61",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "The managed disks was not deleted",
      "Subject": null,
      "Text": "okay, yeah likely the recent code change that I made . . . I'll have to revisit.",
      "PostedDate": "2018-11-21T06:32:37.52",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "The managed disks was not deleted",
      "Subject": null,
      "Text": "Let me take a look . . . I had to make an update to the script recently to take care of a scenario where there were no data disks. . .\n\nI will have to test the update thoroughly since I may have missed something with the update. . . if I post an update I will update the title of the script with the month/date.",
      "PostedDate": "2018-11-15T04:12:54.753",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "The managed disks was not deleted",
      "Subject": null,
      "Text": "just to confirm did you run the following first ? and did the VM get deleted ? and you are sure the data disks were attached to the vm ?\n\nAdd-AzureRMAccount \nGet-AzureRmSubscription \nSelect-AzureRmSubscription -SubscriptionName MSDN \nSave-AzureRmContext -Path $home\\ctx.json -Force ",
      "PostedDate": "2018-11-15T04:14:25.153",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Error message",
      "Subject": null,
      "Text": "Yes you likely need a server that allows smtp relay. . . most likely a server that you can authenticate to.",
      "PostedDate": "2018-11-21T06:33:44.817",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Naming the IP addresses",
      "Subject": null,
      "Text": "You can update the message in $Body\n\n$Body = \"$_ has not responded for 5 pings at $Now\" ",
      "PostedDate": "2018-11-29T01:00:00.41",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "multithreading",
      "Subject": null,
      "Text": "There is an -asjob on Test-Connection, so that would be one way to achieve multithreading.\n\nObviously the script would need some tweaking to read the results of the jobs to confirm which are online.\n\ne.g.  Test-Connection -AsJob -ComputerName 127.0.0.1,8.8.8.8",
      "PostedDate": "2018-12-06T15:16:27.967",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Using -Match",
      "Subject": null,
      "Text": "yes that is correct.",
      "PostedDate": "2019-02-21T00:05:34.303",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Add IP address",
      "Subject": null,
      "Text": "you could certainly add this capability.\n\nYou can now multi select resources in the resource group to delete, so I have just been deleting things in the portal recently.\n\nso I wasn't planning on making any changes to these scripts, that are a bit old now. . . i.e. there are changes with saving your context etc.",
      "PostedDate": "2019-02-21T00:18:14.497",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Add IP address",
      "Subject": null,
      "Text": "okay I have updated the script to also optionally delete the public ip addresses.\n\njust redownload the script and modify the default\n\n    # A configuration setting to also delete public IP's, off by default\n    [string]$RemovePublicIP = $False\n\nto\n    [string]$RemovePublicIP = $True",
      "PostedDate": "2019-03-16T23:55:26.55",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Such a failing script",
      "Subject": null,
      "Text": "There is pre-requisite, you should learn PowerShell first.",
      "PostedDate": "2019-04-03T20:57:59.023",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Such a failing script",
      "Subject": null,
      "Text": "seriously though, if you read the other comments there are lots of examples of people who asked and received assistance. . . you may find your answer there.",
      "PostedDate": "2019-04-03T23:00:14.41",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Dual Monitor",
      "Subject": null,
      "Text": "yeah it takes into account if you have a task bar. . . if you don't it goes full screen, if you do it resizes to the workspace inside of the taskbar.",
      "PostedDate": "2019-04-17T21:35:36.813",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Dual Monitor",
      "Subject": null,
      "Text": "run this with the window on different screens to see the rawui data\n\n$host.ui.RawUI",
      "PostedDate": "2019-04-17T21:38:56.057",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "-Subject",
      "Subject": null,
      "Text": "okay yeah you need the backtick or else put it on the same line.",
      "PostedDate": "2019-04-26T19:39:00.543",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "ComputerName?",
      "Subject": null,
      "Text": "sure thing... since it uses get-content, it just reads one host from each line.\nE.g.\n\nserver123\nserver124\nserver125",
      "PostedDate": "2019-06-02T02:46:26.823",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "ComputerName?",
      "Subject": null,
      "Text": "Also if you like you can comment any servers out in the file that you don't wish to monitor.\n\nserver123\nserver124\n#server125\nserver126",
      "PostedDate": "2019-06-02T02:47:17.417",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Small error in script",
      "Subject": null,
      "Text": "Thanks Jasper, looks good, I will add back in... I think it got deleted along the way somewhere uploading new versions.\n\nI had to do the same on the Nics etc.",
      "PostedDate": "2019-06-18T22:46:12.913",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Small error in script",
      "Subject": null,
      "Text": "okay I added:\n\n| Where-Object {$_.Name} |",
      "PostedDate": "2019-06-18T22:53:53.15",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Email authentication ",
      "Subject": null,
      "Text": "help send-mailmessage -full\n\n[-UseSsl] [-Credential <PSCredential>]\n\nyou will need to use these additional parameters",
      "PostedDate": "2019-07-08T22:42:36.92",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How can i give name for the ip address Plz suggest.",
      "Subject": null,
      "Text": "are you using hostnames in the text file or IP Addresses ?",
      "PostedDate": "2019-07-17T17:01:17.567",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How can i give name for the ip address Plz suggest.",
      "Subject": null,
      "Text": "I see... it was designed to use the hostname in the text file list.\n\nif you are using IP addresses then you need to resolve them later.\n\nit doesn't make sense to keep both IP and hostname in the text file because they may change... that is why we have DNS names in the first place.\n\nThere are many ways to resolve dns hostnames from ip address using powershell\ne.g. \n> [System.Net.Dns]::GetHostByAddress('1.1.1.1').Hostname\n> one.one.one.one",
      "PostedDate": "2019-07-24T17:24:07.057",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How can i give name for the ip address Plz suggest.",
      "Subject": null,
      "Text": "well they are either registered in DNS or they are not.\n\nIf they are domain joined they will register.\n\nI am not really sure what you are asking?\n\nyou have the IP addresses in the file,.. you get notified when they are down, if they have no hostnames or registrations in DNS, I am not sure what name you are hoping to use in the report ?",
      "PostedDate": "2019-07-26T00:41:24.54",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How can i give name for the ip address Plz suggest.",
      "Subject": null,
      "Text": "I see...\nWell I would user import-csv instead... then put headers in the file for the IP Address and the Description.\n\nThen import that, loop through anywhere that uses $_ change to be $_.IPAddress and then you can use your $_.Description as well.",
      "PostedDate": "2019-07-26T06:13:01.427",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How can i give name for the ip address Plz suggest.",
      "Subject": null,
      "Text": "oh that's great.\n\nIt looks like you have some room to improve the output even further, however if you are happy with it, at least you have the details that you need in the report\n\n:)",
      "PostedDate": "2019-07-29T05:06:44.87",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Positional parameter error for Send-MailMessage?",
      "Subject": null,
      "Text": "oh yeah that happens . . not sure why I used that it only gets people into trouble  :)\n\nThanks for the update.",
      "PostedDate": "2019-07-26T00:38:36.633",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "5 failed pings not enough",
      "Subject": null,
      "Text": "I think you can add a variable at the top called\n$pingcount = 5\n\nthen further down look for this line. . . see the -Count is hardcoded to 1.\n\nwrite-host \"Unavailable host ------------> \"$_ -BackgroundColor Magenta -ForegroundColor White \n$p = Test-Connection -ComputerName $_ -Count 1 -ea silentlycontinue \nif(!($p)) \n\nChange that to $PingCount\n\nE.g.$p = Test-Connection -ComputerName $_ -Count $PingCount -ea silentlycontinue\n\nThat way it will continue to ping the host for 5 times . . . or however many you like.\n\nI think that should work for you . . . I guess you have a bit of a flaky network ?\n",
      "PostedDate": "2019-08-06T04:13:00.907",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "5 failed pings not enough",
      "Subject": null,
      "Text": "I should say . . . I think it likely uses to be set to 5 pings, however at the moment, it appears to only be the 1 ping. . .\n\nThe script is very old,.. so that is probably why the verbose message doesn't match the actual code. . . apologies about that, however hopefully that works for you.",
      "PostedDate": "2019-08-06T04:14:37.463",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Logging of Up and Down events in CSV format",
      "Subject": null,
      "Text": "The easiest way for you to do that is to simply add the following at the beginning of the script:\n\nStart-transcript",
      "PostedDate": "2019-09-17T23:50:57.367",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "I would just recommend adding this to your profile then the existing script will work.\n\nEnable-AzureRMAlias\n\nyou can also just add that line to the top of the script.",
      "PostedDate": "2019-09-17T23:52:10.737",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "also just remove the #requires lines at the top",
      "PostedDate": "2019-09-17T23:52:42.477",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "It should have a different file (output) for each subscription ?",
      "PostedDate": "2020-02-21T21:19:47.733",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "I am not sure if your subscription names might be the same or if you may need to choose an different property to name the file Etc. ?",
      "PostedDate": "2020-02-21T21:20:57.273",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "hmm it sounds like it's not swapping subscriptions or something.",
      "PostedDate": "2020-02-22T23:52:17.69",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Convert from AzureRM to Az?",
      "Subject": null,
      "Text": "perfect, nice job and thanks for the follow up.",
      "PostedDate": "2020-02-24T18:32:19.59",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Managed disks are not being deleted",
      "Subject": null,
      "Text": "did you just download it?\n\nI haven't used the script for so long... I will try to test it out today.\n\nthen can provide an update.",
      "PostedDate": "2019-09-17T23:53:56.987",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Managed disks are not being deleted",
      "Subject": null,
      "Text": "are you using managed disks for your data disks or old style disks with vhduri ?",
      "PostedDate": "2019-09-19T21:14:04.88",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Managed disks are not being deleted",
      "Subject": null,
      "Text": "okay i found the issue\ni had\n                $DataDisks = @($VM.StorageProfile.DataDisks.Name)\n                $OSDisk = @($VM.StorageProfile.OSDisk.Name)\n\nSince I was already only grabbing the .Name it was only a string not an disk object.\n\n($OSDisk + $DataDisks) | where {$_.Name} | ForEach-Object {\n\nupdated to\n\n($OSDisk + $DataDisks) | where {$_} | ForEach-Object {\n\n\nAlso made one other update\n\nWrite-Verbose -Message \"Connected to $($ctx.Context.Subscription.Name)\" -Verbose\nto\nWrite-Verbose -Message \"Connected to $($ctx.Subscription.Name)\" -Verbose\n\nYou can just download it again....",
      "PostedDate": "2019-09-19T21:55:57.33",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Managed disks are not being deleted",
      "Subject": null,
      "Text": "okay yeah that is back to normal now.\n\nAll fixed.",
      "PostedDate": "2019-09-19T22:07:56.997",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "modifying it to show when the server is up",
      "Subject": null,
      "Text": "This is a older version of the script,.. if you check in the description you will see the link to the newer version.\n\nThat version has the option for notify when back online already included.",
      "PostedDate": "2019-11-09T17:58:31.727",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "is this supported by Microsoft?",
      "Subject": null,
      "Text": "Yes if you have an Enterprise Subscription.\n\nWhy do you ask ?",
      "PostedDate": "2020-02-07T03:22:46.817",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "is this supported by Microsoft?",
      "Subject": null,
      "Text": "https://docs.microsoft.com/en-us/rest/api/billing/enterprise/billing-enterprise-api-billing-periods\n\nall the links are up to date..",
      "PostedDate": "2020-02-14T00:20:35.027",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "How to run script",
      "Subject": null,
      "Text": "download and save the script\ne.g.  d:\\scripts\\start-monitor.ps1\n\nRight click on the script, go to properties and click unblock and okay.\n\ncreate a new script\ne.g. d:\\scripts\\mymonitor.ps1\n\nin your script put the following:\n\n# import the function\n. d:\\scripts\\start-monitor.ps1\n\n# start the monitor\nStart-Monitor -ComputerName www.bing.com -notifyServerDown -notifyServerBackOnline\n\nThen run that script.\n\nyou can also do this. which makes it easier to keep a list of servers.\n\n$HS=@\"\nServer003\nServerc004\nServerc001\nServerc002\nServerc009\n#Server011\n\"@            \n            \nStart-Monitor (Convert-HString $HS)",
      "PostedDate": "2020-02-14T18:19:02.203",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Improper Output",
      "Subject": null,
      "Text": "I would guess this is a permissions issue.\n\nyou likely need Admin or elevated session to get this info from WMI.",
      "PostedDate": "2020-02-26T22:43:21.21",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Unable to send the Email Message",
      "Subject": null,
      "Text": "Try put this all on one line\n\n\nfrom:\nSend-MailMessage -Body \"$body\" -to $tonotification -from $fromnotification ` \n                        -Subject \"More than $MaxOutageCount Hosts down, monitoring aborted\" -SmtpServer $smtpServer \n\n\nto:\nSend-MailMessage -Body \"$body\" -to $tonotification -from $fromnotification -Subject \"More than $MaxOutageCount Hosts down, monitoring aborted\" -SmtpServer $smtpServer\n",
      "PostedDate": "2020-03-12T17:06:32.257",
      "LastModifiedDate": null,
      "SearchableText": ""
    },
    {
      "Thread": "Unable to send the Email Message",
      "Subject": null,
      "Text": "Also i recommend to download the script, not copy it from the webpage.",
      "PostedDate": "2020-03-14T05:02:49.023",
      "LastModifiedDate": null,
      "SearchableText": ""
    }
  ],
  "review": [],
  "subscriptionUserEmailPreferences": [
    {
      "Email": "b_r_w_@hotmail.com",
      "Locale": 1033
    },
    {
      "Email": "b_r_w_@yahoo.com",
      "Locale": 1033
    }
  ]
}